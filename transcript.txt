00:00
in this course I'm gonna teach you everything you need to know to get started programming in
00:04
python.
00:05
Python is one of the most popular programming languages out there,
00:09
and it's by far one of the most sought after for jobs
00:13
and so if you're trying to get a job
00:14
or you're trying to you know,
00:16
automate your life
00:17
or you try to write awesome scripts to do a bunch of different things than
00:20
python's for you
00:21
honestly
00:22
more and more developers every day are moving their projects over to python because it's such a powerful
00:27
and the surgeon
00:28
easy to use language,
00:29
a lot of programming languages out there just aren't very beginner friendly there's
00:33
a lot of syntax there's a lot of like little things that if you get wrong the program will yell at you.
00:38
python is the complete
00:39
opposite of that.
00:41
you basically just type out what you want to do in python does it it's that simple there's not
00:45
a whole lot of syntax to learn the learning curve is literally zero you jump in,
00:50
you can start writing your first program in seconds.
00:53
in this course
00:54
I'm gonna teach you guys.
00:55
everything you need to know to get started in python.
00:58
I designed this course
00:59
especially for python,
01:00
and each lesson has been specially designed with examples
01:03
that will help you along the way.
01:05
with so many people starting to learn python the question isn't,
01:08
why should you learn pipe on the question is why shouldn't you ?
01:11
and I think for a lot of people the reason they might not want to learn python is because they're intimidated or they're afraid that it's going to be too hard.
01:18
trust me I am going to hold your hand through this entire course we're going to talk about all the core concepts in python we're going to look at
01:25
everything you need to know
01:26
to start programming in python and start being confidence are writing scripts and start writing programs that are awesome in doing cool things in your life.
01:34
anyway
01:34
I'm super pumped to be teaching you guys python.
01:37
I can't wait to get started in this course
01:38
and I hope you guys stick around and fall along with the course and learn this amazing programming language
01:48
in this tutorial dominates three guys how to install python onto your computer.
01:52
and we're also going to install a text editor that we can use to write
01:56
our python programs
01:57
in.
01:58
so the first order of business is to actually install
02:01
python on your computer.
02:03
so we want to do is head over to your web browser
02:06
and
02:07
you want to go over here to this page it's just
02:09
www dot python dot org
02:12
forward slash
02:13
downloads
02:14
and on this
02:14
page there's
02:15
going to be
02:16
two buttons down here
02:18
and this is going to say download python three point six point three.
02:21
and at least
02:22
the version that I have right now or download python two point seven point one four.
02:27
so here's the thing about python there's actually two major versions of python
02:31
that are in use
02:32
currently
02:33
there is
02:34
python two
02:35
and there's python theories you can see over here,
02:38
this is like two point seven point one four
02:41
basically any python two
02:43
version we would just refer to as like python two
02:46
and here's like the latest
02:47
python three version.
02:49
and so there's these two versions that you can download and the first thing we have to decide on which version do we want to download.
02:55
and here's the basic difference
02:56
python
02:57
two
02:58
is a legacy version of python which basically means that
03:02
it's like an
03:02
old version and it's not being like actively maintained or supported
03:07
like officially by python anymore.
03:09
python
03:10
three is like the future of python it's like the newest version it's the one that's getting actively maintained and supported.
03:17
so there's pros and cons to picking either won
03:20
a lot of people say like python too
03:22
has been around longer and so there's more like
03:25
libraries there's basically just more python code written in python two
03:30
so therefore like there's a few more things that you can do in pipe onto then you can do in python three
03:35
but then again
03:36
python two is not supported and you know,
03:38
five or ten years from now
03:40
probably no one's going to be using it.
03:42
python three it like a site is like the future of python it's the newest version it's the one that
03:47
you know it's sort of being maintained going forward.
03:50
so for the purposes of this tutorial I'm going to be teaching you guys
03:53
python
03:54
three
03:55
so we're going to want to download python
03:57
three
03:57
now here's vaguely
03:59
if you learn python three or you learn python to the differences aren't very big.
04:03
there are a few differences in like some syntax and just so
04:07
you know little things here and there,
04:08
but if you learn python three you'll be able to jump right in and
04:11
code in python two as well don't let anyone
04:14
tell you that
04:15
you have to learn one of the other.
04:17
we're going to learn python three just because it's I think probably the best for a beginner to learn.
04:22
and so that's the one that we want to download so I'm just going to click download python three
04:26
and we're gonna go ahead and download
04:27
this version.
04:29
and when that's done downloading I'm going to head down to my downloads folder
04:33
and you'll see here we just have this file
04:36
doubleclick,
04:37
and we get this like python installer so I'm going to click through here,
04:42
and we'll be able to install python three on our computer
04:45
right when that's done and stalling we can just close out of this and we should begin to get us now we have python three
04:51
installed on our computer.
04:53
the next step
04:54
is we need to choose a text
04:56
editor so
04:57
we're going to be writing a bunch of code so we're going to need some you know environment of some program that we can write all that code in.
05:04
and really you can write python in any text editor you could write it in like a note pad or tax at it,
05:10
it doesn't really matter
05:11
but there are special
05:13
text editors that are designed
05:14
just for writing python code.
05:17
and these are called
05:18
id ease and not stands for
05:20
integrated development environment.
05:22
it's basically just a special environment where we can you know ron and execute our python code.
05:27
and it'll you know basically like tell us how we're doing so were
05:30
the only if we write something that's wrong or we
05:32
have errors it'll kind of
05:34
point us in the right direction of what we need to do to fix that stuff,
05:37
so in this course we're going to be using an idea
05:39
and
05:40
one of my favorites
05:41
and one of the most popular ity ease for python is called pi charm.
05:45
so I'm over here on this website.
05:46
it's called
05:47
jet brains
05:48
dotcom
05:49
forward slash
05:50
pi charm.
05:51
and this is the idea that we're gonna be using in this course
05:54
so I'm just gonna come over here and click this big download
05:57
now button
05:58
and we'll go ahead and
05:59
download this
06:00
pie charm program
06:02
right so I'm getting this page are here you can see there's two versions of pi charm
06:06
one as a professional version and that one's like paid they have to pay for it.
06:10
but then there's this community version down here and that's free and open source so I'm going to download this one
06:15
and this should have everything we need to get started using python
06:19
right when that finishes downloading I'm just going to
06:21
pull that up in my downloads folder
06:23
and
06:24
again we can just sort of
06:25
run this guy
06:26
and I'm on a mac so I'm going to have to drag it over to my applications folder.
06:31
all right so now have pi charm
06:33
and we have python
06:34
three installed on your computer.
06:36
so we're ready to start programming in
06:39
python.
06:43
in this tutorial we're going to create our first
06:46
python program.
06:47
and we're going to be able to run it and
06:49
see how everything works.
06:51
the first thing I want to do is open up
06:52
pi charm so pi charm was the
06:54
idea he the
06:56
integrated development environment
06:57
that we downloaded in the last tutorial so
07:00
I'm just going to go out and search for it on my computer
07:03
and I can just open it up
07:04
and we first opened up high charm we should basically just get a window
07:07
prompting us to create a project.
07:10
so you can see that down here.
07:12
actually the first thing I want to do though is come over here to configure
07:16
and I'm just going to
07:17
click on preferences.
07:19
and I actually want to
07:20
change the appearance
07:22
so
07:23
I'm gonna go ahead and
07:25
give this a theme so I just went over here to appearance and behavior appearance
07:29
and I'm gonna change the theme to
07:31
darker color
07:31
because I think it's a little bit easier to
07:33
use and look at,
07:35
but you don't have to do that if you don't want you
07:37
so
07:38
down here
07:38
I'm just going to click
07:39
create new projects
07:41
and it's going to
07:41
give us this little window right here so I can just name my project.
07:45
and I'm just going to name this
07:47
graph.
07:48
and then there's other option down here where it says interpreter.
07:52
now
07:53
what we wanna select
07:54
is
07:55
python version three
07:57
so if I click down here you'll notice that there's a couple different options.
08:01
so I'm on a mac computer
08:02
and
08:03
by default mac has
08:05
python
08:06
version two installed on it.
08:08
if you're on a windows machine I'm not sure if it does but
08:11
in this tutorial we're going to be using python three so you wanna make sure that you have python
08:16
three selected as the interpreter,
08:19
otherwise
08:19
you
08:20
might not be able to fully follow along with what we're doing in this video.
08:23
so now it's going to come down here and click
08:25
create.
08:26
and this is going to go ahead and create our projects
08:28
for us
08:29
right so now we have
08:30
our
08:31
python project
08:32
up and running,
08:33
and I'm sure you guys how we can create our first
08:36
python program,
08:37
so over here in this draft folder and this is just that project that we created.
08:42
I'm just going to right click
08:43
and I'm saying new
08:45
and I'm going to come down and click
08:46
python file so we want to create a new python file this will be our first
08:50
python program.
08:52
and
08:52
I can just give this a name,
08:53
so why don't we just call this
08:55
app
08:55
and it's going to click ok
08:56
all right so now we have our first
08:59
python file
08:59
open
09:01
and we can just start typing in some python so I want to show you guys.
09:04
does a very basic python program.
09:07
and this is just going to be a hello world programs so we're just gonna print something out onto the screen.
09:11
so when I say
09:12
what I want to do is I want to type out p r iyer anti prince
09:16
and wanted to have an
09:17
open and closed
09:17
parentheses
09:19
now
09:19
inside of those parentheses we can make some
09:21
quotation marks
09:23
and inside of the quotation marks I'm just going to tape out
09:25
hello
09:26
world.
09:27
so this is like a very basic python program.
09:30
and what this is gonna do is
09:31
it's just going to print out hello world
09:33
onto the screen.
09:35
and so now what I can do
09:36
is I can actually run this file and we're actually getting a little arrow here it wants us to create a new line
09:41
at the end of the file.
09:42
and so now in order to run our python program I'm just going to come up here to the top
09:47
and I'm cinematic run
09:49
and we'll click this run button right here
09:51
and I will see what happens
09:52
so it's
09:53
asking me what I want to run I can just click add up
09:56
and
09:57
down here at the bottom you'll notice that we have this text that just got printed out
10:01
hello world,
10:02
so
10:03
whatever I
10:04
print
10:05
or whatever I put inside of this print statement is going to get printed out
10:08
down below in the council so
10:10
as long as you're getting that print statements work then you
10:13
actually written your first python program.
10:15
and as we go through it
10:16
forward in the course were can be writing
10:18
all sorts of awesome python programs.
10:20
and we're going to do an
10:21
all sorts of cool stuff
10:26
in this tutorial I wanna talk to you about writing a basic python programs so we're going to write it as a very simple python program.
10:33
we're going to look at how we can go ahead and write up programs we're going to talk about
10:37
how our programs are getting executed by python
10:40
and we're also going to draw out a little shape onto the screen so
10:44
this is going to be pretty cool I'm excited to
10:46
talk you guys about just the
10:47
bare basics of python,
10:49
and really just sort of give you an introduction so
10:51
over here
10:52
we have our
10:53
basic text editor and so
10:55
any of the
10:56
python code that I write inside of this file
10:59
is actually going to get executed by a python so
11:03
this python file
11:04
has a bunch of
11:05
python code inside of it.
11:07
and basically what we're doing when we're
11:09
programming in python is we're just giving the computer a set of instructions.
11:14
right that's really what programming is it's just like we're specifying a set of instructions
11:18
and the computer is going to go off and execute those instructions that we give it.
11:22
and so
11:23
the more complex the instructions we give to the computer the more complex
11:27
the tasks
11:27
the computer can
11:28
carry up.
11:30
so I'll show you guys how we can use some python instructions or some python code
11:34
in order to draw out a shape onto the screen so
11:37
I'm actually going to draw out
11:39
a little triangle.
11:40
so over here,
11:41
we can actually print something out onto the
11:43
screen and python using something called a print statement so I can just type out
11:48
print.
11:48
and inside of these parentheses.
11:51
I can just type
11:52
some quotation marks
11:53
and inside the quotation marks
11:55
we can
11:55
put whatever we want to print out onto the screen.
11:57
so I'm gonna
11:58
copy this and I'm actually going to make
12:00
a few of these little prince statements
12:02
and we're going actually draw a sheep.
12:04
so
12:05
we're gonna draw like
12:06
a triangle type shape
12:07
so down here it's gonna draw a forward slash
12:10
and then up here I'll make a space and we'll do another foreign sash
12:14
here will make
12:14
two spaces
12:16
with united forward slash.
12:17
and over here
12:18
we can make three spaces and afford sash.
12:21
and now I'm going to draw like a vertical bar is going all the way down.
12:27
and actually we can do some underscores here as well.
12:29
I think high school
12:32
right so now we have our triangle looking shave and you can see
12:35
it looks kind of like a right triangle
12:37
so I can save my file.
12:39
and I can either come up here to run and
12:42
click run app
12:43
or of using pie charm you can also just come over here and click this play button
12:47
and when I click the play button I want you to notice what happens down here
12:51
so
12:52
down here we have this little window and
12:54
this is called the consul
12:56
and it basically the council is a place where python is going to
13:00
output some information so
13:02
when we use this print statement were basically telling python late
13:05
hey can you print something out onto the consul.
13:08
so
13:08
there's a lot of situations where we're gonna wanna see what's going on in our code.
13:13
and we can use that print statement and
13:14
print things out to the council.
13:16
and we can basically like have a little window into what our programs doing
13:20
in our case we're just going to be printing out this triangle onto the consul.
13:24
so I'm gonna come over here and click this play button
13:27
and you'll see down here
13:28
we're actually printing out that
13:30
triangle
13:31
so mission accomplished we were able to print out our shape.
13:34
so I can really draw any shape I want it as long as I was
13:37
able to
13:38
specify
13:39
inside of these print statements.
13:41
so
13:41
essentially what python's doing when I click that play button
13:45
is it's going into this file and it's looking at all of these instructions in order.
13:49
so the first thing it does is it goes to this instruction and it says
13:52
ok,
13:53
they want me to draw out these like little forward slash in this vertical bar onto the strain,
13:58
once it does that it goes down to this instruction it says
14:01
ok
14:01
they want me to print something on again
14:03
when it prints dot out it goes down to this instruction
14:05
etc
14:06
so
14:07
python is actually going to execute the lines of code that we write
14:11
in order.
14:12
so
14:12
the order in which I write the instructions
14:14
matters a lot.
14:16
so for example if I was to take this last line here
14:19
and put it up here at the top.
14:22
now when I save the file.
14:23
instead of just drawing up that triangle.
14:26
it's going to draw out
14:27
this little upside down
14:28
bottom thing at the top and then
14:30
the rest of the triangle down here so
14:32
the order of the instructions actually matters a lot.
14:35
so this is basically how your python programs are going to go.
14:39
as we go through this course we're going to learn more and more of these little lines so here we're just using this little print function basically and just print something out on to the screen,
14:48
there's a bunch of little things like this that we can learn as we go through
14:51
will learn more and more instructions that we can give to the computer.
14:55
but in this lesson I just wanted to kind of show you guys the basics right.
14:59
oh
15:00
we can essentially just define these little instructions for the computer
15:04
and the computer will execute them
15:06
in order.
15:10
and this tutorial I wanna talk to you guys about using variables in
15:14
python.
15:15
now in python and you're going to be dealing with
15:17
a lot of data
15:19
and so a lot of times in our program we're going to be working with
15:21
all types of information and data and values,
15:25
and sometimes that data
15:27
can be difficult to manage.
15:29
so in python we have this thing called a variable.
15:32
and it's basically just a container
15:34
where we can store certain
15:36
data values.
15:37
and when we use a variable when we put those
15:40
data values inside containers.
15:42
it makes it a lot
15:43
easier for us to work with and manage
15:45
all of the different
15:46
data inside of our programs.
15:48
so variables are extremely helpful and it's sort of like a
15:52
core topic in
15:53
python that you're really going to want to know and master.
15:56
so in this tutorial omelets each you guys.
15:58
everything you need to know to get started with variables we're going to look at what they are
16:02
why they're useful and we'll look at the different types of variables
16:05
and the different types of
16:07
data that we can store
16:08
inside of variables,
16:10
who over here in my
16:11
python file I just have a very simple program.
16:14
and it's basically just printing some text out onto the screen.
16:17
and so this is actually a little story that I wrote it says.
16:20
there once was a man named george
16:23
he was seventy years old.
16:24
he really liked the name george
16:26
but didn't like being seventy.
16:29
so this is a valid python program I can go ahead and
16:32
run this program
16:33
and you'll see down here in the council
16:35
everything prints out and
16:37
it looks great so
16:38
we have an awesome little python program here.
16:40
well let's say that inside of our story I wanted to change
16:44
the character's name
16:46
so instead of naming the character george let's say I wanted to name the character
16:49
jon
16:50
well
16:51
I'm going to have to go through and I'm going to have to manually change the name george to the name john at every place inside of this story where it's mentioned.
16:59
so I'm not to go over here and I'll say
17:01
ok
17:02
john I'm going to have to manually change that
17:04
and then
17:05
ok it's out here we're going up to again manually type in john and change it to john.
17:10
so in order to change the character's name I had to manually go in and change it in both places.
17:16
and now let's say
17:17
ok
17:17
maybe we want to change the characters ne
17:19
age also so in addition to changing the name.
17:22
we also want to change the age let's make him a little bit younger so why don't we say john is going to be thirty five.
17:29
so you see here I had to come here and manually change the age and then come down here
17:35
and manually change it again
17:37
right.
17:38
and now that we changed it like
17:39
it's going to work it's going to be updated in our program.
17:41
but you'll notice that in order to make that change like I had to look through the entire program find it where that
17:47
value was and change it,
17:49
and
17:50
this was only with
17:51
four lines
17:52
of the story imagine if I had a story that was like
17:55
thousands of lines long.
17:57
and we mentioned that the character's name and
17:59
age like
17:59
hundreds of times.
18:01
we don't have to look through each one of those lines and
18:03
manually change the character's name
18:06
and that is not a very good way for us to do this
18:09
and
18:10
it's really not a good way for us to manage the data in our program right the
18:14
character's name in the age.
18:15
and so we can actually use a variable
18:18
in order to store
18:19
the character's name and the characters.
18:21
age.
18:22
and when we use that variable it'll make it a lot
18:25
easier for us to put the character's name and age.
18:27
inside of our little program here.
18:30
so I'm gonna show you guys how we can create a variable for the character's name and age.
18:33
now it's going to go up here above this print statement.
18:37
and
18:37
up here I want to create a variable.
18:40
so when we create a variable in
18:42
python we actually need to give
18:45
python
18:45
a couple pieces of information.
18:47
the first piece of information we need to give python is the name of the variable so I need to actually assign a name
18:54
to this container where we're going to be storing information.
18:57
so all I have to do is just type out
18:59
the name of the variable
19:00
that I want to create so I'm going to create a
19:02
variable called character name.
19:05
so I'm just going to say
19:07
character
19:08
adam's they underscore
19:09
name
19:10
so generally when you're creating a name
19:13
for a variable in python.
19:14
you want to separate different words
19:17
with an underscore so I have two words here and I'm separating them with an underscore.
19:22
and now what I need to do is I need to
19:24
put a value
19:25
inside of this very more so
19:27
basically what I can do is I can just say
19:29
equals
19:30
and over here I can type a value
19:32
so I'm just gonna type out the character's name inside of
19:35
quotation marks.
19:36
so we're just gonna type out john.
19:38
so now we have a variable for the character's name
19:42
and below this character named variable I want to create another variable called
19:46
character
19:47
age certain just going to tape out
19:49
character
19:50
underscore
19:51
age.
19:52
and I'm going to set this
19:53
equal to the characters age which is thirty five.
19:58
so we now have two variables,
19:59
one representing the character's name and one representing the characters
20:03
age.
20:03
so what I can do now as I can replace
20:06
the character's name inside of this story
20:08
with
20:09
this variable.
20:10
and I'm gonna show you guys how to do that
20:12
so if we want to put a variable inside of this print statement.
20:15
I'm actually going to have to do a couple of things.
20:17
the first thing I'm going to have to do is
20:20
end off this
20:21
text in here so I'm going to have to put
20:23
a
20:24
quotation marks here the end
20:26
and you can see I'm basically
20:27
wrapping this whole thing into a
20:29
single like quoted line.
20:32
and now I also have this tax overhear the end so I'm going to have to put a quotation mark here.
20:37
so now I have
20:38
a
20:38
bunch of tax year in quotation marks.
20:41
and then I also have tax over here in quotation marks
20:44
now inside of here
20:45
instead of
20:46
saying the character's name
20:47
I want to refer to that character name
20:49
variable
20:50
so I'm just going to say plus
20:54
character
20:56
underscore name
20:57
and I want to say another plus sign so I basically I'm saying I want to
21:01
print out all of this text,
21:03
plus
21:04
the value that stored inside of character name
21:07
plus
21:08
all of this text.
21:10
and what this will do is they will actually print out the character's name we print this
21:14
so I'm gonna go ahead and run this program
21:16
and you'll see down here
21:18
and actually let me put a space over here,
21:20
and we'll run it again.
21:21
so you can see down here,
21:23
we still are printing out there once was a man named
21:26
john.
21:27
and so what python is doing is when it executes this line of code
21:31
it's coming over here and it's seeing
21:33
ok they want to turn out.
21:35
the value inside of character name
21:37
so it
21:38
python's going to go up here it's going to get the value,
21:41
and it's going to
21:41
insert it inside of there
21:43
so I can basically do this for every instance of the character name in my file so I can
21:48
you know
21:49
r is copy this guy right here
21:51
and
21:52
I can just paste it down here where the characters name is
21:55
so apace this
21:57
and you can see now were doing exactly the same thing that we did up there.
22:01
I can also do this for the characters
22:03
age someone to come down here
22:05
and I'll paste in what we just paste it in.
22:08
and I'm going to change this instead of character name was changed to character
22:12
age.
22:14
and I'm going to do this
22:15
in one more spots are going to do this over here we're mentioning the age
22:19
and again I'll just change this to
22:22
carry
22:22
your age.
22:23
and so now when I run this program it's going to print out the same story they were printing out before,
22:29
but
22:29
now I don't actually have to type in the character's name and the characters age.
22:34
I can just refer to this
22:36
variable.
22:37
and the cool thing about variables as if I wanted to change the character's name.
22:41
now all I have to do is change it up here so I could change the characters names you like
22:46
tom or something.
22:47
and we could also change their age so I could change
22:50
the age to be like fifty
22:52
and now that's going to automatically update throughout our entire story
22:56
when I click this play button you'll see
22:58
now we're using the name tom
23:00
and he's fifty years old.
23:02
so that's where variables can come in handy and
23:04
this can be a really awesome way to control and manage
23:08
the data that's inside of our programs
23:11
with variables you can also
23:13
modify their values
23:14
so
23:15
for example let's say that halfway through the story I wanted to change the character's name
23:20
why can just make some new lines over here,
23:22
and down here
23:23
I can actually assign a new
23:25
value to one of these variables.
23:27
so I can say like
23:29
character
23:30
underscore name,
23:31
and in order to give it a different value all I have to do is just say equals
23:35
and will give it a different value and so
23:37
let's say halfway through the story we want to change the character's name to mike
23:42
one now when I run my program
23:44
you'll see here in the first part of the story it says
23:47
there once was a man named
23:48
tom.
23:49
and in the second part of the story,
23:51
it's referring to the name as
23:53
mike.
23:54
so I actually
23:55
updated the variable
23:56
inside of my program
23:58
over here
23:59
and that's a really awesome way
24:00
you know a lot of times in these programs you're going to want to be modifying the values of variables
24:05
so you can do it
24:06
just like that.
24:07
and so finally I want to talk to you guys about the different
24:10
types of data that we can store inside of these variables.
24:14
so over here
24:15
I have the character name and character age
24:18
and
24:18
I'm actually storing what are called strings,
24:21
so a string is basically just
24:24
plain tax straight
24:26
so the name tom that's just plain text
24:29
down here these guys are strings as well.
24:31
so there's a data type in python,
24:34
called a string and it's just
24:36
basically going to store
24:38
plain text
24:38
so
24:39
you know any text that you would have like in a story early know someone's name
24:43
you can store inside of a string.
24:45
there's also another type of data
24:47
that we can store inside of python
24:49
which is numbers
24:51
so an additional storing text we can also store
24:53
numbers.
24:54
so if I wanted to start a number for example
24:57
let's say we wanted to store the character age instead of inside of a string.
25:01
we can store it inside of a number so
25:03
I could just type out fifty.
25:06
and when we're storing a number we don't need these quotation marks
25:09
you only need that quotation mark
25:11
when you're storing a string so if I wanted to a number I can just
25:15
write it out like this,
25:16
and in addition to using whole numbers I can also use decimal numbers.
25:20
so I could say like fifty point five six seven eight
25:23
to one three
25:24
and pythons are going to be able to store
25:26
that number as well.
25:28
you can store all different types of numbers
25:30
and we can also store
25:32
what's called a boolean value
25:34
and a boolean value is essentially a true or false value.
25:39
and there's a lot of instances in programming where we're going to want to represent
25:43
true or false
25:44
data
25:45
for example I can have a variable called like
25:47
his mail
25:49
and this would tell me whether or not someone was a male,
25:52
and in my case it will be true because I'm a guy right so I can
25:56
actually this needs to be
25:57
capital
25:58
so
25:59
I could sort of value of either true
26:02
or
26:03
false.
26:04
and actually if we were naming this in python
26:07
we want to use an underscore or so I would say
26:08
is underscore mail
26:10
and this can be either true or false
26:12
so
26:13
true or false values is maybe not something that you're used to dealing with like in the real world
26:18
but
26:18
in programming we're going to be using a true or false values
26:22
all the time they're super important so
26:25
like I said there's three basic types of data that we can work with in python there's
26:29
strings which is just like a plain text,
26:32
numbers which would be like either decimal numbers or whole numbers like this,
26:36
and there's true or false
26:38
values.
26:39
and these are the basic types of data I mean there's a bunch of other types of data that we can use but I would say ninety nine percent of the time.
26:46
as a new user
26:47
in a new programmer to python,
26:49
you're just going to be dealing with these
26:51
three types of data
26:52
so
26:53
those are the basics
26:54
of the data
26:55
and
26:55
also with variables
26:57
and you're going to be using variables
26:58
all the time in python so you definitely want to practice up and get comfortable
27:02
using them
27:06
in this tutorial are talks you guys about working with strings in python.
27:11
now what the most common types of
27:13
data that we're going to be working with in python is going to be strings
27:17
and strings are basically just
27:19
plain text so any text
27:21
that we want to have inside of our program
27:23
we can store inside of a string.
27:26
so I wanna talk to you guys about all the cool things we can do with strings and we're basically just going to get a
27:30
full introduction into why strings are awesome.
27:33
so over here,
27:35
I'm just going to actually print out
27:36
a strings I'm just going to say print
27:39
and
27:39
inside of these parentheses.
27:41
I can type out a string
27:43
in order to create a string I need to use quotation marks so I can make an
27:47
open and close quotation marks
27:48
just like that
27:50
now
27:50
inside
27:51
the quotation mark I can put whatever text
27:53
I want the string to have so we could say like
27:56
draff
27:56
academy.
27:58
and so now we have a string
28:00
with the text
28:00
draff academy inside of it
28:02
so if I run my program.
28:04
now down here we're going to print out draff academy as you can see,
28:08
and when we have these strings there's actually a bunch of cool things that we can do with them so
28:12
one thing I could do would be to create a new line inside of the string so if I wanted I could come over here,
28:18
and I could save backslash
28:20
n
28:21
and you can see it got highlighted in a different color.
28:24
and what this is gonna do is it's actually going to insert a new line into the string so now it's going to say draff on one line
28:30
and academy on another line.
28:32
so I'm gonna click play.
28:34
and you'll see down here we just get draff academy,
28:37
an addition to the backslash
28:39
n
28:39
I could also use
28:41
a backslash
28:42
quotation marks so
28:43
if I wanted to put a quotation mark inside of my string.
28:47
I can't just put a quotation mark like that
28:49
because pythons going to think that I'm trying to end
28:52
this strength.
28:53
so if I want to include a quotation mark I can just use this
28:55
special backslash character
28:57
and that's called the escape character and it
29:00
basically just tells python that
29:02
whatever character comes after it we want to
29:05
render a literally so
29:07
when I say backslash
29:08
quotation mark.
29:09
it basically means like
29:10
hey python
29:11
I want to point out a quotation mark.
29:13
and so now we'll be able to print
29:14
out
29:14
a quotation mark
29:16
right there.
29:16
I can also use this to print out of backslash so if I needed to put out a backslash.
29:20
I could see backslash,
29:22
and
29:23
it'll just print out a normal backslash now
29:26
so you can see just like that so
29:27
if you want and you can use that backslash to make
29:29
new lines or pronounce quotation marks,
29:31
or you can just use it as a normal
29:33
backslash
29:35
in addition to just typing out a string here I could also create a string
29:39
variable.
29:40
so I could come down here
29:41
up here and we can create a variable and let's call it
29:44
phrase.
29:45
and I'm going to set it
29:46
equal to
29:47
drop off a colony,
29:49
so I can
29:49
store this string value inside of a variable called phrase
29:54
and then when I want to print
29:55
out that variable,
29:56
or I want to access that string variable.
29:59
I can just
30:00
type the name of
30:01
the variable.
30:02
and you'll see that it's going to print out the value that was stored inside of it.
30:06
I can also use something called concatenation
30:09
and concatenation is basically the process of taking a string and
30:13
appending another string onto it.
30:15
so I could come over here and I could say phrase,
30:18
and I can say
30:18
plus.
30:19
and now I can add in another string so I could say like
30:23
is cool.
30:24
and now this is going to say
30:25
druff academy
30:27
is
30:27
cool,
30:28
so I'm basically appending another string
30:31
onto another one they call that concatenation.
30:34
and so in addition to doing all that stuff we can also use a special thing is called
30:38
functions
30:40
and a function is basically just a little block of code that we can run
30:44
and it will perform a specific
30:45
operation for us,
30:47
so we can use functions to modify our strings.
30:50
we can also use functions to get information about our strings.
30:55
so
30:55
I'm gonna show you guys a couple common functions we can use with the strings.
30:59
and
31:00
they're actually going to do awesome stuff so
31:02
in order to access one of these functions I can just say phrase and then I can say
31:06
dot.
31:07
and
31:07
I'm gonna show you guys a function that we can use to convert this
31:10
string entirely into lowercase so I could just say phrase dot lower.
31:15
and I'm going to want to type an
31:16
open and close parentheses,
31:17
and this will take this phrase,
31:19
it'll take my string and it will convert it to lower case.
31:22
so you can see now we just have a draft academy done here but it's entirely in lower case.
31:27
I could also do the same thing for upper case so I could say phrase dot
31:31
upper
31:32
and this will convert the entire string into
31:34
upper case so you can see now it's
31:36
entirely upper case.
31:37
so in addition to
31:39
converting the string into upper case
31:40
lower case
31:41
I can also
31:41
check to see if a string is entirely upper case are entirely lowercase.
31:46
so for example I could say phrase dot
31:48
is upper.
31:49
and this is going to give me back a true or false value
31:53
so it's going to be true
31:55
if the string is entirely upper case
31:57
or false
31:57
if it's not.
31:59
and you can see here we're getting a false value because this
32:02
is an
32:02
upper case
32:03
I can also use these functions in combination with each other so for example,
32:08
I could say phrase
32:11
dot
32:11
upper
32:13
and that a
32:13
parentheses
32:14
and then after this I can say
32:16
dot
32:17
is upper
32:17
and now what it's going to do is it's going to run this
32:20
upper function,
32:21
it's going to convert it into upper case.
32:23
and then it's going to run this
32:24
is upper function right after that
32:27
and you'll see now we're going to get a true value back because it will have converted the whole thing into upper case.
32:33
so you can see now we're getting a true value so
32:36
the news these functions
32:37
one after another it can be really useful.
32:40
and there's a few other ones that I want to show you so we can also
32:43
figure out the length
32:44
of
32:45
this string so
32:47
if I wanted to figure out how many characters were inside of this
32:50
string I could just say
32:51
l e n
32:52
and I'm actually going to make an
32:53
open parentheses,
32:55
and I'm going to make a close parentheses.
32:57
so I'm essentially saying
32:58
alien and this is another function it's the length function.
33:02
and inside of this alien function I'm actually passing
33:05
this
33:06
phrase variable
33:07
basically giving the length function this and it's going to spit out a number so tell me how many
33:12
characters are inside of this string.
33:15
as you can see here we get fifteen because there's fifteen characters inside of draff academy.
33:20
so that's how you can get the whole length of the string and that's going to be really useful as we go forward in python.
33:25
we can also get
33:26
individual characters inside of a string so
33:30
imagine if I wanted to just grab one of these characters like imagine if I wanted to
33:34
figure out what the first character in the string is
33:37
we're going to actually use
33:39
and open a closed
33:40
square bracket
33:41
just like that.
33:42
and in here I can specify the
33:44
index of the character that I want to graph.
33:46
so if I wanted to grab the first character in the string
33:49
I can put in a zero.
33:51
so if I say phrase
33:53
square bracket zero,
33:54
this is going to give me that capital g
33:57
and you can see down here
33:58
that's what gets printed out.
34:00
now I want to point something out
34:01
in
34:02
python.
34:03
when we're working with strings.
34:05
a string
34:06
gets indexed
34:07
starting with zero.
34:08
so you'll notice that in order to access this g.
34:11
I had to put a zero in here.
34:13
that's because in python.
34:15
when we use indexes on a string we start with zero
34:19
so if python is counting the characters
34:22
or its indexing the characters in a string it's going to start with zero so it's going to say
34:25
g is zero
34:27
I as one are as to
34:29
a history.
34:30
so we would say that g is at position
34:32
zero in the string.
34:33
I is at position one
34:35
r is at position two
34:36
a's at position three etc.
34:38
so we start counting
34:40
at zero.
34:42
so if I wanted to access
34:43
the first
34:45
character in the string.
34:46
this g I have to say phrase
34:48
zero and that's just a special thing
34:51
in python and actually most programming languages
34:53
do that so they'll start with
34:55
zero.
34:56
so for example if I wanted to access this
34:58
ei,
34:59
I'm going to have to put
35:00
zero
35:02
one
35:03
two three so I put three inside of here
35:06
now will be able to access that first
35:08
a.
35:09
as you can see we get an
35:10
a right here,
35:11
so this
35:12
is actually really useful being able to grab a specific character inside of a string
35:16
and you're gonna be using it
35:17
that a lot as we go forward and python
35:20
is also another really awesome function that we can use and it's called the
35:23
index function.
35:25
and basically what the index function will do is it'll tell us
35:28
where a specific
35:30
character or string is located
35:33
inside of our strings like unsafe phrase
35:36
dot
35:36
index.
35:37
and
35:38
I can actually give this a value so sometimes when we use these functions in python,
35:43
we can actually give them information so I can give this
35:45
of value
35:47
and we would call this passing a parameter so
35:50
I would call a value that I would give to a function
35:53
a parameter and you'll hear that word a lot.
35:55
so
35:56
for example I can say inside of here
35:58
capitol g,
36:00
and now this is going to return
36:01
the index
36:02
of
36:03
the capitol g inside of our string
36:05
so it should give us back
36:07
a zero because g is at the zero of index
36:10
and you'll see down here that we get a zero because that's where g is.
36:14
so for example if I put in
36:15
a inside it here like the lower case
36:17
a
36:18
it should give me zero one two three
36:21
because that's where the first
36:23
aid is inside of this string,
36:25
so I can click the play button
36:26
and you'll see it's giving us
36:28
a three.
36:29
you can also put actual words in here so for example I could put like
36:32
academy in here,
36:34
or I could even just put like
36:35
a c a d.
36:37
and this is going to tell me where this starts
36:40
inside of my string so when I click play,
36:43
it's going to give me an
36:43
a
36:44
because
36:44
that's where
36:45
a cat and he starts right
36:47
zero one two three four five six seven
36:49
eight
36:51
if I put something in here that wasn't in the strings of for example if I put a z in here,
36:56
that's not in here.
36:57
it's actually going to throw an error so when I play this you'll see that we get this error down here
37:01
because
37:01
the z is not found inside of our program so
37:04
that the next function again can be really useful we'll be using that a lot.
37:08
there's also one more than I want to show you which
37:11
is called replace
37:12
so we can say phrase not replace
37:15
and in here I can actually give this
37:17
two parameters so I can give this replace function
37:20
two values that it can use.
37:22
and the first thing I want to you
37:24
to give it is what I want to replace so for example I could say
37:27
giraffe.
37:28
and then I'm going to put a comma in here,
37:30
and I want to put in here what I want to replace
37:33
draft with so I could just say like
37:35
elephant
37:36
and now instead of saying draff academy this is going to print out
37:39
elephant academy.
37:41
so you can see down here it just says elephant academy so
37:44
this replace
37:45
function
37:45
can be
37:46
really awesome because we can replace
37:48
certain
37:48
words or even certain letters
37:50
inside of our springs with
37:52
other ones.
37:52
so those are some basic ways that we can work with strings inside of python
37:58
and
37:58
there's a lot of these different functions that we can use with strings.
38:02
these are some of the most common the ones that I just showed you right now,
38:05
but if you just do a google search you can find all sorts of
38:08
python functions that you can try out in use and you know,
38:11
see what they do,
38:12
but you definitely want to get comfortable working with strings and python because you're going to be working with them
38:17
a lot.
38:21
in this tutorial I wanna talk to you about working with numbers in
38:25
python
38:27
and numbers are one most
38:28
common data types in python and
38:31
any python program you write is most likely going to be dealing with numbers at
38:35
some point
38:36
so
38:36
I want to talk to you guys about the basics of using numbers we can talk about the different types of numbers that we can represent in python.
38:43
and I also want to show you guys some
38:44
awesome functions that we can use with number so we can do a certain like mathematical operations mechanism
38:51
awesome things
38:52
with numbers I'm going to show you guys
38:54
all of that in this video it's gonna be awesome so
38:57
first thing we can do is
38:58
we can actually just like print out a number.
39:00
so if I want to write a number in python it's really easy I basically just write the number so I could say like print
39:05
too.
39:06
and this is just going to print the number two out onto the screen,
39:10
so I can use a whole number like this I could also use a decimal number so I can say like two point
39:16
oh nine eight seven
39:17
and pythons are gonna be just fine with that we'll be able to print that on
39:21
the screen as well.
39:22
I can also make numbers
39:23
negative so I could make this
39:25
two point
39:25
oh nine
39:26
eight seven
39:27
a negative number and
39:28
python to be able to handle that just fine too.
39:32
in python we can also use
39:35
basic arithmetic so I could do things like addition subtraction multiplication
39:39
fancy like
39:40
three
39:40
plus four
39:41
and now this is going to print this out or was he like three plus
39:45
four point five.
39:46
and this will be able to print out the answer so we get seven point five.
39:50
and we can do a dish in we can do subtraction.
39:53
we can do division
39:54
or we could do like multiplication as well so you can
39:56
pretty much do whatever you want inside of python,
40:00
and if you want to make more complex mathematical equations we can also use
40:05
things to specify order of operations
40:08
so I could use parentheses.
40:10
so for example if I said three times four plus five
40:14
what python is gonna do is it's gonna multiply three and four together so it's going to be twelve and then we'll add five to that so we should get seventeen.
40:24
but let's say that we wanted to change up the order
40:26
right
40:26
I could actually put a parentheses around four and five
40:30
and now
40:31
it's going to add them first social ad foreign fighters will get nine and will multiply that times three so we should end up with twenty seven,
40:38
so you can see we can use those parentheses to specify order of operations so I could make like a very complex
40:45
little equation here and just by using numbers and parentheses.
40:49
we can also
40:50
use one other operation which is called the modulates operator so I could say like
40:54
ted,
40:55
and use this percent sign
40:58
three and this is actually read
40:59
ten
41:00
mod
41:01
three
41:02
and basically what this is gonna do is it's going to take the first number
41:05
divided by the second number,
41:07
and it's going to spit out the remainder.
41:09
so it's basically going to say
41:10
ok
41:10
ten divided by three.
41:12
that's going to be three
41:14
with a remainder of one.
41:15
so this is going to give us the remainder.
41:18
and
41:18
you'll see down here we get one because
41:20
that's the remainder of ten divided by three
41:23
that modulates operator can come in handy quite a bit.
41:26
we can also store these
41:28
numbers inside of variables
41:30
so we can store them inside of these
41:32
variable containers,
41:33
so I could
41:34
come over here
41:35
and I could create a variable called like
41:37
my underscored gnome
41:39
and we'll just store a value
41:41
of let's say like five and here
41:43
is why have you come down here and I can just print out my underscore numb.
41:47
and we'll be able to print that number out to the screen
41:50
just fine.
41:51
so in addition to doing things like a basic arithmetic
41:54
we can also
41:55
do some other stuff so one thing I could do is I could actually convert this number into a string.
42:01
so if I wanted to convert this number into a string I can just say s t r
42:05
and I can put the number that I want to convert
42:08
inside of these parentheses.
42:10
and so what's going to happen now is this number is going to be converted
42:14
into
42:14
a strings when I click
42:16
the run button you'll see it's
42:17
just printing out five but now instead of being a number this is actually a string.
42:22
and this is going to come in handy when you want to print out numbers alongside
42:26
strings,
42:28
so I can come over here and I can say like
42:30
my
42:32
favorite number,
42:33
and we'll be able to print this
42:35
number along with this
42:37
string so I click play,
42:39
and it's as five my favorite number,
42:41
if I was to get rid of this
42:43
string
42:44
right here
42:44
and I wasn't converting the number into a string.
42:47
now pythons gonna have a problem with this.
42:50
it's not going to allow us to do that you can see we get an
42:52
error so
42:53
anytime you want to print out a number
42:55
next to a string you gotta make sure that you use that little string function.
42:59
so
43:00
there's a bunch of other stuff that we can do with numbers and
43:03
a lot of times in python
43:05
you're gonna want to be using specific
43:07
metabolic more advanced math operator so
43:10
there's a bunch of different math
43:12
functions that we can use on our numbers
43:14
and a function is basically just like a little collection of code that does something so
43:19
a function could perform an operation like a mathematical operation on our number,
43:24
we can also give us information about our number,
43:27
so I'm sure you guys some of the most common functions that you'll be using in python
43:32
related to numbers.
43:33
the first one is called
43:35
abs
43:36
and it stands for absolute value so we can get the absolute value
43:40
of
43:41
a number.
43:42
and so over here I'm going to
43:43
make this variable negative five
43:46
and basically I can just say
43:47
abs
43:48
and I can make an
43:49
open enclosing parentheses over here,
43:51
and this is going to give me the absolute value of
43:54
this number up here,
43:56
so when I click the play button,
43:57
you'll see it's just giving us five because five is the absolute value of negative five,
44:03
I can use a few other functions there is another one
44:06
which is called
44:07
pau at so it says p o w
44:10
and I'm actually not going to use this variable we just as a normal number
44:13
and
44:13
this function is going to allow us to pass it
44:16
to pieces of information so I can give this function
44:19
two pieces of information.
44:20
the first is going to be
44:22
like a number.
44:23
and the second is going to be the power that I want to take that number two so I could say like three
44:29
comma
44:29
two
44:30
and this is basically just going to be
44:32
three
44:33
raised to the power of two,
44:35
so
44:35
it's just going to be three squared so we should get nine down here,
44:39
you can see that we do,
44:40
so I could pass in like
44:41
you know
44:42
some crazy number like
44:43
we could pass in a four
44:45
and we can raise it to the power of six,
44:47
and so we should get like a pretty big number here
44:50
and you can see we get four thousand ninety six so
44:53
this
44:53
power function is really useful for taking numbers to specific
44:56
powers.
44:57
so in addition to using this power function we can also use another function which is called
45:02
max.
45:03
so I can say max.
45:05
and what this is gonna do is it's basically gonna return
45:08
the larger of the two numbers that we pass into it
45:11
so right now I'm giving this
45:12
a four and a six
45:14
and this should tell us which number is higher
45:17
so over here it's just pulling out six because that's the bigger number.
45:20
I cannot see is another function called
45:22
men and this is going to do the opposite so now instead of printing out the max number it's going to print out the smallest number.
45:29
and it's going to turn out for down here as you can see.
45:32
another cool function is called the round function
45:34
and this is going to allow us to round a number so it's just going to follow like standard rounding rules.
45:40
so if I said like three point to inside of here
45:43
now is going around it
45:45
down to just normal three
45:47
but if I said like three point seven.
45:49
it's going to round it up to four so that'll allow you to round a number.
45:54
so there's a few other functions that I want to show you guys but in order to
45:58
get access to them I'm actually going to have to do something called
46:01
importing
46:03
and in python we can actually
46:05
import
46:06
external code
46:08
into our files and so if I want to access these
46:10
specific
46:11
math functions.
46:13
I have to import something called python math
46:15
so I can just say from
46:17
up here math
46:19
import
46:21
and this star and basically what this is gonna do is it's going to
46:24
go out and it's going to grab
46:26
a bunch of different math functions that we can use so
46:29
I already showed you guys a few of the zipper math functions but there's actually a bunch more.
46:34
and in order to access them we're going to need to include this line of code inside of our file.
46:39
so once we have that now I can access a few other so
46:42
is another function which is called the floor method and it's just
46:45
f l o r
46:46
and what this will do is it'll basically just grab
46:48
the
46:49
lowest number so it's essentially just going to chop off this decimal point.
46:53
and you can see over here now
46:55
we get a three because we're using that floor function.
46:58
there's also another one called
46:59
seal.
47:00
and that's just going to do the exact opposite so that's just going around the number up
47:04
no matter what so
47:05
no matter what will always get for
47:07
which we have a three point whatever here
47:10
and there's another one which is called square root so it's just asking you our team
47:15
and essentially this is just going to return the square root of a number so I can say like
47:19
thirty six.
47:20
and now we should get six back.
47:23
so
47:24
those are also very interesting functions and
47:26
inside of this
47:28
math module so we would call this a module and you don't have to worry too much about what that is right now,
47:34
just know that when we put this line of code into our program
47:37
it gives us access to a lot more
47:40
math
47:41
function so though
47:42
it basically allows us to do a lot more things with math
47:45
inside of our program
47:47
and there's a bunch of different math functions
47:49
in python and if you why you can basically just go online and search for different math functions.
47:54
I showed you guys a few here and I would say the ones that we looked at here are
47:59
probably the most commonly used but there's a bunch more.
48:02
and
48:03
like I said you know there's
48:04
tons of documentation on all this stuff so you can just look up
48:07
your math functions in
48:09
python and there's going to be tons and tons like lists of these things
48:13
that you can use inside of your programs to perform different math
48:16
operations,
48:17
but for now that has been a little bit of by using numbers a little bit about doing it on certain math operations and using functions
48:24
with those numbers
48:29
in this tutorial I'm going to show you how to get
48:31
input from the user.
48:33
so we're basically going to allow a user to
48:36
input information into our program.
48:39
and I'm actually going to take the information that the user inputs.
48:42
I'm gonna store it
48:43
inside of a variable and then we're going to be able to do something with
48:47
that variable.
48:49
so I want to show you guys how we can actually go about getting
48:52
input from someone.
48:53
and down here in my python file.
48:56
all I have to do to get input from someone is I just have to type out
48:59
input
49:01
and then an open and closed
49:02
parentheses.
49:03
and what this is basically going to do is it's going to tell python like
49:07
hey we want to get
49:08
input from
49:09
a user in python will
49:10
allow the user to
49:12
type in some information
49:14
and inside of these parentheses we can actually type
49:17
a prompt
49:18
and so generally when we want the user to enter in some information
49:22
we want to tell them what we want them
49:23
to enter.
49:24
and that's what we can put inside of here so I'm just going to say.
49:28
enter your
49:29
name,
49:30
so we're actually going to create a little python app,
49:34
which is going to allow the user to enter in their name
49:37
and then will store the name inside of a variable and then we'll basically just
49:40
say hi to the user so we'll say like high
49:43
and then whatever the name they entered was
49:46
so what I want to do is I actually wanna store
49:49
whatever the user and put it into our program
49:52
inside of a variable.
49:54
so I can actually go over here and I can create a variable I could just call it name
49:59
and I could set this variable
50:01
equal to
50:02
input.
50:03
so what I'm doing now is I'm taking the value that the user inputs
50:08
and I'm
50:09
storing it inside of this
50:10
variable container called
50:12
name
50:13
and so now
50:14
I have access to whatever they entered it.
50:17
so what we can do is we can say
50:19
print
50:21
and inside of the
50:22
parentheses I can just print out
50:24
hello
50:26
and then I'm just going to add on to this
50:28
name
50:29
and actually want to put an exclamation point.
50:32
so essentially we're getting a name from the user.
50:35
restoring it inside of the named variable
50:38
and I'm printing it
50:38
out onto the screen.
50:40
so I'm gonna go ahead and play this ?
50:42
and when we run the program you'll notice down here
50:45
python is giving us this little problem
50:48
so it saying
50:48
enter your name.
50:49
now
50:50
in here I can actually type in of values so I could type in might.
50:54
and then I can just hit enter
50:57
and pythons going to go ahead and store this value inside of that variable
51:01
and then it's going to print out
51:03
hello
51:03
mike.
51:04
and so this is kind of cool and
51:06
actually what we could do is we could
51:08
prompt the user to enter in more than one piece of information.
51:12
so I can actually
51:13
copy this line of code.
51:16
and I'm an
51:16
pasted below here
51:18
and why don't we have the user enter in another variable.
51:21
so we could have them enter in for example their
51:23
age.
51:24
and over here we just want to say enter your
51:26
age.
51:27
so now
51:28
we're able to get two pieces of information from the user.
51:32
and I could say hello name.
51:34
and then I can say
51:35
you are
51:37
and I'll print out their
51:38
age
51:38
so I'm going to print
51:40
age.
51:41
so now I'm basically able to get both of these pieces of information
51:45
from the user I can get their name
51:48
and I can get their age so when we run this program.
51:52
I can type in both of those pieces of information so as they enter your name.
51:56
so
51:56
we could just
51:57
make up a name like john
51:59
and then enter the age that say john is twenty five
52:02
and now is going to say hello john you are twenty five.
52:05
so the program is able to get input from the user and then it's
52:09
able to use that information
52:11
in order to say hi to the user and
52:13
tell them how old they are,
52:15
so
52:15
getting input from the user is a great way to make your programs more interactive and
52:21
here we're just scratching the surface right word just basically getting to know a piece of information from the user but
52:27
you can use these inputs to do
52:29
awesome things in python and as we go through this course.
52:32
you're going to see some
52:33
really cool things that we can do
52:34
with these inputs
52:40
in this tutorial I'm going to show you how to build
52:42
a very basic calculator in python.
52:45
we're basically going to build a calculator where we'll get to numbers from a user,
52:49
and then we'll
52:50
add those numbers together and print the answer out onto the screen.
52:54
so this will give us some practice in getting input from users and we'll also talk about getting
52:58
numbers from users as opposed to just
53:01
strings.
53:02
so I'm really excited to
53:03
get started on this calculator.
53:05
the first thing we want to do is
53:07
create
53:07
two variables and
53:09
inside of those variables we want to store
53:11
the two numbers that the user wants to add together
53:15
so down here,
53:16
I'm just going to say,
53:18
number one,
53:19
and that's what we'll call our first variable
53:21
is
53:21
equal to.
53:22
and now I need to get input from the user so I'm going to say.
53:25
input
53:26
and inside these parentheses
53:28
I'm going to say.
53:28
enter a number,
53:33
and now I basically want to do the same exact
53:36
thing
53:36
but for
53:37
the second number,
53:38
so we'll piece this guy down here,
53:41
and I'm just going to say gnome
53:43
two
53:44
and then we'll just say
53:45
enter another number.
53:47
so now we're able to store the user's input
53:50
inside of these
53:51
two
53:51
variables.
53:52
so now all I want to do is just print out the results so
53:56
I'm actually going to create a variable called result somebody's going to say a result
54:01
is equal to
54:02
and basically we just want to add these two numbers together something as a number one
54:06
plus
54:06
numb
54:07
too.
54:08
and now all we have to do is print out the results I'm just going to print
54:12
result
54:14
so
54:14
we basically have our entire program written out here
54:18
and this will allow us to enter in two numbers and then we'll add them together and print out the answer
54:24
so I could play.
54:26
and down here we can enter our number,
54:29
so I'm gonna enter the first number we'll say five,
54:32
and I'm going to enter my second number so let's say
54:35
eight point zero
54:37
or else a point
54:38
three
54:40
it's now should print out the answer,
54:42
but
54:43
if you look over here.
54:45
that's not quite the answer we were looking for at five plus
54:49
eight point
54:49
three is definitely not fifty eight points three
54:53
and here's what happened
54:55
when we get input from a user
54:57
by default.
54:59
python is just going to convert
55:01
it into a string,
55:02
so it doesn't matter what we put
55:04
down their when we're entering the numbers
55:06
python's always is going to be like.
55:08
ok
55:08
this is a string
55:09
that's it
55:10
sounds good right ?
55:12
it's just going to make it a string
55:14
in order for us to make these number one and number
55:16
two variables numbers,
55:18
we're actually going to have to convert the strings that we get from the user
55:22
into numbers,
55:24
and so
55:24
the way that we can do that is by
55:27
basically just coming over here
55:28
and when we add the two numbers together
55:30
I can use a special python function
55:33
in order to convert those
55:35
strings
55:36
into numbers.
55:38
and there's actually two
55:39
python functions that we could use for this.
55:42
the first is called
55:43
int
55:43
so I could say I auntie.
55:45
I can make an
55:46
open parentheses and I can make a close parentheses
55:49
and basically what this is gonna do is it's going to convert whatever is inside of these
55:54
open or close parentheses
55:55
into an
55:56
integer
55:56
number,
55:57
and an
55:58
integer number is basically a whole number so it's like one two three four or five so it's a,
56:04
it's a whole number another word that can't have a decimal point,
56:08
so what I could do is I could say
56:10
I n t,
56:12
and I could put these
56:13
inside of
56:14
parentheses.
56:15
and now what this is gonna do is it's going to convert both of these numbers into
56:19
integers in other words
56:21
into
56:22
whole numbers that don't have decimals,
56:24
and it's going to add them together and will print out the result so why don't we do that
56:28
we'll just see if this works I'm gonna
56:30
click the play button
56:31
and down here we'll enter our first number sums can enter into four
56:36
and then I'll answer in a five
56:37
and now you can see it's printing out the correct answer four plus
56:41
five
56:42
and so that's essentially our basic calculator.
56:45
but we do have one
56:46
problem with this calculator salmon run it again and I'll show you guys with that problem is
56:50
if I wanted to add in
56:52
a decimal number so we'll add four point three and five point five.
56:58
you'll see that we're getting this error.
57:00
and that's because I'm using this
57:02
ain't
57:03
function of here and this
57:05
int function is looking for a whole number.
57:08
so if
57:08
I put decimal numbers inside of there it's going to break the programs.
57:12
there's another function we can use
57:14
instead of an
57:15
n we can say float
57:17
and a float
57:18
is basically just a number that has decimal so it's a decimal number
57:22
so I can convert both of these guys into floats
57:26
and now I'll be able to use decimal number so I can click play.
57:29
and I can just enter into number so I could say like four
57:33
and I could also say like five point five.
57:36
and now it's going to be able to add
57:38
both of those numbers.
57:39
even if one of them is a decimal
57:41
and that's the beauty of using that little float function so
57:44
in certain circumstances you might want the user to only be able to enter into an integer
57:49
to a whole number.
57:50
but in a lot of cases like in this calculator.
57:53
we want them to be able to answer any number that they want so we're going to use this flow
57:57
function.
57:58
so
57:58
I'm just going to recap what we did one more time we created two variables number one and number two
58:03
and we basically stored the two numbers that the user's implanted into those variables,
58:08
then we converted them into numbers
58:11
and
58:12
weed
58:12
out of them together and we printed out the results so
58:15
this is a pretty cool calculator, i'm happy with it.
58:17
hopefully you guys learned something.
58:19
and as we go forward in this python course you're going to learn all sorts of ways that we can make this calculator more complex
58:30
in this tutorial I wanna show you guys how to build a
58:32
mad libs game in
58:34
python,
58:35
so a mad libs game is basically just a game where you can enter in a bunch of random words so like
58:41
you know
58:42
verbs nouns
58:43
names
58:44
colors
58:45
and
58:46
you basically take all of those words and
58:48
put them into a story randomly so
58:51
over here I had
58:52
my web browser I just have
58:53
an example of a mad libs so you know
58:55
down here were basically just taking random words like an adjective or a noun or a pronoun
59:00
and entering them in
59:02
sort of a story so like you read through the story than like some random word pops up in
59:06
mad libs can be pretty fun and I'm sure
59:08
yeah
59:08
he's heard of mad libs before,
59:10
but if not, now it is a little introduction.
59:12
so I want to create a mad libs in python
59:14
and this is going to be really cool so
59:17
down here I have this, like,
59:18
a little poem which says:
59:20
roses are red \ violets are blue \ I love you.
59:22
and so y'know, this is a compelling classic poem
59:25
but
59:26
I think we should mix it up a little bit and create a mad lib for this poem.
59:31
and so
59:32
instead of having this red colour over here,
59:35
I want to have the user answer in
59:37
their own color
59:38
instead of having violets,
59:40
why don't we have them answer in
59:42
a plural noun.
59:44
and instead of saying "I love you"
59:46
why don't we have them say "I love --" and then some celebrity
59:50
so celebrity.
59:52
so
59:52
this is the basic structure for our little madlib. right; it wants you basically have the user answering a color
59:59
enter in a plural noun.
60:01
an answer in a celebrity,
60:03
and I'll take
60:03
all of those words and
60:05
put them inside of our madlib and hopefully we end up with something that's pretty funny.
60:09
so
60:09
how can we actually go about building this in python well
60:13
the first thing we're going to have to do is we're going to have to be able to get these words from the user right that's pretty obvious.
60:19
so
60:20
I think what we should do as we should create three variables
60:23
called color
60:24
plural noun in celebrity
60:26
and will store
60:27
the user's
60:27
inputs.
60:28
inside of those
60:30
variables.
60:31
so up here let's create those variables
60:33
the first very well I'm going to create is going to be called
60:35
color
60:36
so it's a color.
60:37
and I want to set this
60:38
equal to
60:39
the
60:39
inputs are going to say input
60:41
and inside of here I was going to give them a prompts all say answer a
60:44
color.
60:46
and we can basically just copy this line of code.
60:49
and
60:50
I'm going to paste it down below
60:52
and we'll paste one more time.
60:54
so now we're going to create our plural noun
60:56
very also I'll say peoria
60:59
pluralism now
61:00
and want to say answer a
61:03
plural
61:04
now
61:06
and actually over here I want a meager
61:07
coal as well.
61:09
so then finally we'll create our
61:11
celebrity variables they enter a
61:14
celebrity and
61:17
so now basically we're creating three variables called
61:19
color plural noun in celebrity
61:22
and inside of them were storing the color that the user enters
61:26
the plural noun the user enters and the celebrity these adventures.
61:29
so
61:30
the last thing we have to do is
61:32
replace
61:33
these guys with those variables
61:34
so
61:35
I'm basically just going to add in the colour over here
61:40
and we're going to add in the plural noun
61:42
so
61:43
I can just go like
61:44
this.
61:50
and finally what is adding that celebrity.
61:56
so
61:57
now we have a prequel mallet
61:58
and it should be functional everything should work it looks like it's
62:02
good to go so
62:04
let's come over here and we'll run our program
62:06
and then down here in the council.
62:09
we can play are a little mad libs games so
62:12
they enter a color I'm just going to say.
62:14
magenta
62:15
enter a plural now when we say,
62:19
microwaves
62:21
and enter a celebrity you at say Tom Hanks.
62:25
so
62:25
when I click enter what should happen is we should get our mad libs
62:29
printed out some
62:30
good enter
62:31
and now we have our methods was as roses are magenta
62:34
microwaves are blue
62:36
I love Tom Hanks.
62:37
so it's a pretty good madlib
62:39
and obviously you know,
62:40
the more,
62:41
the more print statements we put over here you know
62:44
the better the madlib could be and we could store as many, y'know, variables up here as we wanted.
62:49
this was just a very simple madlib we only took in
62:52
three inputs but you know you could see how you could take something like this and create a little mad libs game so
62:59
your homework for this lesson is to go off and make your own madlib game hopefully one that's a little bit funnier than mine.
63:05
but that's the basics
63:06
of creating a mad libs game in
63:08
python
63:13
in this tutorial on its artsy guys about working with lists in python.
63:18
a lot of times when you're programming in python you're going to be dealing with large amounts of data,
63:23
and
63:23
when you're dealing with large amounts of data you want to make sure that you can
63:26
manage it and organize it properly,
63:29
and the list is essentially just a structure that we can use inside of python
63:34
to store the lists of information so we can take
63:37
a bunch of different data values we can put them inside a list
63:40
and it allows us to organize them and keep track of them
63:43
a lot
63:44
easier.
63:45
so generally you would create a python less than you would put a bunch of
63:48
related values
63:50
inside of that list and then you can use it throughout your program so
63:53
I'm actually eyes are just the basics of using lists we're going to look at some of the common use cases and
63:58
really just get you up to speed with what lists are and why they're useful so
64:02
over here in my program
64:03
I'm actually going to
64:04
create a list and
64:06
we create a list
64:07
a lot might we create a python
64:09
it's like a normal python variable so
64:12
the first thing we want to do and we're making a list
64:14
is give it
64:14
a name so we want to give it a descriptive name
64:17
something that's going to basically describe what's inside the list
64:21
in my case for
64:22
this example let's make a list
64:24
of like friends so we could say here's a list of all my friends so I can say
64:29
friends
64:30
and I'm going to set this
64:31
equal to
64:32
the list of values
64:34
that represent my friends
64:35
and we want to create a list we can use these
64:38
opening closed square brackets.
64:40
so whenever you use these open and closed
64:42
square brackets python basically nose
64:44
okay they want to store a bunch of values
64:47
inside of this list.
64:49
so why don't we go ahead and start adding some values so we can say like my friends are like
64:55
tavern,
64:56
karen
64:58
and say jim.
65:00
so here I have three values
65:03
inside of my friend's array.
65:06
so when we're creating a normal variable in python generally we just give it one value
65:11
right
65:12
now to create a variable
65:13
I would give it
65:13
one value may be a string or a number or a boolean.
65:17
but when we make lists
65:18
were able to store multiple values
65:21
inside of the same like
65:23
little item inside of the same
65:24
object right
65:26
and then what I can do is I can access these individual items
65:29
inside of my program so
65:31
inside of this friends
65:33
list were basically storing
65:35
all of these different values and that can be really useful so
65:39
now that we've stored some values let's talk about what you can put
65:42
inside of a list so you can really put any piece of
65:45
information in python
65:46
we could put things like
65:47
strings, numbers, or booleans
65:49
so if I wanted instead of just putting strings here I could change like one of these to a number
65:54
and I could change one of these to a boolean
65:56
and wouldn't matter
65:57
python's going to be fine with that.
66:00
let's change it back to strings just
66:02
for the sake of the example so
66:04
now that we've created our list
66:06
how can we access
66:08
individual elements
66:09
inside of this list
66:10
it's a good question.
66:11
I'm going to go ahead and print something out to the screen.
66:13
the first thing we can do is we can just
66:15
print out the actual list so
66:17
I can just say print friends
66:19
and then when I run this program.
66:21
if we look down here in the console you can see it's just
66:24
printing out the actual list of friends right,
66:26
but let's say that I wanted to print
66:28
out a specific
66:29
element inside of this list
66:31
where I can actually refer to elements by their
66:34
index
66:35
so
66:36
each one of the elements inside of this list
66:38
has a particular
66:39
index
66:40
and the index is actually started zero so we would say that this
66:44
first element in the list kevin
66:46
has an index of zero,
66:48
we would say that this
66:49
other element
66:49
karen has an index of one.
66:52
and this
66:52
third element jim would have an index of two.
66:55
so even though
66:56
jim is technically the third element
66:59
inside of the list.
67:00
it has an index of two
67:02
and that's because we start indexing at index position
67:06
one.
67:07
and so that is kind of how this work and that's how list
67:09
indexes work
67:10
so
67:11
if I wanted to
67:12
access a specific element inside of my friends list.
67:15
I can just referred to it by its
67:17
index.
67:18
so over here after which I bought friends I'm just going to tape an
67:21
open and closed square bracket,
67:23
and inside
67:24
this open and close square bracket
67:25
I want to put the
67:26
index
67:27
of the element
67:28
inside the list
67:29
that I want to access
67:30
so fallen to access
67:32
this guy right
67:33
here this element.
67:34
I can just put a zero.
67:35
so I can say friends
67:36
zero.
67:37
and now when I run my program,
67:39
it's just going to print out that value it's just going to pronounce
67:42
cabin,
67:42
if only to access this
67:44
gem value over here I can put a
67:46
two
67:47
and that will give us that
67:48
jim value
67:49
you can see right there,
67:50
so we can access elements
67:52
based off of
67:53
their index
67:54
we can also
67:55
access elements
67:57
based off of their index
67:58
from the back of the list
68:00
so
68:00
for example if I said
68:01
negative one inside of here,
68:03
this is going to give me access to this
68:05
value right here for jim.
68:07
and you can see that's what it does so when we use negatives it starts indexing from the back of the list so if I start at negative two,
68:14
this is going to give us
68:15
karen
68:16
so you can use the negatives to access
68:18
items at the back of the list.
68:19
just keep in mind though and this is kind of an
68:22
interesting
68:24
we said we would say this first element here is index position zero
68:29
right
68:29
but we would say the first element at the back of the list
68:32
is index position
68:33
negative one so
68:34
just keep that in mind.
68:35
so there's actually other ways that we can access like just
68:38
portions of this list so for example,
68:40
let's say I just wanted to select the last two elements in this list and I didn't want us like the first one
68:46
will in here I can just say one
68:48
with a colon,
68:49
and this will grab the element at index position one and
68:52
all of the elements
68:54
after that so now we should describe
68:55
jim and karen
68:58
or carrying gym in that order.
69:00
I could also specify a range.
69:02
so actually let me out in a couple other elements,
69:04
just so that we can illustrate this better.
69:07
so are in two more names.
69:09
so if I wanted to I could select like
69:11
the element and exposition one
69:13
up to the element at index position three so
69:16
it's going to grab
69:17
this one says one,
69:19
two
69:20
and it's actually not going to grab the third one so it's it's going to grab all the elements
69:24
up to but not including three so it'll grab
69:27
karen and
69:28
jim,
69:29
let's go ahead and run this and you can see it grabs canon japan so
69:33
you can either just put like
69:34
one with a colon after it and it'll grab that
69:37
in exposition in everything after it or even specify like
69:40
arrange that you want to grab from.
69:42
so that's how we can access
69:43
elements inside of this list
69:45
but we can also a modify elements
69:47
so for example
69:48
I could come down here.
69:49
let's say I want to modify this value right here karen
69:53
we'll all you have to do is just access that elements I could say
69:57
friends
69:58
and
69:58
karen is that at position of one
70:01
and I could change this to whatever I want so I could say friends
70:03
in that position one is equal to
70:05
mike ?
70:06
and now
70:07
when we print out friends
70:08
and at position one
70:10
that value is going to be updated so it's just going to say
70:13
mike instead of saying
70:14
karen
70:15
so it can be really useful to modify values inside of
70:19
arrays
70:19
so it can be really useful to modify values inside of python lists.
70:23
so those are kind of the basics of working with lists
70:25
in python and actually in the next tutorial monastery guys
70:28
even more ways
70:30
that we can use these less we're going to learn how to link
70:32
add elements to a less delete elements from a less
70:35
copy lists and a bunch of cool stuff
70:38
with
70:38
these lists but for now this has just been sort of like
70:41
the basics of working with lists
70:47
in this tutorial I wanna talk to you guys about using
70:50
functions with lists
70:52
in python,
70:53
and python
70:54
a list is one of the most important structures where we can store our information.
70:59
a list basically allows you to take a bunch of different values and organize them and store them
71:03
inside of their own little list
71:05
structure
71:06
so down here my program you can see I have
71:09
two less I have a list of lucky numbers.
71:12
and this is just a bunch of different numbers,
71:14
and then I have a list of friends
71:15
so this could be like a list of somebody's friends
71:18
and it's basically just a bunch of strings with names in them.
71:21
so these two lists
71:22
are storing a bunch of different values and
71:25
what makes this awesome is
71:27
not only can I store like this many values I mean
71:29
I could store
71:30
hundreds or thousands or millions of values.
71:33
and when you're working with a lot of data and a lot of information and python bees lists are
71:37
invaluable.
71:38
so because lists are so important there's actually a bunch of different functions that we can use with lists
71:45
and those functions allow us to do things like modify the lists
71:48
and get information about the list so
71:51
in this tutorial
71:52
I just want to show you a bunch of those
71:54
functions we're going to talk about some of the most common and the most popular functions
71:58
that you would use on lists
71:59
to make them more powerful and make them more easy to use.
72:03
so
72:03
the first thing we can do is obviously just print
72:06
out a list so down here I'm printing out this
72:09
friends list
72:10
when a warm
72:10
and when I run my program,
72:13
you see down here we're just
72:14
printing out all the elements in the list so
72:16
it's always good to be able to print
72:17
out
72:18
all the elements inside of a list,
72:20
but there's a lot of other functions that we can use so
72:22
one function is called the extend function in the extend function will basically allow you to take a list
72:29
and
72:29
append another list onto the end of it so I could say like
72:33
friends
72:34
dot
72:34
extend
72:36
and inside of these parentheses
72:37
I can pass in the list
72:39
that I wanted to add onto the friends list.
72:41
so I could say like
72:43
lucky
72:44
numbers.
72:45
and now when I print out this friends list.
72:47
not only is it going to have all the elements in the friends list
72:50
it's also going to have all the elements inside the lucky numbers list
72:53
you can see down here we have all our friends,
72:56
and we also have
72:57
the numbers overhears that's a really easy way to essentially just like
73:00
add two lists together.
73:02
we can also just add
73:04
individual elements onto a list
73:06
so
73:07
I come down here and I could say friends
73:09
dot
73:10
append
73:11
and this will actually allow me to append another item
73:15
onto the end of this list,
73:16
so over here I could just add another name so we could say
73:20
creed for example and now I'm like adding another friend onto the end of this list
73:24
so when I run the program.
73:26
in addition to having
73:28
the original items that were in the list up here.
73:31
we also have this additional item at the end
73:33
and not a pen function is always going to add the item onto the end of the list,
73:38
but let's say that you wanted to add an item into the middle of the list so like right here right here,
73:43
there's another list function
73:45
called insert
73:47
and insert is going to take
73:49
two parameters the first parameter is going to be the
73:52
index where you want to insert the item so
73:54
why don't we insert it here at index position one.
73:58
I'm just going to say one
73:59
and then I'm going to type in the name of the element that I want to add so
74:03
we can just say like
74:04
kelly,
74:05
and now at index position one we're going to have
74:08
the volume kelly
74:09
and all of these other values are going to get pushed
74:12
up
74:12
they're going to
74:13
get pushed to the right
74:15
one index position so
74:16
now I run the program,
74:18
you can see we have kavin
74:20
this new element
74:20
kelly
74:21
and then all the other elements have been pushed off to the right,
74:24
we can also remove elements
74:26
so for example
74:27
let's say I wanted to remove this
74:29
jim value.
74:30
all I have to do is just a friend's dot remove.
74:34
and
74:34
I can just typing
74:35
whatever element I want to remove so
74:38
I want to remove
74:38
this jim element
74:40
is a now when we run the program
74:42
jim
74:42
is going to be gone from the list and we just have these
74:45
four guys left.
74:47
you can also remove
74:48
all of the elements
74:49
from the list so if I just wanted to
74:51
completely like
74:52
reset the less than get rid of
74:54
everything I could just say friends thought clear.
74:56
and this is going to
74:57
give us an empty list so get rid of
75:00
every single element inside the list.
75:02
there's also another really cool
75:04
nothing which is called
75:05
pop
75:05
and you can just take out pop like that
75:08
and basically what pops is gonna do is it's going to
75:10
pop an
75:10
item
75:11
off of this list so
75:13
when I click the play button,
75:14
you'll see here that
75:15
we're left with
75:16
kevin
75:17
karen
75:18
jim and oscar so
75:20
we basically got rid of the last element inside the list and that's what pop does
75:24
it pops an element
75:25
off of the lists of easily removes the last element in the list.
75:29
so we have our list
75:30
but let's say that we wanted to figure out
75:32
if
75:33
a certain element was in this list
75:35
right if a certain value is in here so let's say
75:37
I wanted to check to see if
75:39
my friend
75:40
kevin was in this list.
75:42
why could say friends
75:43
dot
75:44
index
75:45
and in here
75:46
I can just pass
75:47
a value so I can say like
75:50
kevin.
75:51
and this is going to tell me the index
75:53
of
75:54
caverns are the tell me if
75:55
cabins in the list,
75:56
so I could play
75:58
you can see down here it says
75:59
zero
76:00
if I was to say like
76:01
oscar and here for example
76:03
now would give me the index
76:04
of
76:05
oscar.
76:06
so that's it three
76:07
but if I put a name that wasn't in here so like
76:10
if I put mike
76:12
doth not in the list.
76:13
and so now we're going to get back
76:15
an error
76:15
because it's as
76:16
mike is not in the list
76:18
so that's an easy ways you figure out if a specific element inside of the list.
76:22
and if it is,
76:23
then you know what index its app,
76:25
you can also count the number of similar elements in the list so
76:29
I'm actually going to come down here copy this
76:31
gem element
76:33
and will add another
76:34
jim element into here
76:36
so I could come down here and I could say friends
76:38
dot
76:38
count
76:40
and
76:41
will pass in
76:42
jim
76:43
and this will tell me how many times the value
76:45
jim
76:45
shows up
76:46
inside of this
76:47
list.
76:48
so it should say to which it does down there because
76:51
we have two
76:52
values with
76:53
the
76:54
text
76:55
jim
76:55
and so we have all these values we could also sort this list so
76:59
I could come over here and I could say
77:01
friends.sort()
77:03
and what this will do is it'll sort the list
77:06
in
77:06
ascending order so
77:08
we have a bunch of
77:09
text here and you'll see what it does.
77:11
basically what it's going to do is it's gonna put it in alphabetical order are so
77:15
you see we have j k
77:16
o and t so
77:18
the list went from being just random order like whatever we have up here to now it's in alphabetical order.
77:23
and that's also going to work for lucky numbers so I could say late
77:28
lucky numbers
77:29
dot
77:30
sort and then we'll turn out lucky numbers
77:33
and they should now be in ascending order,
77:37
which I'm realizing they already are up here but if I
77:39
was to take this forty two and
77:42
put it down here.
77:45
now it will figure everything out and put it in ascending order anyway.
77:48
we can also reverse
77:49
a list
77:50
so if I wanted I could reverse this not
77:52
lucky numbers list I could say
77:54
lucky numbers dot
77:55
reverse.
77:56
and now when we printed out instead of being forty to eight fifteen sixteen twenty three.
78:00
it's going to be twenty three sixteen fifteen eight forty two,
78:04
so it's basically just reverse the order of
78:06
the list.
78:07
and finally there's one more
78:09
or
78:09
less functional monetary eyes which is copy.
78:12
so
78:12
I can actually create
78:14
another list.
78:15
and I could
78:16
make it as a copy so I could say like
78:19
friends 2.
78:21
and we could set this equal to
78:22
friends
78:23
dot
78:24
copy
78:25
and now friends
78:26
too is going to have all the same
78:28
attributes as friends,
78:30
because it's basically just like
78:32
copy it basically took a copy of that friends list
78:35
so
78:36
you can see it's the same exact thing and
78:37
copying lists can come in handy in a lot of different situation so
78:41
those are just some basic list functions and just to kind of like
78:45
you know get your feet wet in working with lists
78:47
obviously like the more you work with them the more you practice using these different functions the more comfortable you're going to
78:52
get.
78:53
but that's just kind of like a basic overview of what you can do
79:00
in a sartorial
79:01
talk to you guys bought tuples in
79:04
python.
79:05
now a tupel is a type
79:07
of
79:07
data structure
79:08
which basically means it's a container
79:11
where we can store
79:12
different values.
79:14
now if you're familiar with lists
79:16
in python
79:17
a tupel is actually very similar to a list.
79:20
it's basically a structure where we can store
79:22
multiple pieces of
79:24
information,
79:25
but
79:25
a tupel has a few key differences from lists
79:29
that we're going to talk about
79:30
in
79:31
this tutorial.
79:32
first thing I want to do is I want to show you though how to
79:34
create a tupel.
79:36
so I can come down here and I can create a tupel
79:39
and one of the most
79:40
common
79:41
examples of tupels his coordinates.
79:44
so let's say I had a series of like x y coordinates I could create a variable
79:49
called coordinates
79:50
and I'm gonna set this
79:51
equal to
79:52
an
79:52
open and close parentheses,
79:55
and whenever we want to create a tupel inside of
79:57
python we're going to use these
79:59
open closed parentheses
80:01
and
80:01
inside of here inside these proceeds we're gonna put the values that we want to store
80:06
so I could for example put a list
80:08
of
80:09
numbers,
80:10
so
80:10
this could be like my coordinates I could have like four and five.
80:14
so this would be my tuple with coordinates
80:17
inside of it.
80:19
and one of the things about tuples that makes them unique
80:21
is a tuple is
80:23
immutable,
80:24
and you'll hear that word a lot when we're talking about tuples
80:26
immutable it basically means that
80:29
the tuple can't be changed or modified.
80:31
once we create our tuple up here.
80:34
you cannot modify it
80:35
cannot change it you can't
80:37
add elements to it you can't
80:39
erase elements from it you can't
80:41
change any of the elements inside the tuple.
80:43
what you see is what you get once you create the tuple its
80:47
it does it as it can't change
80:48
so I can come down here and I can
80:51
print out
80:52
some of the
80:54
attributes inside the tuple.
80:56
and the way I can access them
80:57
is
80:58
just by using an
80:59
open and closed square bracket.
81:01
and in here I can pass in
81:03
a
81:04
index
81:05
so troubles are indexed
81:06
starting at zero so technically we would say that four
81:09
is at index position one
81:11
and for --
81:12
sorry
81:13
it is in position zero
81:15
and five of them
81:16
is at index position one, so if I said
81:18
coordinate zero
81:19
now it should print out four
81:23
and down here we're printing out four.
81:25
so if I wanted to print out that five we can just put a one inside of those square brackets
81:30
and now we'll print out that five so I can access
81:33
the elements
81:34
inside of
81:35
a tuple I can
81:36
easily access is at
81:37
each
81:37
entry.
81:38
but
81:39
if I was to come over here and try to change
81:42
one of the elements so if I said coordinates
81:45
and
81:45
coordinate one and I tried to set it equal to something else like
81:49
ten
81:50
python's actually going to give us an
81:52
error when we run this programs often run the program.
81:55
you see we get this error it says
81:57
type
81:58
air
81:58
tuple object
81:59
does not support
82:01
item
82:01
assignment
82:02
because it's immutable
82:04
because we can't change it so
82:07
that's basically what tuples are
82:09
how we can create them
82:10
and
82:11
you know a couple like I said it's very simple you just created and then you have,
82:15
um.
82:15
and now I want to talk to you guys about a common topic in python which is the difference between
82:21
tuples
82:21
and lists.
82:23
so
82:23
remember a list is basically doing the same thing
82:26
a list.
82:27
if one is to create a less we would just use square brackets instead of those parentheses.
82:31
and if I was using a list
82:32
I could
82:33
assign different values to it I could,
82:35
I could basically
82:37
mutate any of the elements I could add delete
82:40
modify change whatever I wanted with the list,
82:43
but with a tuple.
82:44
we can't do that and that's
82:46
sort of the basic difference and
82:48
really python
82:49
doesn't say anything more than that it basically just says like one of them's immutable one of them's not
82:54
but
82:55
in practical use cases generally people will use tuples for data that's never going to change
83:02
so you'll steal stored dna inside of a tuple
83:05
when that data doesn't need to be
83:07
mutated that's why something like coordinates
83:09
is such a good candidate for a couple because
83:12
once you have coordinates like
83:13
we're probably not going to modify them right,
83:16
we might add
83:17
other coordinates.
83:18
so for example if I wanted I could create a list of tunnels.
83:21
so I can say like
83:22
four five
83:24
six seven,
83:26
maybe we have some other coordinates like
83:28
eighty
83:29
thirty four.
83:31
so here I have in uh
83:32
I have a list
83:33
and inside of it we have these
83:35
tunnels.
83:36
but remember these topples can't be modified the values can't be changed so
83:41
really it's just a case by case basis
83:43
I would say
83:44
by a huge majority.
83:46
you're going to be using lists most of the time.
83:48
topples or more of a niche
83:51
you know
83:51
they're using more special situations.
83:54
but
83:54
there are plenty of situations where you want to use tuples so if you're in a situation where you want to store data that can't be changed or mutated
84:02
then tuples are the way to go
84:04
to <...> some basics about tuples some basics about the difference between
84:08
lists and tuples
84:09
and so a tuple is a great thing to add in c or
84:12
python
84:13
repertoire
84:18
in this tutorial I wanna talk to you guys are by using
84:21
functions in python.
84:23
a function is basically just
84:25
a collection of code,
84:27
which performs a specific task
84:29
so I can take
84:30
a bunch of lines of code that are basically doing one thing
84:34
I could put them inside of a function.
84:35
and then when I wanted to
84:37
do that task or do that one thing that the function was doing,
84:41
I can just call the function
84:44
and so functions really help you to organize your code a lot better they allow you to kind of
84:48
break up your code into different
84:50
you know little chunks that are doing different things and
84:53
they're really just awesome so functions are like a very core
84:56
concept when we're talking about programming in python,
85:00
so i'll show how to create an awesome
85:02
function today
85:04
let's say for the purposes of this tutorial we want to create a function
85:07
that says "hi" to the user so
85:10
the one task that our function performs as basically just saying hi to
85:14
whoever is writing the program so
85:16
over here,
85:18
if I want to write a function the first thing I have to use
85:20
is a keyword in python it's called "def" of
85:24
d e f
85:25
and
85:26
basically when
85:27
python sees this keyword it's going to say
85:29
okay
85:30
this person wants to use a function.
85:33
so after we type out "def"
85:35
we need to give this function
85:37
a name,
85:38
so just like when we
85:39
are
85:40
creating variables we give them descriptive names.
85:43
we also want to do the same thing with functions.
85:47
so if I'm creating a function I can just give it a specific name which basically says like what it's doing so
85:52
we're going to create a function that says hi so I'm just gonna
85:55
call this function,
85:57
say hi,
85:58
just like that.
85:59
and
86:00
once we type out the name of the function
86:02
and so also I could type out say high with no
86:05
underscore or I could type out say high with an underscore.
86:09
both are considered like
86:10
good practices and python and a lot of times
86:13
if you just have a simple like
86:14
two word function like this
86:16
you don't need to put an underscore but we can put an underscore there
86:19
if we wanted.
86:20
after we type out the name of the function
86:22
I'm just going to type into open and closed parentheses.
86:25
and
86:25
then I'm going to type
86:26
a colon
86:27
and basically what this is doing is it saying to python lake
86:31
or eye
86:31
all the code that comes after this line
86:34
is going to be
86:35
inside of our function.
86:37
and in order to
86:39
write code that's going to end up being inside the function we actually have to
86:43
indent it sold
86:45
over here.
86:46
you'll notice that when I clicked enter my
86:48
text editor automatically
86:50
indented attacks so it's automatically like
86:53
using this indent here
86:55
and that
86:55
having one of the rules and python is like
86:58
the code that goes inside of this function
87:01
needs to be indented.
87:02
so if I was to write some code
87:04
like out here,
87:05
this is no longer going to be considered inside the function so you can see
87:09
as I type out code and obviously this isn't
87:11
real code but
87:12
as I type text over here that's
87:14
invented
87:15
this little like marker over here
87:18
is basically saying like
87:19
oh yeah
87:19
that's inside the function.
87:21
but then when I write code
87:22
over here that is like
87:24
not at the same
87:25
indentation level as this stuff.
87:27
it's no longer considering it inside the function so
87:30
that is a little thing any code inside this function needs to be indented
87:35
right so our function is just going to say hi to the user so I'm going to have it
87:39
print out
87:42
some text it's going to say
87:43
hello.
87:44
user.
87:45
so this is a very simple function obviously we just have one line of code and
87:49
inside of a function you could have
87:51
you know as many lines of code as you want but
87:53
for our purposes we only need one line in order to perform our function.
87:57
so
87:58
now all we have to do is
87:59
call this function so
88:01
if I want to execute the code inside of this function I have to do something
88:05
called
88:06
calling it so
88:07
if I was to just run my program as it is right now,
88:10
I'm just gonna run it,
88:12
you'll see that nothing happens over here
88:14
right ?
88:15
even though this function is
88:16
printing out hello user when I run the program
88:19
it's not doing it,
88:21
and that's because of the code inside of a function
88:23
isn't going to get executed
88:24
by default.
88:26
the code inside of a function is only going to get executed when we specify that we want to execute it.
88:32
and in order to do that we're going to have to do something called calling the function so in order to call a function,
88:37
you basically just type out the functions name and those open a close parentheses.
88:41
so I'm just gonna type out
88:43
say hi
88:44
and
88:44
opening close parentheses.
88:46
and
88:46
now when we are,
88:48
when we run this program again,
88:50
you'll see that
88:51
it prints out
88:51
hello user so were executing the code
88:54
inside of the function.
88:56
and I want to show you guys just one more thing here
88:58
just talking to you guys about how these functions actively work so
89:02
up here I'm going to print top
89:04
and then down here
89:05
I'm going to print
89:07
bottom.
89:08
so I wanna show you guys the flow of
89:10
these functions inside the program so when I
89:12
run this program
89:14
you'll see
89:15
we print out top
89:17
hello user
89:18
and then bada.
89:19
so essentially what's happening is
89:21
when python goes through and
89:22
executes this
89:24
program,
89:25
it goes over here to this first line it says
89:27
ok
89:28
we want to print out the word top
89:30
and then it goes down here and it says
89:32
ok we want to execute the say high function
89:35
so python actually jumps
89:37
up
89:37
and it goes over this say high function,
89:40
and it's going to execute
89:41
all of the code
89:42
inside of this function so
89:45
it's going to go through execute all this code.
89:47
and then once it's done executing all the code and the function,
89:50
it's going to jump back
89:51
down here and it's going to move onto the next line which is bottom so that's how like the flow of functions,
89:57
again with functions generally when we're
89:59
naming these functions
90:01
and
90:02
you want them to be named
90:03
in all lower case,
90:05
and
90:05
usually when we're naming stuff in python
90:07
if there's two or more words we're going to use an
90:10
under space
90:11
or an underscore in between them.
90:13
so I can write this out as say under score high.
90:16
but
90:17
in a lot of situations though if I have a function like this where the name is really short
90:21
and might just be easier to leave it
90:23
without an underscore but
90:24
why we've spent on scoring now just to be a
90:27
super python official.
90:29
all right so now
90:30
we can actually make these functions a little bit more powerful and what we can do is we can give them information.
90:37
so a lot of times when we write a function we're going to want to have additional information that gets
90:42
passed in.
90:43
and these are called parameters
90:45
so a parameter is a piece of information
90:48
that we give to
90:50
the function,
90:51
so
90:52
over here I can actually specify that this function needs to receive some parameters so I can basically say like
90:58
hey if you're gonna call this function,
91:00
you need to give us some information,
91:02
you need to give us some parameters
91:04
and all I have to do to do that has just type out the name of the parameter that I want to receive so why don't we allow the
91:12
code calling this function to tell it what name to say hi to
91:15
up here I can just say name
91:18
and basically what this means is it means whenever I call this say high function
91:22
we have to give it a name.
91:24
so down here if I was to call this
91:26
I have to include a name in here so I can say like
91:30
mike.
91:30
and what we can do now is we can actually access this parameter or this variable
91:36
inside of our
91:37
function so I could come over here and instead of saying hello user.
91:41
I could say hello
91:42
name
91:43
and basically what this is gonna do is it's just going to say hello to whatever name got passed in here
91:49
so I'm actually gonna copy this
91:51
and
91:51
we will
91:53
do this twice also hello my kilo
91:55
steve
91:57
and now when I run this program
91:59
you'll see that
92:01
instead of just saying
92:02
hello user
92:03
it saying hello to whichever name
92:05
I passed in to the function.
92:07
so that's why this can be really useful right we can
92:10
give the function information
92:12
and depending on the information we give it
92:13
it'll performance task
92:15
a little bit differently.
92:16
I could also
92:18
include more than one parameter so you can I mean
92:20
technically you could have as many parameters as you want
92:23
so I can put another one in here would say
92:24
age.
92:25
and now I'm going to have to pass in an
92:27
age
92:27
along with these,
92:29
so I'm just going to pass in
92:30
age
92:31
and
92:32
passing an age for down here,
92:35
and I'm just going to pass in
92:36
strings,
92:39
so we can say hello name
92:43
you are
92:45
age
92:46
so I'm passing in two pieces of information.
92:49
now when we run this program is going to call the function,
92:52
and it's going to use both of those pieces of information so it's a healthy
92:55
like you are thirty five hello steve you are seventy.
92:59
so
92:59
essentially you
93:00
were writing out this one line of code which just prints out like hello to someone
93:06
and were allowing this function to receive
93:08
two parameter so the name in the age
93:11
and depending on the name in the age,
93:13
the function is going to print out
93:15
hello a little bit
93:16
differently.
93:17
that's kind of the beauty of using function so
93:20
you could pass anything you want into a function so for example,
93:23
I could pass in a
93:25
integer.
93:25
instead of a string for the age.
93:28
so like I could pass in a number.
93:30
the only differences over here we're going to have to
93:32
convert this into a string,
93:34
but it's going to work.
93:35
just the same,
93:37
so you can pass in alm
93:39
strings
93:40
numbers bullion's
93:41
arrays you can really pass
93:43
any type of data
93:45
into a
93:46
function and it's going to work
93:47
so
93:48
you can see here we get the same result.
93:50
so that's the basics of functions and as you go through on
93:53
with python you're gonna you know
93:54
being functions more and more,
93:56
and generally it's a good idea to break your code up into different functions so whenever you have like a grouping of code
94:03
that's
94:04
designed to perform a specific task.
94:06
that's usually a good candidate to be put inside of a function
94:14
in this tutorial I wanna talk to you guys about using the return statement in python,
94:19
functions
94:20
and other python function is basically just
94:22
a collection
94:23
of python code that performs a specific task.
94:27
and when we want to perform that task in our python programs we can call
94:32
a python function
94:33
and a lot of times when we're calling a python function we just gonna call it and it does its thing and then we move on with the program.
94:40
but sometimes when we call a function we're actually going to want to get
94:44
information
94:45
back
94:46
from that function.
94:47
so when I call the function I want to basically
94:50
executes task I wanted to execute all the code
94:53
and then I wanted to like
94:54
give me some information back
94:55
so that can be like a particular value.
94:58
it could be something like telling me how the task went
95:01
basically
95:01
the
95:02
function can just communicate back to us like hey,
95:04
here's some information.
95:06
and that's what the return keyword can allow us to do
95:09
the return keyword can basically allow
95:11
python two return information from
95:14
a function.
95:15
so I'm gonna show you guys how we can
95:17
do this I want to create a very simple function.
95:20
and it's just going to
95:22
cube a number so when we cuba number we take it to the power of three so if I was going to cuba like to
95:28
be like
95:29
two raised to the power of three
95:31
right it's just
95:32
pretty basic math.
95:34
so we're gonna make a function that will cuban number
95:36
and I'll show you guys how we can use that return statement
95:39
so
95:40
first thing we want to do is make a function.
95:42
I'm just going to say
95:43
death
95:44
q,
95:44
we'll call the country
95:45
the function cube.
95:47
and
95:47
over here we can specify any parameters that this function will take.
95:52
so basically any values that we want to give this function so we're going to give it one function which is just going to be
95:58
a number so I'm just going to call it numb.
96:00
and then over here I'm going to
96:02
type out a
96:03
colon
96:04
and then down here,
96:05
we can put any of the code
96:07
that we want to be included in this function.
96:10
so basically this function is just going to keep this number so we could just
96:14
take out numb
96:15
times numb
96:17
times numb
96:18
right
96:19
that's going to give us
96:20
numb cubed.
96:21
so
96:22
that's all well and good.
96:23
and if I come down here I can
96:25
execute this function so I can basically just call it as a cube.
96:29
and why don't we pass it a three.
96:31
so I'm going to go ahead and pass it to three
96:33
and I'm going to save this.
96:36
and
96:36
now let's go ahead and run
96:38
this code,
96:40
so we're on the code
96:41
and
96:43
you'll see down here.
96:45
nothing happened
96:46
right so nothing got printed out
96:48
in our program
96:49
facts
96:50
when we call this cube function
96:52
it didn't really do anything,
96:54
so
96:54
let me try to print this out so immediately prentice
96:57
function out it'll give us back the information that we want so
97:01
what about print
97:02
and will print
97:03
out the value of the function I'm terrific play
97:06
we look down here it says none.
97:09
so when I printed out
97:10
the value of this function it told me none
97:14
but really this function is supposed to be q being the number.
97:17
and
97:18
here's how we can use the return statement and python
97:20
I can come over here and I can just say
97:22
return
97:23
and now
97:24
python is going to return whatever value we put over here to the right.
97:29
so when I call this cube function and I give it a three
97:33
python's going to go off it's going to execute this function
97:36
when it sees this return statement
97:38
it's going to say
97:38
okay,
97:39
I want to give a value back to whatever call of this function.
97:43
and it's going to return
97:45
this value.
97:46
now when I print out
97:48
cube
97:48
three
97:49
it should print out the answer because we get an answer back so
97:53
when I play this
97:54
you'll see
97:55
down here,
97:56
says
97:57
twenty seven so we got the correct answer.
97:59
so I can do this with anything wantonly cube like for something
98:04
as an hour on this
98:05
and you can see we're constantly getting the correct answer back
98:09
so
98:09
that's the basics of using this return statement it allows us to return a value back to
98:15
the caller in other words
98:16
back to whatever's calling the function.
98:18
so I just wanna illustrate this point a little bit further I'm going to go up here I'm actually going to create a variable
98:24
so I'm gonna create a variable called result
98:26
and I'm just going to set it
98:27
equal to
98:28
cube
98:29
for
98:30
this variable result is going to store
98:33
the value
98:34
that gets returned
98:36
from the cube function since
98:38
it's not in a store like
98:39
cube for its going to store the value that gets returned from executing that function.
98:44
so now if I came down here and printed out result.
98:47
it's actually just going to turn out sixty four again because
98:50
that's the value that it's storing
98:52
so this return statement can be really useful for like
98:54
getting information back from a function,
98:57
we can use
98:57
something like a parameter.
98:59
I guess for as a parameter.
99:01
we can give information to a function
99:03
and then we can use the return statement to get information
99:07
back from a function.
99:09
and I do I just want to point out one more thing
99:11
I'm actually not able to put any code.
99:14
after this return statements so if I came down here and try to put like a prince statement.
99:19
this actually isn't going to work so
99:21
this is never going to get printed out so if I just typed out like
99:24
code right here
99:26
when we run this program.
99:28
it's not going to type out
99:30
code
99:31
does because when I used this return keyword,
99:34
it breaks us out of the function so
99:36
python's going to go through it's going to execute the code
99:39
in the function whenever it sees this return keyword.
99:42
it's just going to break back out and we're going to be done so we'll never be able to reach
99:47
this line of code.
99:48
so that's the basics of using return statements and you can return
99:52
any data type you want
99:54
we could easily return like a string or boolean or an array.
99:58
it doesn't really matter you can return whatever you want.
100:01
and a lot of times in a lot of situations you're going to want to get a value back from
100:05
a function
100:09
in this tutorial I wanna talk to you guys about using
100:12
if statements in python.
100:14
now
100:14
if statements are a special structure in python
100:18
where we can actually help our programs to
100:20
make
100:21
decisions.
100:22
so by using an if statement
100:23
I could execute certain code when
100:26
certain conditions are true,
100:27
and I could execute
100:28
other code when
100:29
other conditions are true.
100:31
so basically if statements allow our programs to respond
100:35
to the
100:36
input that they are given so
100:37
depending on the data that we're using in the program
100:41
are programs will be able to respond so when certain data is certain values we can do certain things
100:47
and when other data is,
100:48
other values
100:49
you can do other things so
100:50
you know
100:50
your programs are essentially
100:52
becoming a lot smarter
100:54
and actually if statements
100:55
are things that we as human beings deal with every day so
100:59
you know as you go throughout your day generally you're dealing with if statements all the time so I want to kind of
101:05
give you guys a brief introduction into if statements and we'll talk about some of the common if statements that you'd see in everyday life.
101:11
and now we'll go ahead and do a really awesome example of the kind of like
101:14
sure yeah
101:15
what if statements can do for us.
101:17
so
101:18
over here in my text editor I just have this little text file
101:21
and in here I wrote out a bunch of
101:23
if statements
101:24
that
101:24
a lot of people will encounter on a daily basis so here's the first one it says I wake up
101:30
if I'm hungry.
101:32
I eat breakfast.
101:34
so let's break this down a little bit up here it says
101:36
if I'm hungry.
101:38
and this is a condition.
101:39
right
101:40
this is either going to be true
101:42
or it's going to be false,
101:43
right
101:44
if it's true,
101:45
I'm going to go ahead and
101:47
eat breakfast right
101:48
if it's false
101:50
under skin to skip whatever was in here and move on,
101:53
writes that
101:54
the basics of an if statement.
101:55
we have a condition
101:57
in this case
101:58
if I'm hungry.
101:59
if the condition is true,
102:00
then we do the action so
102:02
we eat breakfast.
102:03
otherwise we just skip it.
102:06
so down here we have another one.
102:07
it says
102:08
I leave my house.
102:10
if it's cloudy.
102:12
I bring an umbrella.
102:13
otherwise
102:14
I bring
102:15
sunglasses.
102:16
and so this one is a little bit more complex than the one we just looked at you'll see we have our condition right says
102:21
if it's cloudy.
102:23
if that conditions true
102:24
we're going to bring the umbrella.
102:26
but
102:27
in this case if the conditions false
102:29
there is something else that we want to do
102:32
so in the case of here if this condition was false we just moved on.
102:36
but now if this conditions false
102:38
then we're gonna go ahead and bring
102:39
sunglasses
102:40
so
102:41
that's another example of an if statement it's a little bit more complex.
102:45
finally I have one more down here and this one's even more complex it says I'm at a restaurant.
102:50
if I want me.
102:51
I order a steak.
102:52
so if this conditions true
102:54
we order the steak,
102:56
but if this condition is false,
102:58
then we're going to move on and we're actually going to check
103:00
another condition.
103:02
so I'm gonna say
103:02
otherwise
103:03
if I want pasta.
103:05
I order spaghetti and meatballs.
103:07
this is another condition.
103:09
if this condition is true we get the spaghetti,
103:12
if it's not true
103:13
then finally we're going to move on down here
103:16
and which is default to ordering the salad so
103:19
all three of these if statements are
103:21
valid if statements
103:22
it's just
103:23
they get more and more complex as we go down the list
103:26
so
103:27
hopefully that's
103:28
you know
103:28
kind of wrap your head around what if statements are we're basically specifying conditions.
103:33
if those conditions are true we're going to do certain things
103:36
and those conditions are false we can do
103:38
other things.
103:38
or
103:39
we can check
103:39
other conditions
103:41
aren't so let's head over to our python file and we'll start writing some actual python.
103:46
so in here in my app dot python file.
103:49
I want to create an
103:50
if statement
103:51
and I'm going to show you guys a very basic if statement in this tutorial.
103:54
and then in the next victoria we're going to look at some more advanced
103:57
if statements.
103:58
so what I want to do is create
104:00
a bully invariable.
104:03
so I'm gonna create a boolean variable that's going to store whether or not the user is a male.
104:07
so it's just going to be called
104:09
is underscored mail
104:11
and I'm gonna set this equal to true
104:13
because I'm a male.
104:15
so we have this boolean variable right and right now we haven't set equal to true.
104:21
I can actually use an
104:22
if statement to check to see what the value of this variable is and if it's true I can do something so
104:29
if I want to use an if statement all I have to do is just type up
104:32
if.
104:33
and then
104:34
I just need to type out
104:35
a condition.
104:36
so
104:37
basically I would have to type out like
104:39
something that's going to be true or false
104:42
like
104:42
for example in
104:43
the other page we are specifying like
104:46
if I'm hungry or if it's cloudy.
104:48
here we're just going to check to see
104:50
if
104:51
is male.
104:52
so in other words
104:53
if the person is male.
104:55
so remember this has to be a
104:57
lake
104:57
it has to be able to be reducible to a true or false value.
105:01
so in our case
105:02
where it is using a boolean because that's like
105:04
the easiest thing we can do.
105:06
so
105:06
I said
105:07
if
105:07
I specify my
105:09
true or false condition.
105:11
now I'm just type a colon.
105:13
and
105:14
what I want to do now is make a new line.
105:16
and so
105:17
anything that I put below this with an indentation
105:21
is actually going to be
105:23
executed when that conditions true so I could put
105:26
print
105:27
and down here I can just put
105:29
you are a male.
105:32
and now you'll see what happens when I run this program.
105:35
it's going to go down here and it's going to say you are a male.
105:39
but if I changed his mail to false
105:41
so instead of this being true I'd just change it to false.
105:44
now all of a sudden it's not going to
105:46
print anything.
105:47
so it's just going to be blank down here.
105:50
that's because this condition wasn't
105:52
true.
105:53
so anything that I put below this
105:56
if declaration and
105:57
that has an indentation like that
106:00
is going to be executed when the if statement
106:02
is true.
106:03
we can also use another keyword in
106:06
python which is called
106:07
else
106:08
and alice is basically going to be like
106:10
otherwise so you remember,
106:12
before we said
106:13
if it's cloudy.
106:14
I'll bring an umbrella,
106:16
otherwise
106:17
I'll bring sunglasses well this is going to be like our otherwise
106:20
so I can say down here.
106:22
else
106:23
and now
106:24
anything that I've put below else
106:26
is going to get printed out when
106:27
that condition
106:28
isn't sure
106:28
so long we just put
106:30
you are not a male.
106:32
so now
106:33
we're able to cover both of these situations for this variable.
106:37
if it's false we can cover that situation.
106:39
so it says
106:40
you are not a male.
106:41
if it's true
106:44
we can cover that situation as well so it'll say
106:46
you are a male,
106:48
so that's pretty cool.
106:49
but we can also make these more complex
106:53
and actually before I talk about that you can put as much code as you want inside an if statement so I could have like
106:59
dozens of lines of code if I wanted.
107:02
I'm just giving you guys are very simple example
107:04
so
107:04
why don't we make this more complex and I'm gonna add another
107:08
variable into the mix
107:09
so I'm going to add another you know boolean attribute into this mix.
107:13
I'm going to make another variable called
107:15
is tall
107:16
and we're gonna set this equal to true as well.
107:19
so
107:19
now I have
107:20
two variables in the mix.
107:23
let's say I wanted to write an if statement that will check both of those variables.
107:28
so I could write an if statement that's like
107:30
if their mail and their tall or
107:32
if they're male and they're not taller
107:34
if they're not mail in their tall like
107:36
I can write out a bunch of
107:37
if statements
107:38
to check
107:39
the combination of these variables
107:42
and so the way I can do that is by using one of
107:45
two key words
107:46
so
107:47
the first keyword I want to show you guys is the
107:49
or keyword.
107:50
so I can come over here and I could say
107:52
if
107:52
is male
107:54
or
107:55
is
107:56
underscore
107:56
tall.
107:57
and what this is basically going to do is it's going to say if the person is either male
108:02
or
108:03
if their tall,
108:05
then we want to do something so
108:08
this is only going to be true when one of these values
108:11
is true
108:12
when one or both of those values is true
108:16
so down here we can actually put instead of you are a male we could put you are a male
108:21
or tall or
108:22
both
108:23
that's going to be
108:23
more appropriate.
108:25
and then down here we would say you are
108:30
neither male
108:31
nor
108:31
tall
108:32
and that's because
108:34
if we execute the code inside of this else
108:36
that means that
108:37
both of these guys are false
108:39
rates I'm saying
108:40
if they're male or their tall,
108:43
we're going to execute whatever isn't here
108:45
otherwise
108:46
that means
108:47
they're neither male
108:48
nor tall we're just going to execute this down here so
108:50
misery as how this works all
108:52
click play.
108:53
and these are both true so it's going to say you are a male or tall or both.
108:58
if I was to set one of these to false
109:01
so let's set his male eagle
109:03
false.
109:04
now,
109:05
it's still going to say you are a male or tall or both.
109:08
but if I set them both equal to false.
109:11
now it's going to
109:13
say you're neither male
109:14
nor tall.
109:16
so
109:16
that's how the basics
109:17
of using the or operator.
109:20
and there's another operator we can use which is called
109:22
and
109:23
and basically a
109:24
similar to
109:25
or accept
109:26
both of these
109:27
conditions have to be true so
109:29
this is basically saying
109:30
if the person is male,
109:32
and
109:33
they're also tall,
109:35
then we're going to execute whatever's in here so we could actually change this text
109:39
to say
109:40
you are
109:40
a
109:41
tall now
109:42
because we know for a fact that
109:44
if this is getting executed that are both male and tall.
109:48
we can also change
109:49
this print statement down here,
109:51
this could say you are
109:53
either
109:53
not mail or not tall,
109:56
or both.
109:57
so
109:58
you can see it's basically just saying that
110:00
you're either
110:01
not one of them or you're not both of them so
110:05
we could the play button
110:07
and you'll see because they're both false
110:09
it's going to say you are either not mail or not tall or both.
110:12
but if I make them both
110:14
true,
110:15
now it's going to say
110:16
you are a tall male.
110:20
if I was going to make one of these faster so let's make
110:22
is tall false.
110:24
now it's not going to execute this first print statement it's going to execute the one inside of the else,
110:29
so to say you are either
110:31
not mail are not tolerable.
110:33
so
110:33
that's the basics of
110:35
and and or
110:36
and you know
110:36
you'll be using those a lot of them as you use your if statements,
110:40
but there's actually one more
110:41
thing we can do we can add in some more conditions
110:45
so up here I'm checking
110:46
if their mail and their tall,
110:49
but what if I wanted to check if their mail and they're not tall
110:52
so they're like a short male
110:54
I can use another
110:56
keyword in python
110:57
called
110:58
else f
110:59
or really it's just typed out
111:01
yes
111:01
I am,
111:02
and it stands for lcds.
111:04
and after this we can put another condition so
111:07
over here I'm going to check to see if their
111:09
male and they're not tall,
111:11
so I'm gonna say else if
111:13
mayor
111:13
ismail,
111:15
and
111:16
now I can type in
111:17
not tall.
111:18
and the way I can do that is by saying
111:20
not
111:21
an
111:21
open and close parentheses
111:22
and saying
111:23
is tall
111:24
and basically when I use this not function,
111:27
it's going to negate
111:28
whatever is inside of here so if this was true,
111:31
it's going to make it false and if this was false it's going to make it true.
111:35
so basically that'll tell us whether or not their tall
111:39
and that I'm going to use a colon and now
111:41
down here
111:43
inside of here were basically just going to type out any of the code that we want to happen
111:48
when this condition is true
111:50
so down here we can just print out
111:53
you are a short
111:55
male,
111:56
and
111:57
there's actually one more condition that we want to check for which would be if they're not mail and their tall,
112:03
so we can make one more
112:04
lcs.
112:06
and I'm actually just gonna copy this guy
112:08
and we'll paste it down here.
112:11
so I want to say,
112:13
if
112:14
not,
112:15
is male
112:17
and
112:18
his tall,
112:19
so now we're checking to see if their mail
112:22
and
112:23
are either not now and their tall so here we could say
112:26
you are
112:26
a
112:27
you are
112:28
not a
112:30
male
112:30
but are tall.
112:32
so
112:33
essentially here we have an
112:34
if statement that's going to cover
112:36
every single condition
112:37
for these two variables so
112:40
in every single situation of the two values of these variables
112:43
were going to be able to print something out for it so
112:46
if I mean both of these true
112:48
it's basically going to tell us.
112:49
you are a tall male
112:51
if I make
112:52
is male false
112:54
it's going to tell us.
112:55
you are not a male butter tall
112:58
if I made is mailed true
113:01
and is tall false,
113:04
then
113:05
it's going to tell us you are a short male
113:07
and if I made both of these false
113:10
it's going to tell us
113:11
you are either not
113:13
male or not taller both and actually we need to change this so this should say
113:17
you are not a male
113:19
and not tall so that would be a better print out
113:23
for that situation so
113:25
you basically see how we can use
113:27
ifs
113:27
osoph's
113:28
and
113:29
else in order to
113:31
how I programmed to make decisions
113:33
and really to respond
113:34
to the different data in our programs.
113:36
so unable to respond to every combination
113:40
of the values for these two
113:42
variables and that's really cool so
113:44
in this example we were just using simple boolean variables
113:48
but in the next tutorial,
113:49
I'll show you guys how you can actually use something called comparison operators.
113:54
so we could compare like two numbers or two strings
113:57
and we could use those as are conditions
114:00
but
114:00
for now I think this is a good introduction into if statements.
114:04
so I'll see you guys in the next tutorial,
114:11
in this tutorial on a talk to you some more about
114:13
if statements
114:14
in python.
114:15
more specifically we're going to be looking at using comparisons
114:19
inside of our if statement so
114:21
if you're following along with the course
114:23
in the last tutorial,
114:24
I talked to you guys about
114:26
just the basics of if statements and we used a couple different boolean variables
114:30
and depending on the diaries of those bullion's we're able to do certain things
114:35
in this tutorial we're going to look at another way to use if statements which is with comparison so,
114:41
instead of just using boolean values we can actually compare
114:44
different value silly I could compare a couple of numbers like
114:48
compare couple strings
114:49
and depending on the results of those comparisons we can do
114:53
certain things so
114:55
this is going to be pretty cool and this is really going to give you guys a full understanding of what you can do with if statements so
115:01
for this tutorial I actually want to create
115:03
a python
115:04
function
115:05
and this function is going to
115:07
give us the maximum number that we pass into it so
115:11
this function is going to take three parameters as input,
115:14
and it's going to print
115:15
out
115:16
the
115:17
biggest
115:17
number that we give it so
115:19
let's create this function I was going to say,
115:22
death.
115:23
and I'm just going to call it max
115:25
numb
115:26
and
115:26
inside of these parentheses I'm going to specify that I want three parameters as input.
115:32
someone to say
115:33
number one,
115:34
number two and number three.
115:36
so basically
115:37
we're passing it three numbers and
115:39
this function will
115:40
return.
115:41
the largest
115:42
of the three.
115:44
so in order to figure out which of these numbers is that the largest
115:47
we're going to have to use an
115:48
if statement.
115:49
so I can say
115:50
if.
115:51
and
115:52
over here I need to specify
115:54
a condition.
115:55
so I need to put like a true or false
115:57
value.
115:58
and so what we can actually do is we can compare these different numbers so I could say if
116:03
num one
116:05
is greater than or equal to
116:07
number
116:07
two,
116:09
and
116:10
number one
116:12
is greater than or equal to
116:13
numb three.
116:15
so basically what I'm doing here
116:17
is I'm comparing these different number so I'm saying if
116:20
the first number is greater than or equal to the second number
116:23
and
116:24
this is a comparison so
116:26
when you think about it
116:27
when we compare these two numbers we're going to end up with a true or false value
116:32
write
116:32
num one is either greater than or equal to numb to or it's not
116:36
it's actually a boolean
116:37
value
116:38
rights either true
116:39
or it's false.
116:40
same thing over here.
116:42
the result of this comparison
116:44
is either true
116:45
or it's false
116:47
so technically I'm putting a true or false value in there.
116:50
I'm just getting that true or false value by using a comparison.
116:55
and you'll notice over here we're using something called a comparison
116:58
operator.
117:00
and basically this is just like
117:01
how we want to compare them so
117:03
we're saying like greater than or equal to in this case
117:07
so down here.
117:08
if
117:09
this whole condition is true
117:11
in other words of the results of these two comparisons end up being true,
117:15
then we know that none one is the biggest
117:17
so I can just return
117:19
num one
117:20
I can say return
117:21
no
117:21
one
117:22
but we also want to check some other condition so I can say
117:25
alef
117:26
and
117:27
now I want to do some other comparison so I'm going to say,
117:30
else if
117:31
none
117:31
too
117:32
is greater than or equal to
117:33
number one
117:35
and
117:35
number
117:36
two
117:36
is greater than or equal to
117:37
number
117:38
three.
117:39
so I'm doing essentially what I did up here except for none too so again I'm comparing
117:45
these different numbers and this is gonna end up being a true or false value,
117:49
depending on the result of the comparison
117:52
so
117:53
down here again
117:54
we can just
117:55
returned home to
117:57
because if all this is true that means we're going to end up returning
118:00
none too.
118:01
and then finally we can just say else
118:03
so
118:05
if
118:05
num one isn't the biggest and numb to isn't the biggest then
118:09
we can pretty much assume that
118:11
number three is the biggest so
118:13
now we have
118:14
our function
118:16
so
118:16
down here
118:17
I'm actually just going to call this function,
118:19
so I'm just going to say,
118:21
actually I'll print out the results I'll say max
118:24
numb
118:25
and will pass in like three four or five
118:27
so
118:28
we're basically calling that new function that we just made.
118:33
and
118:33
I'm going to go ahead and run this program.
118:35
so you can see down here
118:37
in the output
118:37
we printed out five because that was the biggest.
118:40
if I was to change this middle onto the biggest so we make the middle on forty
118:44
now it will be able to
118:46
take on that situation and finally I can make this like three hundred
118:50
and
118:50
it'll be able to handle that so
118:52
no matter which number numb one number two or number three ends up being the biggest
118:57
it's
118:57
able to
118:58
tell us without a problem.
119:00
so
119:00
these comparisons are a really really really common way to make if statements and a lot of times
119:06
you're gonna want to be comparing different values
119:09
inside of python,
119:10
so over here we're comparing
119:12
numbers.
119:13
but we could also compare strings
119:15
so I can
119:16
easily make these both like
119:18
you know I can
119:19
make this like dog
119:20
and I can make this dog
119:23
and I could say
119:24
a different operator so I could say like
119:25
this double equal sign would mean equal so I can basically say like
119:29
if this string is equal to that string.
119:32
you can basically like compare
119:34
all different data types see nike compare in numbers strings.
119:38
you can also compare
119:39
bullion's
119:40
so
119:41
once again
119:42
these are
119:42
comparison
119:43
operators and
119:45
this one is greater than or equal to but there's a bunch of other comparison operators we can use so
119:50
the most basic is just going to be a double equal sign
119:53
and not basically checks to see if the two values are
119:56
equal
119:56
so it'll say like,
119:58
if
119:58
number one is equal to
120:00
number two,
120:01
we can also say not equals
120:03
and this exclamation point will basically mean
120:06
not equal so it's.
120:08
if no one is not equal to
120:10
none too.
120:12
we also have greater than,
120:14
less than,
120:15
greater than or equal to
120:17
less than or equal to.
120:18
and those are kind of all of the operators
120:21
are all the you know the basic
120:23
comparison operators that are going to be using in python so
120:26
using comparisons is really awesome and there's going to be tons and tons of situations
120:31
inside a python where you're going to want to compare different values
120:33
so
120:34
these can be extremely useful
120:40
in this
120:40
tutorial on how to talk to you guys about building a calculator in python.
120:45
now having been fallen along with this course you'll know that in the beginning of the course we actually created a very basic calculator.
120:52
basically the user could just enter into numbers and our calculator would add the numbers together and spit out the answer
120:59
in this is horrible honorary guys how to build a more advanced calculator so
121:04
this calculator is going to be able to perform all of the basic arithmetic
121:08
operations so we can add subtract multiply and divide
121:12
and were actually allow the user to specify which one of those they want to do,
121:16
so the user will enter in a number.
121:19
they'll enter in whatever operator they want to use so plus minus
121:23
divide
121:23
mocked by,
121:25
and then I'll enter in the second number and will perform the operation
121:28
for them says it can be pretty cool.
121:30
and it's going to show you how we can use
121:32
if statements
121:33
in like a
121:34
practical application
121:35
so let's get started.
121:37
the first thing we want to do
121:38
is get
121:39
input from the user so I'm going to create
121:41
three variables one for the first number one for the second number and
121:45
one for the operator
121:46
and will basically store the values that the user inputs
121:50
into those variables so the first one will just be number one
121:53
and I'm gonna set this equal to
121:55
input
121:56
and we're going to give this a prompts also
121:58
enter
121:59
first
122:00
number
122:02
and here's actually the thing is whatever the user
122:05
enters.
122:06
we're going to want to
122:07
convert it into a number
122:09
so
122:10
generally in python when we get input from the user no matter what they put in it just gets converted into a string.
122:17
but we don't want a string because we're going to have to
122:20
be adding or subtracting and multiplying these numbers together ?
122:23
so whenever they enter in
122:25
the number I just want to immediately convert it
122:27
to
122:28
an actual like number data type instead of a string.
122:32
so what I can do is I can actually say float.
122:34
and I can surround
122:36
this entire input tag
122:38
with parentheses.
122:39
and now,
122:40
what this is gonna do is it's going to immediately convert
122:43
whatever the user inputs
122:46
into a float.
122:47
now that's going to mean that they're going to have to insert a number otherwise we'll get an error
122:51
but
122:51
for the most part this should work out for us so I'm actually just going to
122:55
copy their sky
122:57
and we'll go ahead and
122:58
paste it over here,
123:00
and we'll paste it one more time so we
123:02
were basically just try to get three pieces of input from
123:05
the user.
123:06
so the second thing we want to get is the operator so I'm just gonna say
123:10
oh p
123:11
for operator and actually get rid of this flow
123:14
because
123:15
we want to keep this as a string.
123:17
and I'll just say
123:18
enter
123:20
operator so it's going to be like.
123:21
plus minus
123:23
multiplication whatever.
123:25
and then finally down here we'll get numb
123:26
to
123:27
and again we're going to want to convert this to a float,
123:30
so I'll say
123:31
enter second number
123:33
so
123:34
now basically what we're doing is we're getting the first number we're getting the
123:37
operator and we're getting the second number from the user.
123:41
so
123:42
what we need to do now is we need to figure out
123:45
what is inside of this
123:47
o p.
123:47
in other words we need to figure out what
123:49
operator.
123:50
the user was
123:51
trying to do so are they trying to do additional they're trying to do a subtraction like
123:55
we want to figure that out,
123:56
so
123:58
we can use an
123:58
if statement
123:59
in order to
124:00
figure that out so I'm gonna come down here
124:02
and
124:03
I'm basically just going to create an if statement song and say
124:06
if.
124:07
and
124:08
we want to check a condition so I'm basically going to check to see if this operator is equal to
124:14
a plus sign
124:15
so I can say if
124:16
o p
124:17
equals
124:18
plus sign
124:20
and now if the operator is equal to a plus sign.
124:22
I'm just going to print
124:23
out
124:25
number one
124:26
plus
124:26
none too.
124:27
but let's say that instead of a plus sign they entered in something else so we can say
124:31
l f
124:32
o p
124:33
is equal to.
124:34
and now we'll check if it's a minus sign.
124:37
and so here or just print
124:39
num one
124:39
minus
124:40
nothing too.
124:42
and I actually forgot to put a colon here.
124:44
so we can just do these for everything so now we can say.
124:47
lf
124:49
opie
124:50
is equal to
124:52
division
124:53
and here we'll just divide the two numbers so I can print out
124:57
number one divided by numb to it,
125:00
and finally we'll do the same thing for multiplication so I'll say
125:04
l
125:04
if
125:05
opie
125:07
is
125:07
equal to
125:08
astronauts
125:10
and was print
125:11
out
125:12
number one times
125:14
none too.
125:15
so basically over here we have every
125:18
you know condition.
125:19
but I also want to put in an
125:21
else
125:21
statement so
125:22
in the case that the user enters in an operation.
125:25
that's
125:26
not
125:27
like one of the four that we specified up here I just want to throw an error sums usa
125:31
opie
125:32
are actually we just say
125:33
else
125:33
and here with this print out lake
125:36
invalid
125:38
operator.
125:40
so
125:40
this if statement should give us everything we want basically I'm just checking to see
125:45
if it's
125:46
equal to a plus sign a minus sign the division sign or a multiplication sign !
125:50
depending on which one is equal to we'll do a different operation so
125:54
let's go ahead and run this and see how we do so
125:57
I'm going to run this program
126:00
and it says enter first number let's enter five
126:04
enter an operator so why don't we just
126:06
do addition
126:08
and enter a second numbers do twenty three.
126:11
so now
126:11
it prints out the answer twenty eight so
126:14
our calculator actually works
126:15
let's try another
126:17
operator just to make sure.
126:19
so it would be six
126:21
and y we multiply it
126:23
by I don't know five point
126:25
to three.
126:27
so now we go off and we do the multiplication and looks like we got our answer so
126:31
our calculator seems to be working and so
126:33
basically all we did was we got the input from the user.
126:37
and then we used
126:38
if statements to figure out
126:40
what they wanted to do right so we could check to see if they want an edition we could check to see
126:45
if they wanted subtraction
126:46
division and multiplication.
126:48
and we can also check to see if they entered in an invalid
126:51
operator so actually why don't we try that too.
126:55
so enter it in like five
126:57
and now what does enter unlike
126:59
an open or close parentheses and
127:01
four,
127:02
so you can see here it's
127:03
able to
127:04
tell like the program smart enough to know that
127:07
that's not a valid operator so
127:09
these if statements can be really powerful and we can use them in combination with getting the user inputs to create a little calculator.
127:20
in this tutorial on hitachi guys by using dictionaries in python.
127:25
now a dictionary is a special structure in python which allows us to store information
127:31
in what are called
127:31
key
127:32
value pairs.
127:34
so essentially I can just create a bunch of these different
127:37
key value pairs.
127:38
and then
127:39
what I want to access a specific
127:41
piece of information inside of the dictionary.
127:44
I can just refer to it by its
127:46
key,
127:47
so the word dictionary is actually pretty appropriate here if you are familiar with a normal dictionary,
127:53
you know in a normal dictionary you'd have a word,
127:55
and then
127:56
you'd have a definition associated to that word so
127:59
in this situation the word would be the
128:01
key.
128:02
in other words the word is what like uniquely identifies it
128:05
inside of the dictionary,
128:07
and then
128:07
the value would be the actual definition so
128:11
this is going to make more sense once we start working with this but
128:15
I just wanted to give you guys a quick introduction.
128:17
so in this situation
128:18
I want to create a little program
128:20
that will allow us to convert
128:22
a three digit month name
128:24
into the full month name
128:26
so I can convert
128:28
for example like
128:29
jay
128:29
a n
128:30
two
128:32
january
128:33
or I could convert
128:34
an
128:34
a r
128:35
into
128:36
march.
128:37
like I want to be able to have a program that can do that for us and that's actually a pretty good use case for a dictionary so
128:44
we're actually going to create a dictionary.
128:46
and I'm sure you guys how we can do that so,
128:48
the first thing we need to do
128:50
in creating a dictionary is just given a name,
128:52
so I want to give this a specific name so I'm just going to call this
128:56
month
128:58
conversions.
129:00
and now I just want to set this
129:01
equal to an
129:02
open and closed curly bracket
129:04
so whenever we create a dictionary in python.
129:07
we're always going to wanna
129:08
created inside of these open and closed
129:11
curly brackets
129:12
so
129:12
inside of the dictionary now we can start defining what are called key
129:17
value pairs.
129:19
so I can define a key and that I can give it
129:22
a
129:22
corresponding value.
129:24
and the way that we can do that is by typing out the key and then typing out the value so
129:28
in our case we're converting three digit month names
129:31
into the full month names
129:33
so I would want to type out for example
129:35
j n
129:37
and
129:37
then I can type a colon.
129:39
and
129:39
I want to type out
129:40
the value I want to associate with it so we can say in january.
129:44
I could basically do this for every combination so I could say like
129:48
you'd be
129:49
and this would be
129:50
february
129:52
and actually after each one of these we're going to need to put a comma.
129:56
so I could do the same for march soon say and they are.
130:02
so essentially what I can do is I can specify an entry
130:06
inside of this dictionary for
130:08
each one of these so
130:09
this over here would be the key
130:12
in this over here would be the value.
130:15
and here's one thing is all of these keys have to be unique.
130:19
so if I was to come down here and change this to j n,
130:23
this is actually going to give us a little warnings you can see down here it says
130:27
dictionary contains
130:28
duplicate
130:29
keys
130:30
dots they know no one we're creating dictionary so
130:33
you'll want to make sure that
130:34
the keys are unique
130:35
aren't so I'm gonna go ahead and
130:37
create one of these for each one of the months
130:39
and then we'll come back and we'll talk about it.
130:42
all right so I've gone ahead and created an entry for all twelve of the months so now
130:48
we have a bunch of unique
130:49
keys
130:50
and each one of those keys is associated with
130:53
a different value.
130:54
so this is the basics of creating a dictionary is we have a bunch of these different key value pairs.
131:00
and now what we can actually do is we can
131:03
access them from
131:04
inside of this dictionary ?
131:06
so if I wanted to access
131:08
a specific
131:08
key or a specific value.
131:11
all I have to do is come over here and I'm actually just going to
131:13
print it out onto the screen so we can see it.
131:16
all you have to do is referred to the dictionary by name so it's just called
131:20
month conversions.
131:22
and
131:23
there's actually a bunch of different ways
131:25
that I can access these month names,
131:28
so
131:29
I could access
131:30
different entries inside of this
131:32
dictionary ?
131:33
the first way is just by making
131:34
a
131:35
open close square bracket
131:37
inside here I can just type in one of the keys.
131:40
so for example inside here I could type in
131:42
and
131:42
oh thee.
131:44
and what this should do is it should give us back.
131:46
the
131:47
full
131:48
name for november so when I print this out,
131:51
you'll see that we get back down here.
131:53
nov.
131:55
so I can do the same thing for
131:57
any of these we can say like an a r.
131:59
and now we should get marched back so
132:02
I'm able to refer to the key,
132:05
and it's going to go into the dictionary and it's
132:06
going to give me the value that's associated to that qe
132:10
is actually another way we could do this too so I could
132:13
say
132:14
month conversions dot
132:16
get
132:17
an inside of here I could also pass in the name of the key so I could pass in like
132:22
d c
132:24
and now we'll be printing out
132:26
december.
132:27
and what's cool about using this get function
132:30
is I can actually specify a default value that I want to use.
132:34
if this keys not found so
132:37
there's going to be certain cases when we're dealing with dictionaries where you're going to put in a key
132:41
that might not necessarily
132:43
map to a value
132:44
inside of the dictionary you so he put in an invalid
132:47
key.
132:48
so let's just
132:48
try to do that so honest put like aliyu v.
132:51
that's not
132:52
a month abbreviation.
132:54
so when I try to run this,
132:56
you'll see we get this
132:57
none
132:58
down here.
132:59
and in a lot of cases
133:00
you're gonna want to
133:01
create some sort of a default
133:03
value.
133:04
so if I'm in this situation where I have a key
133:07
that's not mappable to any values inside of this
133:10
dictionary ?
133:11
I can actually pass it a default value.
133:14
so inside this dot get function
133:16
I can
133:17
make a comma.
133:18
and I can pass in like a default value to get printed out so I can say like not
133:22
a valid
133:23
key.
133:24
and now
133:25
when I put in the invalid key instead of saying none.
133:28
it's going to go ahead and say
133:30
not a valid
133:31
key and so this is going to give us like a default value
133:34
that we can fall back on so
133:36
these dictionaries are really awesome and
133:40
the keys over here don't have to be
133:42
strings so you could also use numbers
133:44
so for example I can see like zero
133:47
one
133:48
tan like I can put any numbers I want over here as keys
133:52
as long as their unique and that I could access those keys
133:55
just like I normally would down here
133:58
with this
133:58
get function or with those open and closed square brackets
134:02
so that's sort of the basics
134:03
of using dictionaries like me really useful to store
134:05
key value pairs
134:07
and honestly you're going to be using them a lot in python to store different types of data.
134:16
in this tutorial I wanna talk to you guys about wild loops in python,
134:21
and
134:21
a while loop is basically a structure in python which allows us to loop through
134:26
and execute
134:27
a block of code multiple times.
134:30
so I could specify like a few different lines of code and then I could
134:34
put that code
134:35
inside of a while loop
134:37
and it would basically you loop through that code executing it repeatedly until a certain condition was false.
134:45
so our lives can be awesome and there's a lot of situations in python where we're going to want to loop through specific lines of code,
134:51
so in this tutorial I just want to show you guys the healing
134:54
bare basics of how wildebeests work
134:57
and then in future tutorial is we're going to use while leaps to create little games and stuff like that so
135:02
let's talk about wild sum
135:05
when I create my wild loop.
135:06
the first thing I want to do actually
135:09
is create an
135:10
integer.
135:11
I'm basically creating a variable that's a number and you don't have to do this for a while
135:15
but just for our demonstration I'm going to.
135:18
so I'm going to call this,
135:19
I
135:19
am going to set it equal to one.
135:22
now what I wanna do is I want to create a while loop
135:25
so I'm basically just going to say.
135:26
while
135:28
and
135:29
over here I want to specify
135:31
a
135:32
condition,
135:33
and this is what's called our loop condition or you can also
135:36
refer to it as a loop
135:38
guard
135:38
and basically we are going to keep looping through the code
135:42
inside of the while loop.
135:44
as long as this condition is true.
135:47
so whatever condition I put in here as long as it's true
135:50
we're going to keep looping through the code inside the wild is I'm just going to say while
135:54
I
135:55
is less than
135:56
or
135:56
equal to
135:57
ten
135:59
and now I'm gonna put a
136:01
colon
136:02
and I'm gonna make a new line.
136:04
and so
136:04
anything that's below this while loop declaration and that's
136:08
indented
136:09
like this
136:10
is going to be considered code that's
136:12
inside the while loop and so that code
136:15
is going to get repeatedly executed
136:17
while this condition up here is true.
136:20
so I'm just gonna put a very simple line of code here where it's going to print
136:24
out the value of
136:25
I,
136:26
and then down here I'm going to actually
136:28
increment
136:28
eyes I'm going to add one
136:30
to eyes I must say
136:31
I
136:32
is
136:32
equal to
136:33
I
136:33
plus
136:34
one,
136:35
so basically I'm taking this I value and I'm adding one to it
136:39
is actually a shorthand that we can use in
136:42
python to do something like this though I could just say
136:44
I
136:45
plus
136:46
equals one
136:47
and not automatically going to add one
136:49
to
136:50
I
136:50
so this is like a little shorthand and
136:52
you'll see people in pipe on using that a lot.
136:55
so
136:56
over here we basically have
136:58
our wild lives I have
137:00
the outline for a while lives we're defining this variable up here
137:04
and we're going to keep looping through the code
137:07
inside the while loop.
137:08
as long as this condition up here
137:11
is true.
137:12
so if this condition is false for example if
137:15
I
137:15
is equal to
137:16
eleven,
137:17
then we're not going to loop through this company more than just going to move on.
137:21
so down here I'm actually just going to print
137:25
done with loop.
137:27
so this was kind of illustrate this for us.
137:29
so let's go ahead and run this program I'm just gonna run it
137:34
and
137:34
you'll see down here we get some
137:36
output so
137:38
we're actually going to get
137:39
numbers printed out one
137:41
all the way down
137:42
through
137:43
ten
137:44
and then were printing out done with loop
137:47
so basically what's happening is we're printing out
137:50
every time we go through this loop
137:52
so
137:53
initially I is equal to one right.
137:55
the first thing that python's going to do when it gets to this while loop
137:58
is it's going to check this condition.
138:00
so before it does anything else,
138:02
it's going to check this condition and it's going to say
138:04
okay,
138:04
is
138:05
one
138:06
less than or equal to ten.
138:08
and that's true.
138:09
so as long as this guy is
138:10
true
138:11
we're going to go through and loop through all the code inside of here.
138:14
so we're going to print out
138:15
I
138:15
which has the value of one
138:17
and then we're going to
138:18
add one
138:19
to I so now I'm going to go from one
138:21
to two.
138:22
now what we're going to do
138:24
is we're going to go all the way back up here
138:26
to this while loop
138:27
declaration and we're gonna check the condition
138:30
again.
138:31
so remember I checked the condition
138:33
first time
138:33
and then I looped through all the code,
138:35
then I'd go back up to the top
138:37
and I check it again so I'm gonna say
138:38
ok
138:39
is I less than or equal to ten
138:41
at this point
138:42
I is equal to two
138:44
so I is less than or equal to tenant.
138:46
so now we're going to go through and will
138:48
execute all this code again so I'm going to
138:50
print out
138:50
I so it's going to be too
138:52
and I'm going to add one to eye
138:53
so now we have three
138:55
then
138:56
python's going to go all the way back up to the top
138:58
and it's going to check
138:59
the condition again
139:01
so
139:02
on every iteration through the loop
139:04
before python
139:05
does what's inside of this loop
139:06
it's going to check that condition.
139:08
and as long as the condition remains true.
139:11
we're going to
139:11
keep executing the code inside the loop
139:14
eventually though in this program
139:15
I is going to end up being eleven
139:18
right
139:18
so I'm the last
139:19
iteration it's going to end up being levin,
139:22
we're going to come back up here,
139:23
and we're going to say
139:24
hum
139:24
is eleven less than or equal to ten
139:27
nope
139:27
and so sense it's nope
139:29
we're going to come down here
139:30
and we'll print out this done with loop line so that's the basics of how these wildebeests work
139:36
we're specifying a loop condition.
139:38
as long as that conditions true
139:40
will keep executing the code
139:41
inside of the loop,
139:43
and after every execution of the loop,
139:45
we're going to come back up and check the condition again so
139:47
that's how we end up with
139:49
this.
139:50
printing out
139:51
down here,
139:52
so that's the basics
139:53
of
139:54
a while loop
139:54
and
139:55
we can use these volumes to do
139:57
all sorts of things like wild fruits are very very powerful
140:04
in this tutorial on a show he eyes how to build a basic
140:07
guessing game in python,
140:09
and in this guessing game we're actually going to be using all sorts of cool programming structures that we've
140:15
learned up to this point in the course.
140:17
so we're going to be using things like
140:18
if statements and wild loops and variables and
140:21
all these cool things
140:22
in order to build this game so,
140:24
the basic idea is we will specify lake a secret word.
140:28
so we'll have a secret word that we store inside of our program
140:32
and then the user can interact with the program and try to guess
140:35
the secret word.
140:36
and so what we want to be able to happen is we want the user to be able to keep guessing
140:41
what the secret where it is and keep typing in different responses.
140:44
until they get the secret word right.
140:47
so that's the basics
140:48
of what this game is going to be.
140:50
and
140:51
now let's go ahead and create it so the first thing we want to do is
140:54
create a variable to store our secret word.
140:58
so I can say
140:59
secret
141:00
word.
141:01
and we're just going to set this equal to a secret word so why don't we make it a draft.
141:04
that's a pretty good secret word.
141:06
and now what we wanna do is want to create a variable that will store
141:10
the user's response
141:13
so I want a variable that will store like all the guesses
141:15
that the user makes
141:17
so I'm just gonna
141:18
call this
141:18
guess
141:20
and
141:20
I'm just going to set it
141:21
equal to an empty string right now.
141:23
so
141:23
now we have a secret word
141:25
and we have
141:25
a variable to store the user's guess
141:29
and what we need to do is we need to be able to prompt
141:31
the user
141:32
to input the secret were.
141:34
but here's the catch.
141:36
what we want to happen is we want them to enter the secret word.
141:39
and if they don't guess it correctly
141:41
we want to prompt them to enter it again.
141:44
so we can't just use a single
141:47
input statement we actually have to use
141:49
something called a while loop.
141:51
and we can use a while loop
141:53
in order to continually ask the person
141:56
to guess the word
141:57
until they guess it correctly.
141:59
so let's go ahead and create our while loop so I'm gonna say while
142:03
and
142:03
after a while I need to specify a looping condition or a looping guard.
142:09
basically this is something
142:10
that as long as it's true
142:12
we're going to keep looping through
142:14
this loop.
142:15
so basically I want to say
142:17
I want to keep looping as long as
142:19
the user's gas
142:21
is not equal to
142:23
the secret word.
142:24
so as long as they haven't guessed
142:26
the secret word.
142:28
I'm going to keep going through this loop,
142:30
and inside this loop.
142:32
what we're going to do is we're going to ask them to input the secret word
142:36
so I can take this
142:37
gas variable
142:39
and I can set it
142:40
equal to
142:41
input.
142:42
and I'm just going to say.
142:44
enter
142:45
guess.
142:47
and so over here we're basically telling the user to enter in their guests.
142:51
I'm storing whenever they enter
142:54
inside of this guess
142:55
variable
142:57
and then what's going to happen is that we're going to come back up here
142:59
we're going to
143:00
check to see if the gas
143:01
is equal to the secret word
143:03
if the guests
143:04
isn't equal to the secret word,
143:05
then we're going to do it again.
143:07
but if the guests
143:08
is equal to the secret word,
143:10
then we're just going to break
143:11
out of this loop.
143:13
and so we can come down here
143:15
and we can just print out
143:17
a success message so I could say
143:19
you win
143:20
because they got the secret were
143:23
since they have very very simple program
143:25
but
143:25
this is essentially all of the code that we need to be able to build a game
143:30
like this so
143:31
let's go ahead and play our game we can run it and
143:33
see how he did so I'm gonna
143:35
click play.
143:37
and down here you can see it's prompting us to enter a guest's so I'm just going to type in some
143:42
you know random texts
143:43
we can type in whatever you want.
143:45
and as long as we're not entering that secret word it's going to keep prompting us to
143:49
enter different information.
143:52
but
143:52
if I enter in the secret word
143:54
so if I enter in draft.
143:55
now
143:56
all of a sudden the programs can terminate and it's going to say,
143:59
hey
144:00
you win
144:01
because we were able to guess
144:02
the secret word.
144:04
so that's like
144:04
a really cool way for us to be able to do this.
144:07
and we actually have a fully functional guessing game.
144:11
but
144:12
I think this guessing game could actually be improved quite a bit.
144:16
a lot of times when
144:18
we're making a guessing game we want to set a limit
144:20
so in other words I want to set a limit for
144:23
the number of times that the user can try to guess the word.
144:26
so let's say that the user has
144:28
three tries right they have three guesses in order to guess the word.
144:32
and if they can't guess the word after three tries.
144:34
then they're going to lose the game.
144:36
but
144:37
if they can guess the word
144:38
inside of three tries then
144:39
they'll win the game right.
144:41
I think that will be a little bit more of a fun game so
144:44
why don't we try to program
144:45
that game,
144:46
basically we're going to set a limit
144:48
on the number of
144:49
guesses
144:50
that the user can have
144:51
in order to do this and we're going to have to create a couple more variables down here.
144:57
in other words
144:58
we're going to have to store a couple more pieces of information.
145:01
the first piece of information I want to keep track of is
145:04
how many times the user
145:06
has guessed
145:07
right,
145:07
so we can just make a variable called guests
145:10
cao
145:11
and we'll just set this equal to zero because initially
145:13
the user won't have
145:15
guest
145:15
down in this while loop.
145:17
every time we go through the loop,
145:20
I want to increment that gas can
145:22
write so every time we've gone through this while loop
145:24
I want to
145:25
increment that count because that means
145:27
the user will have guessed
145:29
so down here I'm going to say.
145:31
guess
145:32
count
145:34
plus
145:34
equals one
145:36
and this is just going to add
145:37
one to the gasket actually whips.
145:41
so
145:42
after each iteration of this loop we're going to go ahead and add one
145:45
to the gas count
145:47
right so that's the first variable that we're going to need we're also going to want to
145:50
store another variable
145:52
and this is going to be called guess
145:54
limit
145:55
and basically this is going to tell us how many times the user can guess the words on it it's going to be guests
146:01
limit
146:02
and
146:03
will basically just say three so let's say that the user has three tries
146:07
to guess the word three strikes and you're out so
146:10
the user if they can't get it in three tries
146:13
then
146:13
we're going to
146:14
basically say that they lose the game.
146:16
and I'm also going to need one more
146:18
variable here,
146:20
which
146:20
we're going to call
146:21
out
146:22
of
146:23
gases.
146:24
and
146:25
I'm just going to set this equal to false initially.
146:28
so this
146:28
out of gases variable is going to be a boolean.
146:31
and it's gonna tell us whether or not the user is out of gases.
146:34
so if out of gases is true
146:36
that means they have no more guesses right they basically lost the game
146:40
and if out of guesses
146:42
is false that means that they still have some guesses left so they can keep playing.
146:47
so let's use these different variables in order to
146:50
make our program or functional so
146:53
the first thing I want to do is
146:55
when I go through this loop.
146:57
I want to check to make sure that the user has more guesses,
147:01
right
147:01
in other words before I let the user
147:04
enter a gasp.
147:05
I want to check to see that they haven't already used up all their guesses.
147:09
so down here
147:10
I can make an if statement I can say
147:12
if
147:13
and inside of the condition I want to check to see that
147:16
guess
147:16
count
147:18
is less then
147:20
guess
147:21
limit
147:22
if gas count is less than guess limit.
147:25
that means that they haven't
147:26
guessed
147:27
the
147:27
total number of guesses that they have so they have some guesses left.
147:31
and
147:32
if that's the case and if that's true,
147:34
then I'm going to go ahead and
147:37
give them a guess and then we'll increment the guest count.
147:40
if this isn't true in other words,
147:43
if they
147:44
have reached their guests limit,
147:46
then I'm going to want to set
147:47
out
147:48
of
147:49
guesses
147:50
equal to
147:51
true
147:52
because there are guesses right they have no more guesses because
147:55
the gas count wasn't less than the guest limit.
147:58
and so that means that there are two gases so they have no more gases.
148:01
so there's actually
148:02
one more thing we need to do inside of this while loop
148:05
we need to
148:05
add another condition
148:07
onto this loop guard.
148:09
so right now we're going to keep looping as long as the guest
148:12
is not equal to the secret word
148:14
but remember
148:15
if the users out of gases in other words if they've reached their gas limit
148:20
we don't want them to guess anymore,
148:22
right so if they ran out of gas is then
148:24
we want to basically break out of this loop and not give them anymore guesses so
148:28
I'm going to go ahead and add another condition onto here
148:31
and I'm gonna say
148:32
wow
148:32
they haven't guessed the secret word
148:34
and
148:35
they're not
148:37
out
148:38
of gases so it's going to be not
148:40
out
148:41
of
148:42
guesses,
148:43
then
148:44
we're going to keep looping so as long as they haven't guessed the word and as long as they still have some guesses laugh we're going to keep looping
148:51
but
148:51
otherwise
148:52
we're going to break out of the loop.
148:54
and so down here
148:55
we're printing out you win,
148:58
but actually when we break out of this loop,
149:00
there's going to be two
149:02
possible scenarios.
149:03
so again,
149:04
there's two possible ways that this loop could andrei
149:08
either the gas is equal to the secret word.
149:10
so either the user guests of the word correctly,
149:13
or
149:14
the user ran out of guesses
149:16
and so
149:17
there's two situations down here
149:19
that we need to account for.
149:21
and so I'm going to use an if statement to figure out
149:23
which
149:23
is which I'm going to say
149:24
if.
149:25
and we're just going to say,
149:26
out
149:27
of
149:28
gases,
149:30
and,
149:31
if the user is out of guesses
149:32
that I want to print,
149:36
you lose
149:37
so we're basically going to be like
149:38
you lost the game.
149:40
otherwise though
149:41
if they're not
149:42
out of gases.
149:43
that means that they guessed the word correctly
149:45
so we're just going to pronounce
149:46
you win.
149:48
all right so now we have all the logic for this little guessing game set up
149:52
and let's see if we can run it and play through it so
149:56
I'm just going to run this program.
149:58
and now it's going to tell us to enter a guess
150:00
so why don't we
150:01
enter more guesses than we have so we're going to try to lose the game so I'm going to enter one gas
150:06
two guesses.
150:07
and now I'm on my final guess so if I don't get it here,
150:11
we should actually lose the game.
150:13
and you can see it says
150:14
out of guesses you lose.
150:16
so we were able to guess it
150:17
in the number of trials that we had.
150:20
let's run the program again
150:21
and we'll try to win the game.
150:23
so
150:23
we'll get a couple wrong.
150:25
let's say we're on our last gas and unlike
150:27
okay I can do this
150:29
so I type in the word and
150:31
bam
150:31
we won the game so,
150:33
that's how we can basically create a game where we have
150:36
a guess limit
150:37
so
150:38
this is a lot of code
150:39
let me walk you guys through this one more time
150:41
so you can just get a full understanding of what we're doing
150:45
up here I created a few different variables
150:47
we created this secret word variable
150:49
and we created this guests variable.
150:52
then
150:52
we also created
150:54
some more variable so we created this guests
150:56
count variable.
150:57
and this just keeps track of how many times the user has
151:01
guessed
151:01
the word.
151:02
and you can see down here.
151:04
every time
151:05
we give them a gas
151:07
were incremental
151:08
the guest count.
151:10
we also have guests
151:11
limit
151:12
and gas limit is telling the program how many times the user can guess.
151:17
so before I go through this while loop the first thing I'm doing is I'm checking to see that the guest
151:22
count
151:23
is less than the guests limit.
151:24
in other words
151:25
do they still have some guesses
151:27
left
151:28
if they do,
151:30
then we're going to get the input from the user.
151:32
otherwise,
151:33
we have this
151:34
other variable up here called
151:36
out of gases
151:37
and out of gases is going to tell us whether or not they have some guesses left.
151:41
so this is equal to false.
151:43
that means they have some guesses,
151:45
if it's equal to true however it means
151:47
no more dice
151:48
no more guesses they are done
151:50
so they lost the game.
151:52
the last thing we needed to do is specify an additional condition up here.
151:57
so
151:57
we are going to keep looping through the code
151:59
inside of this loop,
152:01
as long as the conditions up here
152:04
are true.
152:05
so as long as they haven't guessed the word.
152:08
and
152:09
as long as they're not
152:10
out of guesses.
152:12
we are going to keep
152:13
looping through.
152:15
and so
152:16
when eventually the user does break out of this loop,
152:18
there's going to be two possible situations the first situation is that they ran out of guesses
152:23
and so we want to check to see if that's the situation.
152:26
I want to check to see if they're out of guesses.
152:28
if they are
152:29
will print out a lose message,
152:31
if they're not,
152:32
then they must have guessed it correctly so
152:34
they win.
152:34
and so that is how we can use while loops
152:37
and
152:37
if statements
152:38
and also variables
152:39
in combination with each other to build a pretty awesome
152:42
guessing game
152:47
in this tutorial on a talk show guys by using
152:50
for loops in python.
152:52
now a for loop
152:53
is a special type of loop in python which allows us
152:57
to loop over a different collections
153:00
of
153:00
items.
153:01
so a lot of times will use for loops in python to like loop through different arrays
153:06
or we can loop
153:07
over like the letters inside of a string or
153:10
we could just loop through like
153:11
a
153:12
series of numbers
153:13
so for lives provide a very specific purpose.
153:16
and the easiest way to kind of wrap your head around
153:19
why four lives are useful as it is for me to show you guys
153:21
a bunch of different examples so
153:23
that's exactly what I'm going to do,
153:25
we're going to look at why four lives are awesome so down here in my
153:29
text file and my a
153:30
python file.
153:31
I'm going to write out a couple different
153:33
for lives.
153:34
so the way that we create a for loop
153:35
is just by saying four.
153:37
and now what I want to do is specify
153:40
a
153:41
variable
153:42
and this variable is going to
153:45
essentially represent
153:46
a
153:46
different value
153:48
every time we go through this for loop
153:51
and you guys will see
153:52
how that works in a second but just know that this variable is going to
153:56
be used on every iteration
153:58
of our for loop,
153:59
and
154:00
each time
154:01
it will most likely have a different
154:03
value so
154:04
in our case I'm just going to call this letter.
154:07
and I'm going to save four letter
154:09
inn.
154:10
and now what I wanna do is I want to specify
154:13
a collection
154:14
that I want to loop over.
154:15
one
154:16
example of this would be like a string
154:18
so I can put a string in here I can just put like draft
154:21
academy.
154:22
and now I can just put a colon
154:24
and so basically what this is gonna say it so it's going to say for
154:28
every letter
154:29
inside of draft academy.
154:31
I want to do something
154:33
and so down here inside of this for loop
154:35
and again we need to indent this
154:38
we can put what we want to do with
154:40
each letter so let me just show you guys like basically what this is going to do so I can print out
154:46
letters I can print out this letter variable.
154:49
and it's actually going to print out a different letter
154:52
inside of this dropoff academy string
154:54
on every single iteration
154:56
of this loop.
154:57
so
154:58
I'm gonna run this program.
155:00
and
155:01
down here inside of my counsel you'll see that I'm basically printing out
155:05
draff academy so
155:07
on the first iteration of the loop.
155:09
I printed out the first letter in draft academy which was g
155:13
on the second iteration of the loop
155:15
I printed out
155:15
I
155:16
third was our fourth with
155:18
a.
155:19
so
155:19
I'm essentially just looping through
155:22
all of the letters
155:23
inside of
155:24
draff academy.
155:25
so I'm saying
155:26
for
155:27
each letter
155:27
in dropoff academy.
155:29
I want to print
155:30
out
155:30
that
155:30
letter.
155:31
and so this is kind of like
155:33
how for loops can be used we can define a variable
155:36
and that variable will change
155:39
on each
155:39
iteration of the loop right so on the first iteration of the loop.
155:42
this letter variable represented a g.
155:45
on the second iteration of the loop.
155:47
the letter variable stores
155:48
the value
155:49
I
155:49
excited
155:50
right so we went through
155:51
this entire string we were able to print
155:53
out
155:54
each letter.
155:55
so in addition to using this with strings we can also use this with other collections for example like an array.
156:02
so if I created in array up here,
156:04
let's call it
156:05
friends.
156:06
I'm gonna set this
156:06
equal to a bunch of different values so we can
156:09
put like a list of our friends in hearings zelig
156:11
jim
156:12
karen
156:13
and
156:14
kevin
156:15
instead of saying the letter why don't we call this
156:18
friend,
156:19
and I could say for friend
156:21
in
156:23
friends
156:24
and now will print out
156:26
the friend
156:27
so
156:28
over here I'm saying for
156:29
each friend
156:30
inside of this friends
156:32
array.
156:33
I want to print out the friend so now
156:35
we'll actually be able to print out
156:37
each
156:37
element inside of that array so not here you'll see
156:40
we're printing out gym
156:41
and then on the second iteration were putting out karen and on the third would bring up kevin tso,
156:46
and he was a loop through all of the values
156:48
inside of the array.
156:50
and
156:51
just so you guys know like
156:52
you can name this variable whatever you want so I could name
156:55
I could give this like any random name,
156:58
and if I want to access it though I have to access it using that
157:02
same
157:02
name
157:03
so we can loop through asking me like an array we can also just loop through
157:08
a series of numbers
157:09
so I could say
157:10
index over here
157:12
and again this can be anything I'm just gonna call index
157:15
so we could say for index
157:16
in
157:17
range
157:18
and then in here I can pass in a number so I can pass in like
157:22
ten for example.
157:24
and down here I'm just going to print out the index.
157:26
when I run this program,
157:27
you guys will see that
157:29
it's basically going to print out every number in the range
157:32
from zero to ten,
157:34
not including ten
157:35
so starting with zero it's going to put out zero one two three four five six seven eight
157:40
nine.
157:41
but notice that it didn't print
157:43
out
157:43
ten
157:44
so it's essentially just printing out all the numbers between
157:47
zero and
157:48
ten
157:49
not including ton.
157:51
you can also specify
157:52
a
157:53
a range of numbers so I can say for example like
157:56
three and ten.
157:57
and now this will print out all the numbers between three and ten
158:01
not including ten
158:03
so run this program,
158:06
and you can see we print
158:07
out three four five six seven
158:08
eight nine
158:09
ten not ten
158:11
so whatever value that you put
158:14
here in this second position
158:16
is not gonna get included in the range
158:18
and ranges can be
158:19
really is also for example I could use a range
158:22
to loop through an array just like we did before.
158:25
so if I wanted I could say something like for
158:28
index
158:29
in range
158:30
and now
158:31
inside of this range
158:32
I can pass in
158:33
the length
158:34
of
158:35
the array.
158:36
so
158:37
just so you guys know if I wanted to get the length of this array.
158:41
in other words if I wanted to figure out how many elements were inside of it.
158:45
I could just type out
158:46
alli end
158:47
and then inside parentheses.
158:49
the name of the array and so
158:50
this is going to spit out three because there's three elements
158:54
inside of here
158:55
right
158:56
kind of make sense.
158:57
so what I can do is I can say down here inside of this range function
159:01
I can just type in
159:03
eliane
159:04
and then
159:05
friends.
159:06
and so what this is gonna do is it's going to essentially give me
159:09
a range
159:10
between zero and the number of friends.
159:13
inside of this list
159:14
so down here I could actually type out
159:17
friends
159:19
index.
159:20
and this will allow me to access
159:21
each
159:22
individual friend inside of this list.
159:24
just like we did before but now I'm doing it with
159:27
a range,
159:28
so you can see I'm
159:29
typing out jim care and kevin so
159:32
actually
159:33
for each
159:33
iteration through this loop
159:35
it's basically going to be printing out
159:37
friends
159:38
zero
159:40
friends one
159:41
and then friends
159:42
too because
159:43
in heater were passing in a three
159:46
and remember whenever I pass in there it's going to range from zero
159:50
all the way up to that number
159:51
but not including that number so
159:53
that's another way that we can print out all the elements in the array
159:56
and
159:57
looping through something like an array is actually a very very common use case
160:02
for four loops.
160:04
but like I said we can you spoil hopes to loop through essentially any collection that we have so
160:08
we can loop through like a string that we could also loop through
160:12
you know something like an array so
160:14
this can be really useful and bats are the basics
160:17
of for loops
160:18
in
160:18
python.
160:19
and I also want to show you guys one more example just while we're here
160:22
so
160:23
why don't we go ahead and print out a range
160:25
up to
160:26
five
160:27
brace this would just be a simple program
160:29
you can use all sorts of logic
160:31
inside of these four lives.
160:33
so let's say that I wanted to do something special on the first iteration of the loop.
160:38
so I could say
160:39
if
160:40
index
160:41
is equal to zero
160:43
and
160:43
if the index to zero than we know it's the first iteration of the loop so I could do something special I could like print out
160:49
first
160:49
iteration.
160:51
and then otherwise we could just
160:53
print lake
160:56
not first so this would be an example of like
160:59
maybe you want to do something on the first iteration of the loop
161:01
and do something else on
161:03
subsequent iteration so if I play this
161:05
you'll see only on the first iteration is it
161:08
printing this out and otherwise it's printing out other stuff so
161:11
you
161:11
don't be afraid to
161:13
put some complex logic
161:14
inside of these four lives
161:16
because
161:16
it can really make your programs more powerful
161:23
in this tutorial I'll show you guys how to build an
161:25
exponent function
161:27
are an exponent function is basically going to allow us
161:30
to
161:30
take a certain number and raise it to a specific power.
161:34
so in python there's actually a really easy way to do this I can come down here and I could print.
161:39
we could say like
161:40
too.
161:41
and we can just do
161:42
two multiplication signs
161:43
and I could say three
161:45
and this is basically just going to be two
161:47
raised to the third power.
161:50
so
161:51
you can
161:51
see here I can just print this out and
161:53
we get a
161:53
cassettes
161:54
to cube
161:55
so
161:55
it's really easy to do exponents in python.
161:59
but I want to show you guys,
162:00
how we can use something like a for loop in order to create a function like this of our own sun will actually create an
162:07
exponent
162:07
function
162:08
that will basically do this and we'll use
162:11
for loops to do it
162:12
so
162:13
let's create a function.
162:14
something as a death
162:16
and now we need to give this
162:17
function a name so why don't we call it
162:19
raise
162:20
two
162:21
power
162:22
and inside of here,
162:24
I'm going to accept two parameters the first parameter is going to be the
162:27
base number.
162:29
and then the second
162:30
parameter is going to be the
162:31
power number so we're going to take the base number
162:34
and raise it to
162:36
the power number.
162:37
so
162:38
over here we can just
162:39
make a colon
162:40
now
162:41
inside of this function when you start writing some code.
162:44
here's the thing
162:46
inside the function we don't necessarily know
162:48
the value of this poem,
162:51
right
162:51
for them why have we knew
162:53
that we were just trying to like square this number or cube this number.
162:57
I could just return
162:59
like bass
163:00
num
163:01
times
163:02
basal cell
163:02
right
163:03
now it's square the number or I could keep the number
163:06
bass num
163:07
so right so this would be like the number cubed.
163:09
the problem is though we don't know like right off the bat
163:12
what this value is going to be
163:13
right this could change like the user can decide that.
163:17
so in order to write this function we're actually going to need to use a for loop.
163:21
and I'm sure you guys how it can use a for loop
163:23
to basically figured this out so
163:25
the first thing I want to do is create a variable and I'm just going to call it
163:28
result.
163:30
and we're just going to set the result
163:31
equal to one so we're gonna start this off at one.
163:34
now I want to create
163:36
a for loop,
163:37
so I'm basically just gonna say
163:38
four
163:40
and over here,
163:41
I don't want to specify like
163:43
a
163:44
index on aug eight index
163:46
in
163:47
and now want to specify a range
163:48
and arrange will basically
163:50
range us
163:51
through
163:51
a
163:52
collection of numbers.
163:53
so basically I want to
163:55
multiply the bass num
163:56
by itself,
163:58
as many times as the pound numb
164:01
specifies
164:02
right
164:02
over here I can just make this
164:04
a range
164:05
of
164:06
power
164:06
numb
164:07
right and so we'll basically a loop through
164:10
this for loop
164:11
as many times as pound them so eponymous two
164:15
will loop through it twice.
164:16
economists for will luther at four times
164:19
and every time through the loop will multiply bass num by itself
164:23
or actually you'll see we're going to multiply it by this result,
164:26
and so down here inside
164:27
this for loop
164:28
I can basically say
164:29
result
164:30
is equal to
164:31
result
164:32
times,
164:34
pacing up
164:35
this should actually give us everything we need to take this number
164:38
to the specific power so
164:40
the actual like
164:42
result
164:43
of doing the math
164:44
is going to get stored
164:45
inside of this
164:46
result
164:47
variable so
164:49
the first time through the loop,
164:50
we're just multiplying basin on by one
164:52
right.
164:53
and so now result
164:54
is going to become
164:55
the same value is based on
164:57
the second time through the loop so this would be if we were squaring the number.
165:01
we're basically multiplying resort by basin um again so it's essentially just
165:05
based on long times based on
165:07
the third time through the loop
165:08
we're multiplying result times bass num
165:10
so we're essentially just like
165:12
keeping the number so
165:13
that's essentially what this for loop
165:15
is doing for us.
165:16
so the last thing I want to do is
165:18
right here below this for loop
165:20
I'm just going to
165:21
return
165:22
the result
165:23
so
165:23
we'll be able to return whatever the result of raising the number to the power was
165:29
so let's come down
165:29
after this function and we're just going to call it so I'm just going to say,
165:34
actually will print out the answer so
165:36
save raise to power
165:38
and the inside of these pregnancies member we can pass two numbers so let's
165:42
raise three
165:43
to the second power so we're just going to square three and we'll see how this works
165:47
so
165:48
from the program
165:49
and you can see down here in the console were getting nine.
165:53
let's try something a little bit
165:54
crazier
165:55
drive three
165:56
to the fourth power
165:58
and will run this
165:59
aggregate
166:00
eighty one so that's
166:01
three to the fourth power.
166:03
let's try two to the third power
166:05
and were getting eight
166:06
yeah so that makes us
166:07
so
166:08
our raised the power function is working
166:10
just as expected and that is what he has to do it one more time.
166:14
so
166:14
inside of this function were taking in two pieces of input were taken in a base number.
166:19
we're taking it a pow number so that's like
166:22
the base number is going to be taken to the power number
166:25
I'm defining a variable here called result
166:28
and result is where we're going to store
166:30
the actual result of doing the math.
166:33
now we specify this
166:34
for loop,
166:35
and I'm basically saying that
166:37
I want to loop through this range of numbers.
166:40
when I put
166:40
pounha um here is basically going to range from zero
166:43
all the way up to but not including the power number silk
166:46
we'll basically loop through power number of times
166:49
that makes sense.
166:50
and then every time through the loop we're just multiplying result by
166:54
base numb.
166:55
and then we're just returning results so
166:57
that's the basics of building a
166:59
power function
166:59
and
167:00
obviously like
167:01
if you're just trying to take a number to a power in python it's really easy but
167:04
this kind of shows you like the internal workings right
167:07
for a function like that to work we would have to actually
167:10
type something out just like this,
167:16
and this tutorial I wanna talk to you guys about two different concepts
167:19
in
167:20
python.
167:21
it's going be a pretty cool lesson.
167:23
first thing I want to show you guys though are
167:24
two dimensional lists so down here in our
167:27
python file.
167:29
I just want to create
167:30
a
167:31
basic list
167:32
so I'm just going to call this
167:33
number grid.
167:35
and I'm going to set this equal to
167:37
a normal let strangers like this
167:40
now normally if we were creating a list I could just put in a bunch attributes and bunch elements right,
167:46
and now all of these elements are inside of this number grid lists everybody's happy.
167:50
but
167:51
another thing I can do
167:53
is I can make
167:54
all of the elements
167:55
inside of this number grid list
167:58
lists
167:59
so
168:00
the first
168:00
item
168:01
in the numbered list is going to be a list.
168:03
the second item and the number grew less is going to be a list
168:06
etc.
168:07
so I'm going to show you guys have to do that
168:08
I can basically just come down here and
168:10
why would normally put the first
168:12
element in the list
168:13
I can just create another array
168:15
someone's going to make an open closed square bracket,
168:18
and now
168:19
I'm just going to say one two three
168:23
and I can create the next item in my list
168:25
I can say
168:26
four five six,
168:28
and then let's make another item in this list.
168:30
I can say
168:32
seven
168:32
eight
168:33
nine
168:33
and finally we're going to put one more list inside of the number grid list
168:38
and it's just going to have
168:39
zero in it so
168:41
inside of this numbered red lips write this
168:43
high level overall list,
168:46
we have
168:46
four elements
168:48
in
168:48
all of those elements
168:49
are
168:50
themselves
168:51
lists.
168:52
so essentially what we're doing is we're creating a grid right
168:56
this grid has one two three four rows
169:00
and one
169:01
two three carbons
169:03
right
169:03
for rose
169:04
three columns and that's kind of like
169:06
why these can be useful as we can create a grid like
169:10
structure inside of python
169:12
using
169:12
two dimensional lists.
169:14
so this is a pretty cool list structure.
169:17
and I wanna show you guys,
169:18
how it can access
169:19
individual elements
169:21
inside of this list structure so
169:24
for example let's say I wanted to print out one of these values if they wanted to print out this one right here,
169:29
the way I can access it is by saying
169:32
number grid.
169:34
and
169:34
the first thing I want to do is make an open and closed square brackets
169:38
and in here
169:39
I want to put the
169:41
index of the row that I want to access.
169:43
so this would be like row zero
169:45
because it's the zero of element in the array.
169:48
this would be row on its it and exposition one
169:51
this would be row to row three etc so I could put
169:54
roses grow
169:56
and now
169:56
right next to this I'm going to make another square bracket,
169:59
and I want to put the
170:01
index of the column so
170:03
this would be like column one
170:05
column to column three.
170:06
so
170:06
I'm going to put it another zero
170:08
because this is at the
170:09
zero
170:10
index
170:11
of this first
170:12
array so
170:13
I've
170:13
been zero zero here.
170:15
now we can print this guy out to the screen
170:18
and you'll see down here
170:19
that we get that one
170:21
so I can also do this for like for this eight for example so this is going to be
170:25
zero one two
170:27
can be row two and
170:29
column one
170:30
and now we should be able to print out that
170:32
e.
170:34
so that's basically how we can access elements inside of this
170:37
two d
170:38
list.
170:39
the next thing I want to show you guys
170:40
is
170:41
a
170:41
nested for loop
170:43
nested poorly with the situation in mega said well we have
170:46
a for loop
170:47
inside of a for loop.
170:48
and I'll show you how we can use this nested for loop
170:51
in order to print out all the elements inside of this array so I've basically shown you guys on a parse through
170:57
a
170:58
two dimensional
170:59
list or a two dimensional array.
171:02
so basically we're going to create a normal for loop so I'm going to say four
171:05
and I'm just going to say row
171:08
in
171:08
number grid.
171:10
and I'm using the word row here because
171:12
I'm kind of seeing
171:13
these guys as rows right these are sort of horizontal rows
171:17
in our little grid
171:19
so for each of those rows for each of the
171:22
elements
171:22
inside of number grid.
171:24
I want to loop through so I could actually just print out
171:27
each row right now
171:28
and it's going to print out all the rows inside of this
171:31
list you can see down here
171:32
we basically just get exactly what we have up there.
171:35
but I want to be able to access
171:37
each of these individual
171:39
attributes
171:39
inside of each of these
171:41
array elements
171:42
so
171:43
we can actually create another for loop and am I put that for loop inside of here,
171:48
so now I'm going to say four
171:51
column
171:52
in a
171:53
row.
171:54
and basically what this is going to give us is
171:56
each
171:57
individual
171:58
column or each individual
172:00
element inside of these
172:02
arrays
172:02
so for example inside of the arrays that are
172:04
the elements of the number grid
172:07
over that makes sense
172:08
so
172:08
down here.
172:09
now we can just
172:10
print
172:10
out
172:11
column
172:12
and this should actually print out
172:14
every single
172:15
value inside of this two dimensional array.
172:17
so let's go ahead and run this program.
172:20
and down here you'll see that we're basically printing out
172:23
one all the way down
172:24
to
172:25
zero
172:25
so we're printing out all of the
172:27
elements
172:28
inside of
172:29
all of the arrays inside of the number grid.
172:32
so that's how we can use two dimensional lists and
172:34
nested for loops together in both of those things
172:37
are actually pretty handy in python
172:44
in this tutorial I'm going to show you how to build a basic translator in
172:48
python.
172:49
so essentially we can
172:50
take in
172:51
a strings we can take him like a phrase or a word
172:54
and will be able to translate it into a different language.
172:59
so
172:59
over here I have this little file
173:01
and it basically specifies this language
173:03
that I made up so I'm calling it the draft language
173:06
and
173:06
in the draft language
173:08
all vowels
173:09
become
173:10
g
173:11
so if I was going to translate an english word into
173:14
a draft word
173:15
for example the word dog,
173:17
I would look through the word dog
173:19
and
173:19
any instances where there was a vowel
173:21
so
173:22
in our case let's just say
173:23
a e I o u.
173:25
I would convert that vowel
173:27
into a g
173:28
so dog would map to
173:30
ddg
173:31
cat would get mapped
173:32
into
173:33
c g t.
173:34
so those are the basic translation rules.
173:36
obviously this is a pretty simple language but
173:38
you get the point any vowel is going to become a
173:41
g and then we'll get
173:42
the draft language.
173:43
so we're going to build
173:44
a draft
173:45
translator
173:46
over here in our
173:48
python file.
173:49
let's
173:49
start making this translator the first thing I'm going to do is just define a translate function.
173:55
so I'm going to make a function here and I'm just going to call it
173:58
translate
174:00
and
174:00
inside of these parentheses
174:02
we want this to take
174:03
one
174:04
piece of information which is going to be
174:05
the phrase
174:07
that we want to translate so I'm gonna say
174:09
phrase
174:10
and now inside of this function we need to figure out like
174:13
ok
174:13
how can we translate
174:16
english into our draft language well remember
174:19
the rules is basically just
174:21
any vowels become
174:22
jeez.
174:23
so the first thing I want to do is create a variable
174:26
and this variable is going to be the translation so this will be like the final result that we're going to return to the user.
174:32
so I can say
174:33
translation
174:35
for now I'm just going to set it
174:36
equal to
174:37
the empty string so this is just going to be like
174:40
a completely empty string it's not gonna
174:42
be doing anything.
174:43
and
174:44
now what we want to do is we basically want to
174:47
loop
174:48
through
174:49
every letter inside of this phrase.
174:51
and
174:52
if it's a vowel we want to change it to g
174:54
and if it's not avowal we want to leave it alone
174:57
and
174:57
we're
174:58
essentially going to be looping through phrase.
175:00
and we're going to be adding the letters
175:02
onto this translation
175:04
one by one so make sure you guys how we can do this.
175:07
I'm going to make a for loop somewhere safe for
175:10
and I'm just going to say a letter
175:12
in
175:13
phrase.
175:14
and so now
175:16
when I looped through here I can access
175:18
each
175:19
individual letter
175:20
inside of the phrase that they passed in.
175:23
so what I wanna do is I want to check to see if
175:26
the letter is a vowel or not
175:28
right.
175:28
if it's a vowel than we can
175:30
add
175:30
a g onto translation.
175:32
if it's not available
175:34
then we can just add on whatever
175:36
letter it was onto translation
175:37
anyway so
175:39
many users
175:39
if statement I'm going to say
175:41
if.
175:42
and there's actually this special thing we can do in python we can check to see if something is in
175:47
something else
175:48
so I can say if
175:50
letter
175:51
inn.
175:52
and over here I'm just going to take out all the vowels that was a e I o u.
175:57
and
175:57
a e
175:58
I
175:58
o to you.
176:00
I'm basically checking to see if the letter
176:02
is inside of
176:03
this string
176:04
and if the letter is inside of here,
176:06
then we know that it's
176:08
a vowel so
176:09
down here we can handle that case
176:11
so I can say.
176:12
translation
176:14
is equal to
176:16
translation
176:17
plus
176:18
g
176:19
because
176:21
if
176:21
this letter is a vowel we just wanted to convert it into a g.
176:26
otherwise though
176:28
I can basically just say
176:31
translation
176:32
is equal to
176:33
translation
176:34
plus
176:35
letter.
176:36
so in the case where we have a vowel I'm adding a g onto
176:40
translation
176:41
and the case where we don't have a vowel.
176:42
I'm just adding on
176:43
whatever letter it was on to translation so
176:47
finally down below this for loop
176:49
we just want to return
176:51
the translation so I'm just going to say
176:54
return
176:54
translation.
176:56
and now we have
176:57
a
176:57
awesome translate function
176:59
and it should
177:00
probably work so
177:01
let's come down here and we'll test it out so
177:04
we only allow a user to input some information so
177:07
I'm basically going to call this function.
177:09
actually we're going to print it out so
177:11
we'll print this out and I'm going to call this function
177:15
translate
177:17
and
177:17
inside of here I'm actually just gonna
177:19
pass
177:20
whatever the user
177:21
inputs
177:22
so
177:23
I can just say
177:24
input
177:25
and
177:26
inside of these parentheses I can say the problem so
177:29
enter a phrase,
177:31
and so now
177:32
I'm basically combining all these statements together I'm saying I want to print
177:36
out
177:37
the translation
177:38
of whatever the user enters in.
177:42
so let's go ahead and run this program
177:44
and we'll see how we do
177:45
so
177:46
I'm gonna run the program
177:47
it says
177:47
enter a phrase actually let me
177:49
format this a little bit better.
177:52
okay
177:55
that's it says enter a phrase.
177:57
so let's go ahead and do that.
177:59
so
177:59
let's just type in
178:00
the example we use before him and say dog
178:03
and so now out pops the answer which is
178:05
d
178:06
g g.
178:07
so that's kind of cool.
178:08
and we can just keep running this as many times as we want so I could type only.
178:12
to be or not to be,
178:14
this is like a little bit longer of a string,
178:16
and you can see
178:17
it translates it into our
178:19
draft language.
178:20
so that's basically how we can
178:23
create our little a translator out and that's pretty cool.
178:26
as you can see we're using a for loop
178:28
in combination with an
178:30
f loop and that's a really powerful structure
178:32
and actually there's one place over here where we can
178:35
make this a little bit more efficient so
178:37
instead of saying
178:38
if
178:38
letter in
178:40
this string.
178:41
you'll notice here I'm checking to see if it's in
178:44
all the lower case and the upper case.
178:46
I could actually just say if
178:48
letter
178:48
dot
178:49
lower
178:50
in
178:51
and now I only have to type out the lower case letters,
178:54
and it's still going to do the same exact thing so
178:57
that's a little like
178:58
hack
178:58
or whatever that we could use
178:59
and there's also one more problem with this program so
179:02
you'll notice down here
179:03
we're setting the translation equal to the translation
179:06
plus
179:07
g.
179:08
but the problem is if
179:09
I was to start
179:11
my word inside of the phrase with a capital vowel
179:14
so in other words if I said like
179:16
on,
179:17
you'll notice that when this gets printed out,
179:19
it gets printed out as lower case g and
179:22
so it's not keeping our
179:24
uppercase
179:24
syntax
179:25
and that's kind of a problem so
179:27
we can actually use another if statement in here
179:29
and we could check to see
179:32
if
179:33
letter dot
179:34
is
179:36
upper
179:37
and if the letter is upper case
179:39
then
179:40
we can just set the translation equal to
179:42
the translation
179:43
plus
179:44
a capital g,
179:47
otherwise,
179:49
we can just set it equal to the lower case g.
179:52
it's a now we're able to control
179:54
both of those situation so
179:56
let's just test this and see if it works
179:59
and to rephrase
180:00
say on.
180:02
and now we're keeping that
180:04
capital letter so
180:05
those are just a couple different ways that we could make this program a little bit better,
180:09
but the basic concept is we have a for loop
180:11
and then we have some
180:11
if loops inside of it,
180:13
and we're calling this awesome function that can translate a word for us
180:21
in this tutorial I wanna talk to you guys about comments in python.
180:25
this is going to be a pretty short tutorial I just want to give you an overview of what comments are and how we can use them in our python programs.
180:32
so over here
180:33
in my python program I just have this line here it says print
180:36
comments
180:37
are fun.
180:38
so if I run my program
180:40
down here inside of the council it's going to print out comments are fun right,
180:45
so any code that I put over here is
180:47
going to get executed by python,
180:50
but there's actually a special
180:52
line of code that we can write
180:54
and it's called a comment
180:55
and a comment is basically a line inside of our python file that's just not going to get rendered by python,
181:02
so in python sees it as just going to ignore it it's not going to execute its not going to print anything out.
181:07
it's just gonna kind of ignore it and comments are
181:09
basically just used for us humans,
181:12
so a comment is used for like me or another developer to
181:16
write a little comment a little like plain tax dino comment inside of a file
181:22
nor retreat of
181:23
a comment
181:23
I could use this
181:24
hashtag symbol.
181:26
so in click hashtag and now I'm
181:28
writing a comment.
181:29
so I can write whatever I wanted in here I could say like
181:32
this
181:33
program
181:34
is cool
181:36
and
181:36
you'll notice when I run the program
181:38
that doesn't show up anywhere.
181:40
it doesn't matter what
181:42
I put off at halftime
181:43
this is just like ignore by python,
181:45
it's just for me or another developer to come in here and use.
181:49
so a lot of times you want to write like a little note
181:51
inside of your python files or maybe you can write yourself a little reminder.
181:56
or if you want to write
181:57
a line to lay explain a line of code
182:00
to for example
182:00
I can write a comment that would explain
182:02
this print statement sighted sailing
182:04
this
182:05
prints
182:06
out
182:06
a string
182:07
right
182:08
now anybody looking at my file would be able to read this and they'd be like,
182:12
oh that's what this does ok
182:13
cool
182:14
so comments are useful for
182:16
leaving little comments in a python file
182:19
you want to make
182:20
comments on multiple lines.
182:21
you can just create a new line and use another hashtag
182:24
and so that I could type out whatever my next comment was
182:27
I mean generally if you're gonna put comments on multiple lines you want to just use multiple hash tags
182:33
plot
182:33
there's actually another way that you can write out comments
182:36
so you can use a triple
182:38
quotation marks so I'm typing out these single quote
182:42
and I'm typing not three times
182:44
so you can see here,
182:45
up here we have this three times we have this three times.
182:48
so in here I can you know write any comment that I wanted so I can
182:52
put you know
182:53
as much taxed up here as I would want.
182:56
and
182:56
same thing when I run this program.
182:58
it's just not going to get rendered so
183:00
this is another way to make
183:02
multiple line comments
183:04
but the link official python like style guides or whatever
183:08
just recommends that if you're going to put comments on multiple lines you used these hashtags so
183:14
you know you can really do whatever you want but if you want to be like super
183:17
python official then
183:19
use these hashtags
183:21
comments can also be useful for
183:23
doing something called commenting out a line of code.
183:26
a lot of times when you're writing a program,
183:28
you might have a line of code in there
183:30
that
183:31
is maybe like potentially making stuff up.
183:34
and so what you can do is you can actually comment
183:36
out that line of code so
183:38
I can put a comment in front of this line of code.
183:41
and now when I run my program.
183:43
the program is going to run,
183:44
but it's not going to use
183:46
this line
183:47
so sometimes if you're trying to see if like a line of code is
183:50
causing you trouble or if you want to see what your program would be like without a line of code
183:54
or even like a block of code,
183:56
you can just commented out.
183:57
and that way you're not actually deleting the code
184:00
from your file
184:01
you're just commenting it out so pythons gonna ignore it,
184:04
and those are really the two uses for comments as to write little notes
184:08
right little comments about different things
184:10
or to comment
184:11
out code and
184:13
as you go forward and python
184:14
I'm sure you'll find uses for
184:16
comments
184:20
in this tutorial on a talk to you guys about
184:23
catching errors in
184:25
python,
184:26
and a lot of times when we're writing python programs
184:28
you'll encounter of an
184:29
error so different situations could come up
184:32
and your program might throw an error or it might throw an exception.
184:36
and a lot of times when these
184:37
situations happen though completely stop your program from running.
184:41
and what we can actually do is we can watch out for
184:44
you know a certain specific errors that are going to
184:47
pop up in our program and we can actually handle them.
184:50
so instead of our program just breaking and stop executing,
184:53
we can actually handle those errors and do things when they occur so
184:57
I want to show you guys an example of using this down here I'm saying number is equal to
185:01
its
185:02
input enter a number,
185:04
basically what's happening is I'm prompting the user to enter into a number
185:07
using this input command
185:09
and then I'm converting whatever they entered
185:11
into an integer.
185:13
so as long as they enter in like a valid integer I can convert it into an integer.
185:18
so I can convert it into like a whole number
185:20
and I can store it inside of this number variable
185:22
that I'm just printing it out so let's try to execute this program,
185:25
I'm going around the program
185:27
and you'll see down here it says enter a number,
185:30
so we can enter in like four for example
185:33
and when I answer in four everything's going to work and it's just going to print out four and
185:37
everything is right in the world.
185:38
and actually I'm going to modify this appears it's a little easier to see.
185:42
but what if we run the program again.
185:44
so it says okay enter your number.
185:46
let's say that I break the rules might don't enter a number so it is ignore what the prompts says and I put
185:52
you know
185:52
some random text in here,
185:54
now when I enter this
185:56
the program's going to throw an error,
185:58
you see down here it says value error
186:01
invalid
186:01
literal for ants
186:03
base
186:03
with basten
186:04
basically
186:05
paved and answering
186:06
an integer like
186:07
you said you would
186:08
write.
186:09
we told them to enter in a number
186:10
they entered in text
186:12
so it broke the program.
186:14
and
186:14
this is a situation that happens a lot so there's a lot of them in situations where something can just go wrong in our program.
186:20
and up until now we've just kind of accepted it as a reality
186:24
but
186:24
if you're writing a real live python program
186:27
you don't want something like this to trip up your program,
186:30
you don't want the entire program to break when somebody just forgets to enter in a number
186:34
right
186:34
you want to be able to handle all these different situations,
186:37
and
186:38
in order to handle them we can use
186:39
something called a try except block
186:42
in a try accept blog will basically allow your programs to try out
186:46
a piece of code,
186:48
and if everything goes well then we're great like
186:50
we could try out entering in the number
186:52
and if the user enters into correct number great,
186:54
but if they don't enter in the correct number then we can basically like
186:58
account for that so they entered it in something like a string when they're supposed to render in a number.
187:02
we could tell them like hey you entered in the wrong thing
187:05
so I'm sure you guys how we can use these try accept blocks are going to come up here
187:10
and I'm just going to say try
187:12
to make a colon.
187:13
and I want to indent.
187:14
both of these things.
187:16
so both of these things are going to be inside of this
187:18
try block.
187:20
now I'm going to make a new line I'm going to come down here and I'm just going to tape out
187:24
except.
187:25
and I'm also going to put a colon here,
187:27
and down here I'm just going to print something out so I'll just say like
187:30
invalid
187:31
input.
187:32
so now
187:32
since I put this code inside of this try block.
187:36
if the user enters in something wrong
187:38
it's going to be able to catch it so it'll be able to catch what the user does wrong
187:42
and print out
187:43
invalid input onto the stream.
187:45
so let's go ahead and run our program.
187:48
and it's just gonna say enter a number.
187:50
so we're going to ignore that will enter this end
187:53
and now instead of yelling at us in breaking the program
187:55
just says hey
187:56
invalid input.
187:58
so was able to handle the error they got called it was able to handle the invalid
188:02
input error
188:04
basically just told us hey
188:06
nowhere input.
188:07
so
188:07
this is a really powerful thing that we can do in our python programs
188:11
basically just to protect our programs
188:13
right
188:14
if I want to have my program running for long period the time
188:17
I can't have something as simple as an invalid
188:19
input
188:19
trip it up
188:20
so I can catch that invalid input using these try except
188:24
blocks.
188:24
but here's the thing you notice that this
188:26
little guy down here is getting
188:28
highlighted.
188:29
and let's just see what it has to say so it's basically saying
188:32
two broad exception clause.
188:35
and
188:36
this is a message that we're getting because when I just say accept
188:39
this will catch
188:40
any error under the sun so anything that can go wrong in my program for the most part
188:44
this is gonna accept it so
188:46
let me give you guys an example,
188:48
let's say I had in my program
188:50
I was creating a variable right so I'm
188:52
gonna
188:52
create a variable called
188:54
value and I set it equal to ten divided by the zero.
188:58
now if you know anything about math
188:59
you'll know that you can't divide a number by zero it's not possible.
189:03
so
189:03
the program
189:04
isn't going to be able to handle this and you'll see that this is going to throw an error for us.
189:08
so I run the program.
189:10
it basically says
189:11
zero division enter division by zero,
189:13
we're not allowed to do that right.
189:15
if I took this and I put this down and out of this try block.
189:20
and
189:20
I just pasted it in here,
189:23
it's going to get caught by this exception
189:25
that we wrote down here so it's going to get caught by that accepts and when I run the program
189:29
you'll see it says
189:30
invalid input.
189:32
but the problem is that we didn't
189:34
input something that was invalid
189:36
right
189:37
we just divided by zero
189:38
but it wasn't
189:39
able to handle that.
189:40
right so it could not divide by zero
189:42
it through an error.
189:43
so even though we didn't get an invalid
189:45
input even though it was because we divided by zero it's still printed this out.
189:49
and this brings me up to another point is we can actually catch
189:53
or we can accept
189:54
specific types of errors.
189:56
so for example
189:57
in this case we got a division by zero error
190:00
in this case we got
190:01
an invalid input air I we we
190:03
put something in that was wrong you
190:05
can convert the value.
190:06
so I can create two different except blocks to catch two different types of error so down here
190:12
I can just make a space and I can specify the type of error that I want to catch.
190:17
so when we divided by zero it was
190:19
zero division air.
190:21
so if I just put zero division error in here.
190:24
now it's going to catch that zero division later so I can say
190:28
divided by zero.
190:30
I can also make another accepts I could say
190:33
accepts
190:34
and
190:34
we can catch the other exception that we got so I think it was
190:38
a value air right now is
190:40
we put in the wrong type of value
190:42
inside of that
190:43
inputs so now we can print out
190:46
invalid input.
190:47
so
190:48
with these two except blocks were basically able to handle both of these
190:51
situations so
190:53
for example if
190:54
this ends up breaking the program this division by zero,
190:57
then it'll be able to catch that so down here it'll tell us.
191:00
hey
191:01
you divided by zero,
191:02
but if I was to get rid of
191:04
this line of code,
191:06
and
191:06
I just
191:07
entered in the number wrong
191:09
so I came down here and I answered in
191:11
a string set of a number.
191:12
now it's going to
191:13
tell us invalid input so
191:15
we're going to be able to specify
191:16
what happens when certain things break.
191:19
so when we get a valid it
191:20
when we get a value error we can say invalid
191:23
input.
191:23
when we get a zero division error we can say divided by zero and depending on what breaks depending on what happens,
191:30
we can actually
191:31
do different things,
191:33
and I want to show you guys
191:34
one more thing we can do which is
191:35
we can actually store
191:37
this
191:38
error as a variable.
191:39
so I can say except
191:41
I can say as
191:42
and I can type in a name here so a lot of times people will just say like.
191:46
ye are our
191:48
and down here
191:49
I can print out the actual error so I can just print
191:52
e r r.
191:53
and so if we end up dividing by zero.
191:57
so if I say answer is equal to ten divided by zero.
192:00
we're going to throw this error and it's going to print
192:03
out what went wrong so
192:04
now I can run this program
192:06
and it just says
192:08
division by zero
192:09
so it
192:09
just printed out
192:10
the error that we got.
192:12
so that's another useful thing you can do is you can actually print
192:14
out the specific error that got thrown.
192:17
now
192:18
a best practice in python is to use these
192:21
specific error so you always want to accept
192:23
and except for a specific
192:25
error
192:27
when you don't want to do is just say
192:29
except
192:30
and
192:31
then just accept anything under the sun.
192:34
it's this too broad
192:35
and
192:36
if not in good practice and pythons you wanna be catching specific errors like this
192:44
in this tutorial on a talk to you guys about reading from
192:47
external files in
192:48
python,
192:50
you know a lot of times in python you're going to want to
192:52
read
192:53
from files that are outside of your python file,
192:57
so you might want to read information from like a text file or a csv file or like an html file.
193:03
and
193:03
you can actually use something called the python
193:06
read command and it will allow you to
193:09
read a file
193:10
that is stored outside of your python file so you can use these files to get information or you can
193:16
parse through different files and do different things.
193:19
so I'm gonna show you guys the basics
193:20
of reading files
193:22
opening files closing files
193:23
doing all that stuff
193:25
over here I have this
193:26
file
193:28
called employees dot text
193:30
and it basically just lists out a bunch of different employees like
193:33
these can be employees in an office or whatever.
193:36
so it's just listing out all of this
193:38
information.
193:39
so let's say that inside of my app dot python file I wanted to read
193:44
the employees
193:45
inside of that file.
193:47
the first thing I have to do is actually
193:49
open that file from inside
193:50
python.
193:51
so I can use a special command
193:53
called
193:54
open.
193:55
so I can say open
193:56
and then
193:57
in here I can type in the name of the file that I want to
194:00
open so this is either going to be a relative path to the file.
194:03
an absolute path to the file or
194:05
just the files name if
194:08
both files
194:09
in the same directories on my case
194:11
app dot python and employees dot text
194:13
are in the same folder
194:15
within the same directory so I can just type out the name of the file liking to say
194:20
employees dot text.
194:22
and I want to put one more thing inside of this
194:25
open function,
194:26
and it's going to be the mode
194:27
that I want to open the file in
194:29
which you could actually open files in
194:31
a couple different modes
194:33
and the first mode is called read
194:35
so I just put an
194:36
r here and that's going to stand for a read
194:38
and this basically means that I only want to read the information inside the file I don't want to modify it I don't want to
194:45
change it.
194:45
I just want to read it I just want to see what's in the file and do some stuff without information.
194:50
another
194:51
mode is called right
194:52
so I can type in this w
194:54
and writing basically means that you can
194:56
change the file right you can write
194:58
new information you can change existing information.
195:01
there's another one called
195:02
a
195:03
and
195:03
a stands for a pen.
195:05
and it's basically means that you can
195:07
append information onto the end of the file so
195:10
you can't modify any of the information in the file.
195:13
you can't change any information
195:15
but you can
195:15
add
195:16
new information.
195:17
and there's one more which is
195:19
r
195:19
plus
195:20
and this basically means
195:22
read
195:22
and write so this will give you
195:24
all the power of reading and writing.
195:27
so in our case,
195:28
we are just going to be working with
195:29
regular are so we're going to be reading
195:32
from the file.
195:33
now this open function will essentially just
195:36
open
195:36
the
195:37
file so it's going to like
195:38
golden map file inside of our file system
195:40
opened it up
195:41
and it'll allow us to read through it
195:43
but generally we're going to want to store this
195:46
opened file
195:47
inside of a variable so
195:49
I can create a variable and we can just call it
195:52
employee file.
195:54
and I'm just going to set it
195:55
equal to this
195:56
open function.
195:57
so now the
195:58
open employees dot text file and
196:00
all the content inside of it
196:03
is stored inside of this
196:04
employee file
196:05
variable.
196:06
now
196:07
whenever you
196:07
open a file
196:08
you always want to make sure that you
196:10
close the file as well so
196:13
just like we have this open command
196:15
we also have
196:16
in
196:16
close
196:17
function so I can come down here and say.
196:19
employee
196:20
file
196:21
dot
196:22
clothes.
196:23
and
196:23
this is essentially just going to close the file so we're no longer going to be able to access it and
196:29
generally it's a good idea whenever you're opening up a file and you want to also make sure that your closing the file at some point so generally
196:36
once you're done reading it and you can just close it.
196:39
so that's kind of like how we can open and close the file.
196:42
now let's talk about how we can get information from the far right
196:45
there's no point having the file that we can't figure out what's in it
196:48
so
196:48
there's actually a few different functions that we can use
196:51
on this employee filed to figure out what's inside of it.
196:55
and I'm gonna show you guys
196:56
some of those so I'm just going to make a print statement.
196:58
and
196:59
inside this print statement will basically just print out some information
197:02
about the employee file so
197:05
the most basic thing we can print out is just the entire
197:08
contents of the file.
197:10
but before I do that I want to show you guys how you can check
197:13
to make sure that a file as readable.
197:15
so before we do anything else generally is a good idea to make sure
197:19
that it's possible to read this file.
197:21
and there's
197:22
a function
197:23
inside of python we can use called
197:25
readable so I'm just going to type out
197:28
in poorly file
197:29
dot
197:31
readable.
197:32
and
197:33
this is going to return a boolean value and it's going to tell us whether or not we can read from this file so I'm going to run my program
197:40
and you'll see down here we get a value of true
197:43
and that's because we set the file with
197:46
a read
197:47
mode so it's in read mode we can read from it.
197:49
if I was to put
197:50
a w here so if I put like right
197:53
now
197:53
redouble is going to be false because we can no longer read the file we can only write
197:58
to the file so
197:59
I'm going to
198:00
change this back to our so we can just read it.
198:03
so once you figure out whether or not the file can be read from
198:07
let's
198:08
actually read it so
198:09
there's another function called employee file dot read and this is basically just going to spit out all the information in the files
198:15
so when I run the program
198:17
it's just going to spit out
198:18
all of this
198:19
information right all the information isn't that was in that file.
198:23
I can also come down here and we could read an individual line inside this file so I can say employee filed dot
198:29
read line.
198:30
and what this is gonna do is it's gonna read an individual line
198:34
inside of this file so
198:36
now when I run this program you'll see it's just reading that first line in the file.
198:41
and this red line function is actually just
198:43
reading the first line and then it's basically like moving a little cursor onto the next line so
198:48
if I was to copy this line of code,
198:51
and then
198:52
printed again down here
198:54
I'm saying employee filed out read line.
198:56
so it's going to read the first line
198:58
and then when I say it again it's going to read
199:00
the line after that so this is actually going to end up printing out the first two lines in the file.
199:06
when I run this program you'll see we print out jim sales men
199:09
and dwight salesman.
199:10
so if I was to do this multiple times I could technically print out
199:15
every line inside of this file.
199:18
and you can see we can do that
199:20
and so that can be pretty useful for reading multiple lines in a file but there's actually another function that is better at doing that.
199:27
we can say instead of employee father
199:29
read line we can say dot read
199:31
lines.
199:32
and what this is gonna do is it's going to take
199:34
all of the lines inside of our file
199:36
and put them inside of an array.
199:38
and so now when I print this out you'll see we have this array down here it says
199:42
jim sales men that's the first item in the array
199:45
to white salesman
199:46
the second
199:47
item in the array.
199:48
it's basically taking each line and putting it inside of an array.
199:52
so if I want to access a specific line
199:54
I can just refer to it by its index in the array so if I said one.
199:58
now this is going to give us that
200:00
do white salesmen line
200:02
because that is at index position one inside of the array.
200:06
you can also use this reliance function
200:08
with a for loop
200:09
so I could come up here and create a for loop
200:12
is going to save four
200:14
and we'll say
200:15
employee
200:16
and
200:17
employee file
200:19
and then for each employee we just want to print them out so
200:22
it actually started
200:23
we have to put employee file dot
200:25
read
200:26
lines up here
200:27
and so now there's a loop through all the employees
200:30
in this employee filed out read lines array.
200:33
so we can actually just
200:34
print out
200:35
the individual employee
200:37
and now this will print out all the employees
200:39
inside of that files is basically printing out
200:42
each line in the file.
200:44
and that can be pretty useful.
200:46
so you can use all of these different functions like read read line read lines
200:51
readable you know there's a bunch of these different things that we can do to get information from a file.
200:56
and so there's a lot of cases where you're going to want to be able to parse through information in a file and this is a
201:01
awesome way to do it so
201:03
just to recap in whenever you want to open a file and read from it you can just use this
201:07
open function
201:08
type in the name of the file and then the mode,
201:10
which in our case is going to be r.
201:12
then you can do all sorts of stuff with it and you always want to make sure that
201:15
you close it when you've done that's just good practice so
201:19
that's the basics of reading from files and hopefully you guys can
201:22
use this in some way shape or form in the future.
201:29
in this tutorial on to talk to you about writing and appending to files in
201:34
python.
201:35
so one of the cool things about python is it allows you to work with
201:39
external files so I could have like an external text file and
201:42
I could actually like completely
201:44
read all the information in it I could pass through it
201:47
use that information to do certain things,
201:50
but it isn't a reading a file I can also write a file and that's what I want to talk to you guys about today's writing new files and appending onto existing files
201:59
over here I basically just have some code written out
202:02
and this essentially just
202:03
reads information from this employee's dot text file so you can see over here,
202:08
I am specifying the mode which is
202:10
r and that stands for read
202:12
and then down here under his reading
202:14
all of the contents of the file and spitting it out on the screen.
202:17
so I'm gonna click the play button over here,
202:19
and
202:20
you'll see that
202:21
if this executes so it's printing out
202:23
all of the
202:24
lines of code in our text file so over here I'm in this employee's dot text file
202:29
and it just has all this information like
202:31
employees in an office.
202:33
but let's say that I wanted to add another employee onto here
202:37
right ?
202:37
let's say that
202:38
a new
202:39
employee joined our company is that we wanted to add them onto this list.
202:42
well
202:43
I can come over here to my app dot python file
202:46
and
202:46
instead of
202:47
reading from the file
202:48
I want to
202:49
append it to the files I want to say
202:51
a
202:52
and appending to the file basically
202:54
basically means that you're adding
202:56
some text
202:57
at the end of the file so
202:58
wherever the file ends you're just going to add some text
203:01
onto there.
203:02
so what we can do is we can actually add another employee into the file.
203:07
so
203:07
instead of printing something
203:08
out I'm actually just going to say.
203:12
employee
203:12
file
203:13
dot
203:14
right.
203:15
and when I say employee filed out right I'm going to be able to write something to
203:19
the end of the file so
203:21
I can basically does right whatever I want so why don't we add in another employee
203:26
into our employees dot text file so we can add in another employee why don't we say like
203:31
toby.
203:32
and he's going to be in
203:33
human
203:34
resources.
203:36
so now
203:37
when I run this program.
203:39
it's going to add
203:40
toby human resources onto the end of the file somewhere on my program.
203:45
and
203:46
you'll see that nothing shows up down here in the council.
203:48
but if I go over to my employees dot text file.
203:52
all of a sudden
203:53
we have a new entry over here it's
203:55
toby
203:56
from human resource is right so I was able to
203:58
append a line onto the end of this file.
204:02
but here's the thing you need to be careful when you're writing to files because you can actually mess up a file
204:07
very easily
204:08
for example
204:09
I already added toby here into my file.
204:12
but if I was to run this program again,
204:15
you'll see that over here in this employee's dot text file
204:18
it when I hadn't
204:19
added toby again
204:21
right so it added this employee here
204:23
again
204:24
and also you'll notice that in this case,
204:26
these employee didn't go onto the next line
204:29
I accidentally ran my file again and all the sudden it messed up
204:33
this file over here
204:35
and so appending you really need to be careful because if you actually go under file again or have you
204:39
you know,
204:40
append something on something wrong to the file it's permanently it's getting saved inside of the file.
204:47
so I want to talk to you guys are a little bit more about you know
204:49
appending another thing we can do let's say we wanted to add another
204:53
employee
204:54
and you'll notice over here in this employees that text file
204:57
when I appended it on again
204:59
it got appended
205:00
to
205:00
the end of the existing line right
205:03
so the first time I had
205:04
a new line there but if you don't have a new line at the end of your file
205:08
and you all and you want to add a new line,
205:10
you're going to have to add some special characters
205:12
so let's add another employee
205:14
and we'll call her
205:15
kelly,
205:16
and let's just say kelley is in
205:22
customer service so
205:23
kelly is going to be in customer service.
205:25
and if I want to add
205:27
this employee onto the end of the file in a new line I'm going to have to put a new line character in front of it so I can say
205:34
backslash
205:34
n
205:35
and this will upend
205:37
this entry
205:38
into the file
205:39
with a new line so on a new line so now when I run this,
205:42
you'll see we get kelly from customer service
205:44
on her own line.
205:46
so you want to make sure that you're aware of like these special characters that you can use they call them
205:51
escape characters
205:53
and you're in time you're audi onto a file you want to make sure that you're adding on exactly where you want to add on.
205:58
so in addition to appending to a file.
206:01
I can also just like
206:03
overwrite a file or I can
206:04
write
206:05
an entirely new file.
206:07
this is as we already have this open instead of appending to the file.
206:10
why don't we just write
206:12
a file so I'm going to use this
206:13
w.
206:15
and now
206:16
if I say employee filed out right
206:18
because I'm using w and I'm not using
206:21
a,
206:21
it's actually going to
206:22
override
206:23
the entire file and it's only gonna put this inside the file so
206:27
when I run this
206:28
and we go over to this employee's dot text file
206:31
you'll see we only have one line inside of this file now it's just
206:35
kelley customer service.
206:37
that's because I was using double you
206:39
not
206:39
a when you use w it's just
206:41
overwriting everything that's in that existing file.
206:45
you can also use w to create a new file
206:47
so over here I could say employee file as he could to employees
206:51
one
206:52
dot text.
206:53
and now what's going to happen is when I run this it's going to create another file for me song in a run this
207:00
and
207:00
you'll see over here in my file browser.
207:02
we have this new file employees one dot text
207:06
so if I open this up.
207:07
it has exactly the same stuff as in this employees file,
207:10
but it basically created a new file for us and so a lot of times you're going to want to create a new file,
207:16
and you can use different extensions to so if I wanted to create like a web page
207:20
I could say
207:23
index start
207:23
each tier mel
207:25
and I could also add in some
207:26
each team malcolm here so
207:28
if you don't understand html don't worry about it but
207:31
if you do I can put like
207:32
a paragraph in year
207:34
another paragraph like
207:36
this is
207:37
html
207:38
basically ht mouth like a webpage.
207:40
and
207:41
the point I'm trying to make is that you can write out a webpage
207:43
inside of python by doing something like this so
207:46
now when I have played this
207:47
we get this
207:48
index style
207:49
html file.
207:50
and it has some
207:52
html inside of it so
207:54
that's one way that writing to files can be really useful you can
207:57
overwrite
207:57
an existing file,
207:59
you can write a new file and create it,
208:01
or
208:02
you can append onto the end of a file and
208:04
there's
208:05
tons of applications for writing to files and pythons and great language for
208:09
working with reading writing
208:11
doing all itself with files
208:16
in this tutorial on its altea guys about using modules in python.
208:21
now a module is essentially just a python file that we can
208:25
import into our
208:26
current python file so
208:28
for example if I wrote a python file that had a bunch of like useful functions are useful variables are you know other things like that.
208:36
I could take that file I could
208:38
import it into the file I'm currently working on
208:41
and I could actually access
208:42
all of those functions
208:43
all those variables.
208:44
all the stuff from that
208:46
external file
208:47
inside the file that I'm currently
208:49
working on so
208:50
I'm sure you guys how we can use module and then we'll talk about like
208:53
you know where you can find awesome modules and and really why modules make python and
208:58
awesome
208:59
language,
209:00
so over here in my text editor actually created this file and it's called
209:04
useful tools
209:06
dot python
209:07
and basically this file just has a bunch of
209:10
sort of like useful tools that I might want to use in one of my progress,
209:14
she'll see over here I have some variables this one is telling me how many feet are in a mile.
209:20
this one's telling me how many meters or a kilometer.
209:23
and then we have this list here which lists out all of the
209:26
members of the beatles,
209:27
am I also have a couple different functions down here so I have this get file extension function.
209:33
and this
209:34
basically just was
209:35
you know you give it a file name it'll tell you what the extension is,
209:37
and then we have this other function down here which
209:40
simulates rolling the dice
209:41
so you pass it a number
209:43
bypass it like a six it would roll a six sided dice
209:46
a passive
209:46
nine at roland nine sided dice etc
209:48
so
209:48
this is like a pipe on file that I wrote.
209:51
and it has some useful stuff in it,
209:52
and honestly there's a lot of stuff in here that I might want to use in the
209:56
other python files that I work with,
209:59
so let's say I'm over here at this
210:01
app
210:01
dot
210:01
python file and I'm thinking to myself,
210:04
ha,
210:05
I think I could use one of those functions
210:07
that was inside of that useful tools file
210:10
actually yeah
210:10
I need to
210:11
simulate rolling the dice in my program
210:14
well instead of having to go over here
210:16
copy this
210:17
function and then
210:18
paste it over here in my program
210:20
I can actually just
210:21
import
210:22
this
210:23
useful tools file
210:24
and I'll be able to import all of these functions and all of these
210:28
variables and attributes.
210:30
so the way I can do that is by coming up here
210:32
and I'm just going to go right at the top of my
210:34
file and I'm just going to say.
210:36
import.
210:37
and then I want to type in the name of the file that I want to import it so I was going to say,
210:41
useful underscore
210:43
tools
210:44
and pythons going to be smart enough to know that it should go off and
210:48
grab all the stuff from this useful tools dot
210:51
pi file
210:52
so once I've used that important statement
210:54
I can actually use all of the functions
210:57
inside of that useful tools file.
210:59
so
211:00
for example I could simulate rolling the dice I could say
211:03
useful tools.
211:05
dot,
211:06
and now I'm actually able to access
211:09
all of the attributes from inside that file so when I say useful tools dot
211:13
you'll see down here and my little suggestions menu it's telling me like beetles feet miles
211:18
get file extension meters and kilometers roll dice.
211:21
so it's giving me access to all of the stuff that was in that file so over here I could just say like
211:28
roll dice and we could pass this like a ten will roll a ten sided dice.
211:32
and
211:33
now this should actually
211:34
be able to run that function so
211:36
will simulate rolling a ten cited diet as you can see we got four
211:40
and
211:41
this is a really core concept in python which is
211:45
importing
211:46
functionality from
211:48
external python
211:49
files and this is like
211:50
huge in python and this is seriously going to change the way that you create your
211:55
python files
211:56
so
211:57
you'll notice like
211:58
I didn't have to
211:59
copy any functions or any variables or anything
212:03
over into this file and yet I was able to use
212:06
all this stuff that was inside this useful tools
212:09
file
212:09
so that is huge and honestly,
212:12
it's going to save you a lot of time because you can write something once and then you can
212:15
import it into your other files.
212:18
so that's really the basics of using modules mean modules are very simple module as any external python file
212:25
that you want to use some stuff inside of it.
212:27
I want to show you guys
212:28
a
212:29
place where you can go to find a huge list
212:32
of modules so
212:34
I'm going to go over here my web browser.
212:35
and
212:36
among this website
212:37
it's actually like the
212:39
official python docks
212:41
and basically all I did to get here was just typing
212:43
list of python modules and google,
212:45
and depending on the version of python you're using you're gonna want to make sure that you click the right one.
212:50
I flicked on the version three one
212:51
and over here on this page
212:52
you can see there's just a huge list
212:55
of python modules,
212:57
and these are basically modules inside of python
212:59
that you can just access so
213:02
essentially there's like
213:03
all of this awesome code that's
213:05
already been written for you and so if there's some sort of functionality that you want have inside of your python program,
213:11
chances are
213:12
there's a module in here
213:14
that has that functionalities of
213:16
all sorts of stuff
213:17
you can do I mean if you just look through this list like
213:19
you'll see a huge collection of
213:21
basically just
213:23
you know a bunch of
213:23
either python variables are python functions just
213:26
you know
213:27
things that you can use to make your programs better.
213:30
so
213:30
here's what I would recommend like
213:32
head over to this page and
213:34
to sort of look through a lot of these different module is no see what you can see
213:38
and honestly like
213:38
if you click on one of them it'll bring you to a page that
213:41
talks about like how to use they'll tell you like
213:44
how to import it and just you know
213:45
some basics about it
213:48
and this is sort of like the list
213:49
that on the official
213:51
python docs
213:52
but
213:53
he's using
213:54
the python community is huge there's tons of developers who use python.
213:59
and you can actually find a lot of third party modules so if you just go online and you know
214:04
look up like python module for doing actual
214:07
python module for doing why
214:08
chances are somebody out there has already written a python module to do what you're trying to do so.
214:14
if you get good at using modules and you get good at you know looking for them in finding them
214:18
you can actually save yourself a bunch of time because
214:21
chances are that somebody is already written a module to do
214:24
you know
214:25
what you're trying to do are like
214:26
part of what you're trying to do.
214:28
so now that we've taken a look at all these different python modules
214:31
I wanted to kind of dive in a little bit deeper into how we can actually use these things so
214:37
you'll notice here there's a lot of files right there's a lot of different modules that we apparently have access to in python but the question is
214:45
where all these files store
214:47
right
214:48
when I was over here in my program
214:51
for example I was using this useful tools
214:53
dot pie fire like
214:54
I knew where that was I created that file.
214:57
I was directly involved in making it
214:59
and I just imported over here it was pretty easy right ?
215:02
but what about all of these files
215:05
right
215:05
what about all these modules over healy
215:07
where all of these stored
215:10
and there's basically
215:11
two types of models here there's built in modules which means they're just built into the python language so
215:17
we can't just automatically have access to them.
215:19
and there's no
215:20
external modules
215:22
and
215:23
a lot of these external modules
215:25
are just stored in
215:26
basically the same
215:27
folder that we installed python on our computer so
215:30
for example let's look at a couple of these right we have on linking
215:34
base sixty four
215:35
bd be
215:37
been ascii like
215:38
if I come over here,
215:40
and you'll see I'm over here in milo file explorer I have my
215:44
python project which is draft.
215:46
there's also this other folder over here called
215:49
external libraries.
215:50
if I was to click down on this
215:52
and I come down here
215:53
you can see it's just
215:54
the version of python that I'm
215:56
amusing.
215:57
there's a folder here called lab
215:59
and this is a very important folder and this is basically storing all of those
216:03
external modules so you can see if I scroll down here
216:07
we have all of these different
216:09
like modules right
216:10
so here's that base sixty four hears bd be right.
216:14
a lot of these external modules are stored
216:17
inside of this lib folder and
216:19
like is that there's no external modules there's also a few modules that are just like a built in
216:23
modules
216:24
that are not can be stored inside of here
216:26
and you can actually tell so
216:28
for example if I was to come over here and click on
216:30
base sixty four.
216:32
it tells me where the source code
216:34
so the source codes in lab forward slash
216:37
base sixty four.
216:38
we are able to see that right how is I saw that inside of my lib folder
216:43
this been ascii though for example if I click on this,
216:46
you'll notice that this
216:47
isn't
216:48
giving me a folder cause this is basically just like built in to python so we don't have to worry about
216:54
you
216:54
lucky enough I'll just kind of like
216:56
it just how it works.
216:57
so some of these are external some of them are built in.
217:00
and
217:00
I want to show you guys
217:01
are
217:02
in addition to using these modules races.
217:05
there's a lot of good stuff here and honestly you could spend.
217:07
you know for years and years just learning about all these different modules.
217:11
but a lot of times you're going to want to use modules that
217:14
other people have written
217:16
and
217:16
you know
217:17
there's a lot of
217:18
developers
217:19
who work on python and who write different modules so there's a lot of useful modules either that aren't included
217:25
in this list right they're not going to be inside of this lib
217:28
folder
217:29
by
217:29
default.
217:31
and what we can actually do is
217:33
we can install those external module is as third party modules
217:37
that don't just come
217:39
preinstalled with python,
217:40
and I'm sure you guys haven't do that really quick so
217:43
the first thing you need to do obviously is find
217:45
a python module that you wanna installed you can download
217:49
and I have actually used one in the past.
217:52
python docs it's an
217:54
external module that you can use to
217:56
basically use python to create where documents which is pretty cool as you can like
218:00
format where documents inside of it so I'm just going to look that up here
218:04
in google.
218:05
I'm just gonna type in python
218:07
docks
218:08
and
218:08
here's a thing there's tons of these
218:10
extra modules you don't have to use python dogs.
218:13
I'm just giving you guys an example
218:15
but really it he just look up like
218:17
useful third party python modules there's going to be lists of hundreds of these things online
218:22
or in my case though
218:23
python docs has a website
218:25
and it basically just
218:26
has like some installation instructions are gonna come over here
218:29
and it tells me that I can install python docs using the command pip
218:34
install python docks.
218:36
so this brings us to
218:38
something I want to talk to you guys about which is a
218:39
pip
218:40
and pip
218:41
is essentially a program
218:44
and actually if you have a newer version of python three it comes preinstalled with python three
218:49
and you can use pipe to install python modules.
218:53
it's referred to as
218:54
a
218:55
package manager
218:56
and a package manager basically just allows you to like
218:59
install manage
219:01
update and uninstall like different python
219:04
modules
219:05
so pip
219:05
is extremely useful.
219:07
and in order for us to install python docs we're going to have to use pip
219:11
somno sure you guys are how we can do that,
219:14
but what I want to do is open up the
219:15
command prompt or the terminal on my computer.
219:19
if you're on a mac you wanna open up your terminal.
219:21
if you're on a windows computer you want to open up your command prompt
219:24
I'm using a windows
219:25
right now,
219:26
so I'm just going to come down to the search bar and type a and c m d
219:29
and this command prompts you to come up so I'm gonna click this
219:32
inside of the command prompt we can actually use
219:34
pip
219:35
firstly we want to do is check to make sure that pips install
219:38
and like I said if you have a newer version of python three pictured calm just
219:42
pretty installed
219:44
and it should do some work in here if you don't have a newer version of python three though,
219:48
you might have to install
219:50
pip
219:50
separately
219:51
and there's tons of instructions online and how to install pip.
219:54
so I'm just going to check to make sure that I have
219:56
to type in
219:57
pip
219:57
haven hyphen
219:59
version,
220:00
and they should spit out the version of pip
220:02
that I currently have.
220:03
so as long as we have to
220:04
pip
220:04
then we're ready to install an
220:06
external or third party
220:08
python
220:09
module.
220:10
all I have to do is just say pick
220:12
install
220:13
and now I just want to type in the name of the python module so in the case of python docks.
220:18
it was just
220:20
python dogs like that.
220:21
now again
220:22
you don't have to install python dogs
220:23
I'm just doing this for
220:25
this tutorial just going to show you guys
220:27
how this is going to work.
220:28
but you know
220:29
what you want to do is go online and look up some
220:32
third party external python modules,
220:34
and generally like
220:35
I'd say ninety to ninety five percent of the time
220:38
you're going to be able to just install them using pip.
220:40
in the off case that you can't install them using pip,
220:43
chances are they'll be like some detailed installation instructions but out say
220:47
for the most part any late
220:48
legitimate
220:49
python
220:50
module is going to be able to install using pip.
220:53
so
220:54
over here to understand a pip
220:55
install and add a module name so
220:58
python hyphen docks
221:00
and when I click enter this is going to go off and install python dogs for ourselves,
221:04
we
221:04
enter
221:05
and it's going to go off and install everything we need for python docs.
221:10
so you can see we have
221:11
successfully installed python docks
221:14
zero point eight point six,
221:16
so
221:16
I'm sure you guys
221:17
where exactly this god
221:19
placed so
221:19
normally when we install
221:21
a
221:22
external
221:23
third party module.
221:24
it's going to get put inside
221:25
this limb folder.
221:26
but it's gonna get put inside of a special folder in here called
221:30
site packages
221:31
so slight packages is a special folder and if I open this folder,
221:35
you'll see now we have this
221:37
docs folder and we also have this
221:39
python dark zero point eight point six
221:42
pi three points sakes thought eg info folder so
221:45
these two folders
221:46
are basically
221:48
included in that module installation so
221:50
you can see this docs folder has a bunch of different python files and
221:54
has a bunch of stuff in here that we can use.
221:57
so if I wanted to use this inside of one of my programs
222:00
I'm just going to refer to the name of the module so in our case,
222:03
it's just going to be docks.
222:05
so I used python docks
222:07
in order to install it but
222:08
we're going to use docs if we want to import it so
222:11
I could come up here and I could say
222:13
import
222:14
deal c x.
222:15
and
222:16
now I can actually use it so I can just say like docs dot whatever and you can see there's a bunch of different stuff down here.
222:22
there's like a document,
222:23
document part image part there's a bunch of stuff that we can
222:26
use with this and obviously
222:28
depending on the python
222:29
module you install
222:30
there can be different instructions.
222:32
but you can see it
222:32
got stored down here in this
222:34
site packages folder.
222:36
if I wanted to remove this
222:37
I could use
222:38
pick to do it so I could just say tip
222:42
and install and we could just
222:45
again saying
222:46
that a module names of
222:47
python dogs
222:49
and people now
222:50
and install this
222:52
on our computer.
222:53
so if I was to go back
222:54
over to this
222:55
folder,
222:56
you'll see that those two
222:58
that docs folder and then that
222:59
other
223:00
folder disappeared so they're no longer here,
223:03
and I'm actually not going to be able to use this anymore so
223:07
that's sort of the ins and outs of using
223:09
modules now again
223:11
there's tons of these modules and
223:13
I can be dozens and dozens of python
223:15
courses covering each one of these modules,
223:17
you know
223:17
the built in modules the
223:19
modules that are included by default and
223:22
external modules.
223:23
there's tons of these things out there
223:25
and really as a python programmer now what you can do is you can go out and play around with these different modules.
223:31
I showed you the ins and outs of installing them and you can use pip
223:35
to install all these different modules
223:37
and you know you can make sure that you have owned by checking the site packages folder or the lips folder
223:42
but really now it's on you to just come and go out and
223:45
use these modules and don't shy away from this because modules are a huge
223:50
part of python
223:51
you're definitely going to want to include them in your python stack.
223:58
in this tutorial on a talk to you guys about classes and objects in
224:03
python
224:04
classes and objects are
224:06
extremely useful in python programming and they can help you to make your programs
224:11
more organized and more powerful.
224:14
so
224:14
when we're in python we're dealing with all types of data
224:17
right
224:18
and a lot of times when we're writing programs we're going to have to work with different types of data
224:23
and there's essentially like a few basic types of data we can deal with usually things like
224:27
string cilic plain tax
224:29
numbers and boolean values those three are kind of like
224:33
the main types of data that you're going to be working with in
224:37
python and we have all sorts of structures we can use to store that data you know
224:40
things like lists or dictionaries.
224:42
but here's the problem
224:43
is that
224:44
not
224:44
all
224:45
information not all data not all things
224:48
can be
224:49
represented using
224:51
strings numbers or bullion's right,
224:53
there's a lot of
224:53
things in the real world that we can't represent in automating a string or an array,
224:58
or just a number right
225:00
in other words something like think of like something like a phone
225:02
or a computer
225:03
or a person
225:04
right you can't really represent those things
225:07
in like a string or a number you know it
225:10
in other words like
225:11
the data types that we have available to us in python
225:14
can't cover that.
225:15
and so what we can do with classes and objects is we can essentially create our own
225:21
data types.
225:22
so I can create my own data type for anything I want
225:25
python so
225:26
I could create like a phone data type
225:28
and it could represent a phone so I could store all the information I would ever want to know about my phone
225:33
inside of that data type in
225:36
and python we could create a class for it and
225:39
essentially what a classes is just saying hey
225:41
here's another data type that we want to use in python.
225:44
so with a class you can essentially define
225:47
your own
225:48
data type and its
225:49
super awesome and classes are extremely useful
225:53
causes are used in almost every single major programming language out there so
225:57
in this tutorial I just want to
225:58
give you guys a basic introduction of
226:00
classes and using them inside of python so
226:03
let's say that I'm writing a program,
226:05
and I want to
226:07
represent
226:08
a student
226:09
inside of this program so maybe I'm writing a program for like a college or a university.
226:13
let's say that in this program
226:14
I want to
226:16
model a student
226:17
like I want a model a real world objects and I wanted to be a student
226:21
right where we don't have a student data type
226:23
and I can't really represent a student in just a single string or a number.
226:28
so I can actually do is I can create a class
226:32
for a student and I'm basically creating like a student data type.
226:36
so I'm sure you guys how we can do that and create our student class
226:40
it's over here.
226:41
I'm just gonna make a new file.
226:43
wouldn't we get a new pipeline vase I'm just going to call it student dot pie
226:48
and
226:49
inside of this student dot pi file I want to create
226:52
a student class.
226:54
so the way that I can do that is just by typing
226:56
class.
226:58
and now I'm gonna type
226:59
the name of the class
227:00
that I want to create.
227:01
so in our case we are going to create a class called student so I'm just gonna say student.
227:06
and now we're going to make
227:06
a colon
227:08
now everything that goes inside of here
227:10
is going to be inside of our student class so
227:13
everything that's invented like this
227:15
will be considered a part of our
227:17
student
227:18
class
227:19
and basically what we can do inside of this student class is we can define a bunch of attributes
227:24
about a student.
227:25
so essentially what I'm doing is unlike modelling
227:27
a student I'm creating our student data type.
227:31
and I can use things like strings,
227:33
integers and bullion's
227:35
in order to
227:36
map
227:36
out what a student should be in what a student should have.
227:40
so I want to create something called an initialize
227:43
function.
227:44
and the way I do that as just by
227:46
typing out a d e f
227:47
and I was going to take
227:48
two underscores,
227:50
and then the word
227:51
I am I t
227:52
and then two more underscores,
227:55
and
227:55
you also want to type out
227:57
open close parentheses
227:58
and inside of those parentheses we want to type out
228:01
self,
228:02
and I'm on a colon after that.
228:04
what I can do inside of this initialize function
228:07
as I can basically map
228:09
out
228:09
what attributes a student should have
228:11
so we can essentially define like
228:13
hey,
228:14
here's the student data type
228:16
in
228:16
python
228:17
so what I want to do is add in
228:18
certain attributes
228:20
after this self so I'm just gonna say self
228:22
a comma.
228:23
and now we can start thinking about
228:25
you know
228:26
what values will
228:27
represent a student inside of our
228:29
python programs so
228:31
if I'm thinking lake
228:32
unthinking something like name
228:34
right so every student
228:36
in our programs should have a name.
228:38
they also might want to have a major
228:40
because they're in college,
228:42
they probably also will have a gps,
228:45
so their grade point average like
228:46
how they're doing in school
228:48
and lets to find one more thing that let me think,
228:51
why don't we make
228:52
a bullion
228:53
and it's going to be called
228:55
is
228:55
on
228:57
probation
228:58
and this will basically tell whether or not the student is on
229:01
probation.
229:03
so
229:03
essentially what I'm doing inside of this
229:06
initialize method inside of this
229:07
innate function is
229:09
I'm defining what a student
229:11
is
229:11
in our program.
229:13
and so in this program
229:14
a student
229:15
has a name,
229:16
it has a major
229:17
as a gps,
229:18
and it has a value that determines whether or not it's on probation.
229:21
this right here is the student data type.
229:24
so if I'm representing a student inside of my program now,
229:28
it has all of these attributes
229:30
associated to it.
229:31
and that's basically what I'm doing up here
229:33
now
229:34
inside of this initialize
229:36
function we actually have to do something and
229:38
basically what I want to do is
229:41
assign some values
229:42
so I'm going to be writing out some stuff and this might not make
229:45
total sense
229:46
right now.
229:47
but this is going to make sense in a second after we create our first
229:51
student
229:52
object.
229:53
so
229:53
just stick with me right now and just basically
229:56
know that we have to do what I'm doing over here so I'm just going to say self dot meme
230:00
is equal to name.
230:02
and then I'm going to say self dot major
230:04
because you get the major
230:05
self dot gps
230:07
is used
230:07
the gps.
230:08
and I'm going to say self dot
230:10
is
230:11
on
230:13
probation is equal to
230:15
is on probation.
230:16
so again
230:17
this might not make a whole lot of sense
230:19
right now
230:20
but
230:20
in a little bit
230:21
this is gonna make
230:22
total sense
230:23
so
230:23
now that I have this student class defined
230:26
I can actually use this class
230:28
inside of my other file so
230:31
I'm gonna come over here into this app
230:33
dot python file.
230:34
and this is just my main file.
230:36
so I actually want to create
230:37
a student right so
230:39
in that student class we defined
230:41
the student data type and we basically said like hey a student has a name,
230:46
a major a gps and
230:47
it says whether or not they're on probation
230:49
dots like the template for what a student
230:52
is,
230:53
but we can
230:53
actually create
230:55
a student so we can
230:56
create an actual student and give it some information.
231:00
and that's called an
231:01
object.
231:02
so
231:02
this
231:03
student class over here
231:05
is basically defining what a student
231:07
is
231:08
so a class is just like
231:09
an overview of what the student data type
231:12
is
231:12
an object
231:14
is an actual student
231:15
so it's an actual student with a name a major and a gps.
231:19
it's not just this template anymore it's
231:21
actually like a student that we're representing inside of our program so
231:26
in order to use that student class and create a student
231:30
object I actually need to import that so
231:33
all I have to do over here just say
231:35
from
231:36
student
231:37
and this is referring to this
231:39
student file.
231:41
I can say
231:42
import
231:43
student
231:45
and basically what this is saying is from the student
231:48
file.
231:49
I want to import the student class.
231:51
so even though these are both student they're referring to different things so this is referring to the file.
231:56
and this is referring to the actual student class.
232:00
so now that we did this we can create a student so
232:02
you can create an
232:03
object of a class
232:05
a lot like you would a normal variable so
232:07
I can just give it a name
232:08
I'm gonna call this
232:10
student one
232:11
and I'm going to set it equal to
232:13
student
232:14
and I'm gonna make an open and close parentheses
232:17
and now
232:17
inside of this parentheses.
232:19
I want to give this student
232:21
a name,
232:22
a major
232:23
a gps
232:25
and ann
232:25
is on probation
232:27
value.
232:28
so I'm going to say it will just create a fake student saw to say his name's
232:31
jim
232:32
and he's studying
232:34
business
232:36
and
232:37
we want to give them a gps and maybe has like a three point
232:40
one.
232:41
and
232:41
finally we want to say whether or not this student is on probation so why don't we say false.
232:46
so basically what I'm doing is I'm
232:48
saying that I want to create
232:50
a student.
232:51
so I want to actually create a student
232:53
object and rubber an
232:55
object
232:55
is just
232:56
an
232:56
instance
232:57
of a class.
232:58
so the class is like an overall template it defines what a student is
233:03
put an object
233:04
is an
233:04
actual student with
233:05
actual information so
233:07
we could call student one now
233:09
this is a student
233:11
objects.
233:12
so I just want to show you guys,
233:13
what this student object actually is and what we can do with it and then I'm going to talk some more about that
233:18
in it function
233:19
from before so
233:21
over here I'm just going to
233:22
make a print statement
233:24
inside of here I just want to print out
233:26
student
233:27
and
233:28
what's cool about
233:29
this
233:29
student one object is I can actually access
233:33
each of the attributes from inside of this object.
233:36
so if I wanted to get the name of the student I could say student one dot name
233:40
and now
233:40
this is actually going to print
233:42
out the student's name.
233:43
so over here,
233:45
you'll see it prints out
233:46
jim
233:47
if I wanted I could print out the students
233:49
gps
233:50
and it's going to print out the students
233:52
gps
233:53
three point one.
233:54
so now that I created this
233:56
student
233:56
objects.
233:57
I can actually access the information about the student
234:01
so essentially I'm just created a student
234:03
data type
234:04
so I could create as many of these students as I wanted if I wanted I could create another student we could call it student too.
234:11
and
234:12
essentially we do the same thing we just give it different information so
234:15
we could say lake
234:16
pam
234:17
and her major is
234:19
art
234:20
and she has like a
234:21
two point five.
234:23
and let's say that she is on probation.
234:26
so now I have another student student too so if I wanted
234:30
I could access information about that student we could say like student to dodgy p a
234:35
and now this has given me
234:36
the dpj of
234:37
student too.
234:38
so basically what I did was I created a student data type
234:42
and I created student objects
234:44
and now I'm able to represent a student
234:46
inside of my program.
234:48
so
234:48
let's talk real quick about all this stuff over here because I didn't really explain it
234:53
basically what's happening is
234:55
when I come over here and I say student
234:58
and I'm passing in all of these different values.
235:01
those are getting passed into this
235:03
init function.
235:05
so remember I passed in a name
235:07
I passed in a major at passing a gps.
235:09
when we create that student
235:11
we're actually calling
235:13
this function.
235:14
and when I pass in the name
235:16
the major and the gps
235:17
those values are actually getting stored over here in this name.
235:21
this major this gps
235:23
et cetera,
235:24
right
235:24
so I'm
235:25
giving this
235:26
student object.
235:28
all of that information.
235:29
and down here.
235:31
what I'm doing
235:32
is I'm
235:32
saying
235:33
self dot name
235:35
as he put the name
235:35
and basically what this means is
235:37
the actual objects name
235:39
is going to be equal to the name that they passed in
235:42
so self dot name as an attribute
235:45
of student,
235:46
raises the student is storing a name the student is storing a major the student is storing and gps,
235:51
but that's different from
235:53
this name
235:54
this major in this gps
235:56
remember and these are all just values that I passed in
235:59
there just parameters.
236:01
so I need to take the values that I passed in
236:04
and I need to assign them to the actual attributes of the object so I need to say
236:09
ok.
236:10
the name of the student is going to be equal to the name that we passed in
236:14
one more time.
236:15
the name of the student
236:17
objects
236:18
is going to be equal to the name
236:19
that we passed in
236:21
the name of the student's major,
236:23
is going to be equal to
236:24
the major that we passed in
236:26
the student's gps
236:28
is going to be equal to the gps that we passed in.
236:31
that's basically what's happening here so when I say self
236:35
is referring to the actual object so
236:37
over here what I'm creating this
236:39
student object.
236:41
I'm giving it all of this information.
236:43
it's taking that information and storing it as attributes
236:46
for
236:47
the object.
236:48
so
236:49
hopefully that makes sense I think that's about as clear as I can make it but
236:52
the point is that now we have a student
236:55
data type.
236:56
so now I can represent a student
236:58
inside of my
237:00
python
237:00
program
237:01
and that's like a super powerful.
237:03
and what's cool about classes and objects as you can do this with anything.
237:06
so in this example we created a student class and then we created student objects off of that.
237:12
but I can model
237:13
any real world entity
237:15
into this program I can model something like a phone
237:18
or I can model like
237:19
a water bottle
237:20
or I can model
237:21
you know
237:22
a keyboard
237:22
or I can model anything that I wanted.
237:25
inside of my program
237:26
I can just give it certain attributes right
237:29
so that's what's cool about classes we can model real world objects.
237:32
and we can create our own
237:34
data types
237:40
in this tutorial I'm gonna show you guys
237:41
how to build a multiple choice quiz in python.
237:45
so basically we're gonna
237:46
set up a little multiple choice quizzes and we'll have the user take the quiz and as they take the quiz
237:52
will keep track of their score and then at the end will tell them how they did so
237:56
this is going to be a pretty cool video I'm excited to show you guys how to do this and we'll get to use things like classes and
238:02
if statements
238:03
and loops
238:04
in order to build these programs are we're going to use a lot of cool
238:07
stuff in python.
238:08
the first thing I want to show you guys
238:10
actually did this before I started the video it's
238:12
this little a ray is called question prompts.
238:15
and I basically just wrote out all the questions that are going to be.
238:19
or I should say the questions I wrote out all the question prompts
238:23
that are going to be inside of my multiple choice quiz so the first one just says
238:27
what color are apples and the answers are
238:29
red,
238:30
purple or orange.
238:32
and the next one is
238:33
what color of banana is the options are
238:35
teal magenta and yellow,
238:38
and the third question is what color are strawberries and the
238:41
options are yellow red and blue so this is obviously a very very easy multiple choice quiz but
238:47
I just kind of
238:47
wrote out the questions beforehand so I didn't have to spend time doing that.
238:51
so let's talk about how we can build
238:53
a
238:53
multiple choice
238:55
test.
238:56
well.
238:56
the first thing I want to think about is how can I represent the questions in the test
239:00
right
239:01
over here we have the question prompts.
239:03
but there's actually two parts to a question when you think about it,
239:07
there's the prompts in other words like
239:09
the
239:09
actual question itself.
239:11
and then there's the answer to the question in both of those attributes needs to be
239:16
kept track of
239:17
right
239:17
I need to keep track of what we want to ask and I need a cap to keep track of what the answer is.
239:21
so what I'm actually going to do is create
239:23
a
239:24
question class
239:25
so I'm gonna create a little data type for questions
239:28
and inside of that question class will be able to store
239:31
the question prompts,
239:33
and will also be able to store the question's
239:35
answer,
239:36
so I'm just gonna come over here to my folder and I'm going to make a new
239:40
python file
239:42
and we're just going to call this
239:43
question
239:44
dot
239:45
p y so we'll call a question up high
239:48
and inside of this question dot pi file I'm going to make a class so I'm just gonna say class
239:53
question.
239:54
and I'm going to put a
239:55
colon here.
239:56
so inside of this
239:57
question class we want to define it and initialize
240:00
function so
240:01
I must say deaf
240:03
to underscores
240:04
in it
240:04
too underscores,
240:06
and
240:06
then we're going to type out an
240:08
opening close parentheses
240:09
self
240:10
and that a colon.
240:11
so after this self we wanted to find the different attributes
240:15
that will describe or that will
240:17
be included in a question so
240:20
we're going to include a
240:21
prompt
240:22
everyone to include an answer so every question we'll have a question prompt
240:26
and a question answer
240:28
now down here I'm going to take those values and assign them
240:31
to
240:32
the actual
240:33
class objects only to say self
240:35
dot
240:36
prompt
240:37
is either the prompt.
240:39
and I must say self dot
240:40
answer is equal to answer.
240:42
so now we have a question class set up and we can store all the information we need
240:47
about a question.
240:49
so what I want to do now is go back over to my app dot python file,
240:54
and we're actually going to create an array of questions.
240:57
so I have over here these three prompts,
241:00
and I'm actually just going to create another array so we'll just call it
241:03
questions.
241:05
and I'm going to set it equal to
241:07
to open or closed square brackets
241:09
and we're gonna start creating question
241:11
objects so I can just say
241:13
the first element in this questions ray will be a
241:16
question,
241:17
and we want to pass
241:19
questioned prompts
241:22
zero.
241:23
and the answer to the first question was
241:26
a
241:26
red green and that's the color of apple so I'm gonna pass
241:29
that first question.
241:30
and I'm also going to pass
241:32
the answer which is a,
241:34
and you see down here I'm getting an error so
241:36
seeing unresolved
241:37
references
241:38
question
241:39
so actually what we need to do before we can
241:41
create these questions is we need to import this question class on mckillop been here
241:46
come up here and say
241:47
from
241:48
question
241:49
import
241:50
question
241:52
so now
241:53
down here in this questions array we're
241:55
not getting that hair anymore so we created one question objects.
241:59
and I'm just going to
242:00
create a couple more for
242:01
these other ones
242:02
so
242:04
I'm just going to copy this one
242:05
and
242:05
we will pace this down here,
242:10
or it's an hour creating
242:11
two other questions in these ones are going to be
242:14
one and two.
242:16
and the answer to the second question is
242:18
c.
242:20
and the answer to the third question I think is that the
242:23
new york
242:25
yeah
242:25
so it's
242:26
cmb.
242:27
so essentially what we're doing is we're creating
242:29
three questions.
242:30
each one is getting a different question prompts,
242:33
and they're each getting different answers so now we have an array of questions that we want to ask
242:38
on our test.
242:39
so the next step is to actually write a function that will run the test right
242:44
it has to ask these are the questions and it has to check to see
242:47
if they got the answer right so
242:49
down here
242:50
lower in the file
242:51
let's create a function.
242:53
so I'm just going to say
242:53
death.
242:54
we'll call this run
242:55
test
242:57
and
242:57
inside of his prentices
242:59
were going to take one parameter into this function.
243:02
we're going to take
243:02
a list of questions so
243:05
I'm just going to say questions.
243:07
so this is basically going to be a list
243:09
of question objects that we want to ask the user.
243:12
so once I've been here
243:13
all I want to do is a loop
243:14
through all the questions so
243:16
I want to loop through each question
243:18
I want to ask it to the user.
243:20
I want to get the user's answer and I want to check to see if it's right,
243:24
and we need to be able to keep track of how the user does through the test so I'm gonna create a variable called score
243:30
and I'm going to set it equal to zero,
243:32
so every time the user answers a question right will increment this
243:36
score
243:37
variable
243:38
right so what I want to do is like I said loop through all the questions in that questions array so I'm going to create a for loop
243:44
I'm going to say for
243:45
question
243:47
in
243:48
questions.
243:50
so in other words for each question object
243:52
inside of this questions array.
243:54
I want to do something.
243:56
and
243:57
basically the first thing I want to do is ask the user the question
244:00
and I want to store their response inside of a variable.
244:04
so I'm going to say
244:05
I wanna make a variable down here called
244:07
answer.
244:08
and this is going to represent the
244:10
user's answer to the question.
244:12
and I'm gonna
244:12
set it
244:13
equal to
244:14
input
244:15
and I need to give this a prompt
244:17
so
244:18
I'm actually going to give this the prompt for the questions I can just say
244:22
questioned dot
244:23
prompt.
244:24
so now I have
244:25
the answer that the user entered in which is stored inside this variable.
244:29
so we want to check to see if they got the question right.
244:32
and I can do that using an
244:33
if statement so I can say
244:34
if
244:35
answer
244:36
and this refers to the student's answer
244:39
is equal to
244:40
question dot
244:42
answer
244:42
so I'm checking to see if the answer that the student
244:44
gave
244:45
as equal to the answer of the current question
244:48
that we're
244:48
asking.
244:49
and if this is true,
244:51
then I just want to
244:52
increment score so I'm going to say score
244:55
plus
244:55
equals one and this basically just means we're adding one
244:58
to the score.
244:59
so the last thing I want to do inside of this function is just
245:02
print out
245:03
the results I want to print out how the user did
245:06
so down here I'm just going to say,
245:08
print
245:08
and I'm basically just going up are not like hey you got like
245:11
two out of three questions are you got five out of six questions right
245:14
or you got zero out of ten questions right well
245:16
what does per not how they did so
245:18
to say to you got.
245:21
and now I want to print out how many questions they got right
245:24
so this is just going to be this score.
245:26
and in order to print
245:27
a number alongside of a string like this I'm going to have to say s t r,
245:31
and then type in the number so say
245:33
str score
245:35
so basically say you got
245:36
however many they got right
245:38
out of so we use this little
245:40
forward slash.
245:41
and
245:43
now we'll just say
245:44
how many questions there were so we can say.
245:46
and then I'm going to have to convert this to a string because it's going to be in numbers we can say string
245:51
and then want to figure out how many questions were in that questions array so I can say.
245:55
ellie ann
245:56
and inside of here we can just say
245:57
questions
245:58
so this is kind of like
245:59
this
245:59
long state and just to turn out how many questions that were
246:02
so that over here to say
246:04
correct.
246:06
so now we have this print statement.
246:09
and it's just going to be printing out how many questions they got right.
246:13
so let's see if
246:14
this works the last thing I need to do is just call this
246:17
run test function so I'll say
246:19
run tests.
246:20
and I'm just going to pass it that
246:22
questions are ready to be created before so
246:25
we created this questions array with all of these question
246:28
objects inside of it.
246:30
I'm basically just going to pass that into this run test
246:33
function.
246:34
so now let's run our program and
246:36
see how we didn't hopefully
246:37
we don't getting errors.
246:39
there's a lot of code there so
246:40
it's possible that we might.
246:42
okay so this is what color are apples has a tough one I once put
246:46
a.
246:46
so we'll get the first question right ?
246:48
what color are bananas.
246:49
let's get the second question wrong
246:51
so I'm going to say
246:52
be bananas aren't magenta
246:55
and we'll get the third question right so it says what color are strawberries
246:58
output be cassettes the right answer,
247:01
so now
247:02
you'll see that our program prints out
247:04
you've got two out of three correct.
247:06
so not only did to ask us all the questions and get our input for each question
247:10
but it also kept track of
247:12
our score and it printed it out so
247:14
why don't we run through the tasks one more time.
247:17
and
247:17
we'll just like
247:18
get two wrong this time so we'll get this one wrong I'll get this one wrong and I get this one right.
247:23
so now it says
247:24
you got one out of three correct so
247:26
say would actually great our test.
247:28
and
247:29
what's cool about the program we just wrote is
247:32
if I wanted I could add another question into here
247:35
and it would
247:35
automatically be able to ask it so it doesn't matter how many questions we put in here
247:41
it's just able to ask
247:42
so
247:42
really the point I was trying to make with this whole video was just how we can use something like a class
247:48
in order to
247:49
model a real world
247:51
entity.
247:52
so for example
247:53
we created this question class.
247:55
and we were able to store all the information
247:58
about a question that we could ever needs were ill bizarrely the prompts and the answer,
248:02
so we created our own question
248:04
data type
248:05
and then we were able to create a bunch of different questions,
248:08
pass it into this ron test method,
248:10
and it was able to grade the test and just run the test
248:14
really easily so that's kind of the point.
248:16
so hopefully this makes sense.
248:18
you know this was a lot of code
248:19
so if you don't fully understand what I did go back watch the video you know,
248:23
try to cobble times on your own and see if you can create your own multiple choice test
248:31
in this tutorial on talks you guys about
248:33
class functions
248:35
in
248:36
python so
248:37
a class function is essentially a function that we can use
248:40
inside of a class and it can
248:42
either modify the objects of that class where it can
248:46
give a specific information about those objects.
248:48
over here I have this student dot pi file
248:52
and
248:53
inside of here I created a student class I was headed class student
248:57
and I gave this student
248:58
a couple of different attributes I gave it a name,
249:01
a major and a gps
249:03
so I can give this student.
249:04
all of this information so when I create a student objects.
249:07
it'll have
249:08
all of that information
249:09
in it.
249:10
now over here on this
249:11
app dot pi file it actually created to students
249:15
so
249:15
student one is
249:17
oscar who was studying accounting and has a gps unit three point one
249:21
student to as phyllis who's studying business
249:24
and she has a three point
249:25
e.
249:26
so
249:27
what we can actually do is we can
249:29
use functions inside of these class files so I can actually define a function
249:35
instead of this student class and then all of my
249:38
student objects could access it.
249:40
so for example,
249:41
I can come down here and create a function and
249:44
let's say we wanted to create a function
249:46
that
249:47
told us whether or not this particular student
249:49
had honours
249:50
so whether or not they were on the honor roll right
249:53
basically like,
249:54
are they like a really good student
249:56
so I can define a function
249:58
call
249:58
on
250:00
honor roll
250:01
and
250:02
basically what it's going to do,
250:04
it's going to tell me whether or not this particular student is on
250:07
the honourable
250:09
and
250:09
let's basically just say the rules are being on honor roll is you have to have a
250:13
gps iif
250:14
three point five or above.
250:16
so here gps three point five or above that means you're on the honor roll
250:20
well
250:20
over here I could actually
250:22
write the code for that so I could say
250:24
if
250:25
self dot gps.
250:27
and when I say self over here
250:29
this is referring to like
250:31
the actual students gps
250:33
and you'll
250:33
notice over here I have to pass that in
250:36
as a parameter.
250:37
and that always has to be the first parameter so I could say if
250:40
self dot j e p a
250:42
is greater than or
250:43
equal to
250:44
the read point five.
250:46
then we can return
250:48
true
250:49
because this student
250:50
is on the honor roll
250:53
otherwise
250:54
an else
250:55
we can just return
250:57
false because
250:59
if their gps
250:59
isn't above a three point five that
251:01
they're not on
251:02
the honor roll.
251:03
so
251:04
that's essentially our little on honorable function and you can see it's a very small function,
251:08
but it provides
251:10
a service to the objects of this class right
251:13
it allows
251:13
the objects of this class to
251:15
figure out whether or not that current student is on the honor roll so
251:19
over in this app dot pi file.
251:22
I could just print
251:24
out that values so I could say
251:25
print
251:26
and I'm gonna see if
251:28
student one
251:30
is on the honor roll.
251:32
so
251:33
now when I run this you'll see it should print out false
251:37
and is putting out false
251:38
down here
251:39
because student one only has a gps
251:42
of
251:42
three point one.
251:43
if I was to do the same thing on student to
251:46
students who has a gdp of three point
251:48
eight
251:49
so we should return true.
251:51
and that's exactly what happens so
251:53
essentially a
251:54
class function is just a little function that can be used by the objects of the class and I would say this is a pretty good example of
252:02
what a class function should be doing
252:04
should be like giving us information about the class or it could also be like modifying information about the class.
252:10
and so that's the basics of using functions and classes I mean this is a pretty simple tutorial but
252:14
I really just wanted to introduce you guys to the concept
252:17
of
252:18
pudding
252:18
met functions
252:19
inside of classes this is going to be really useful and
252:23
if you're making a class you always wanna think about like what functions can I put inside of here
252:27
that will
252:28
you know essentially
252:29
healthy user to either figure out information about the object
252:33
or
252:33
modify different values in the objects
252:40
in this tutorial on antarctic guys about inheritance
252:43
in
252:43
python.
252:44
inheritance is basically where we can define a bunch of attributes and functions
252:50
and things inside of a class,
252:52
and then we can create another class and we can inherit all of those
252:55
attributes.
252:57
so I could basically
252:58
have one class that has
252:59
all the functionality of another class
253:02
without having to physically write out any of the same
253:05
methods or attributes.
253:07
so it that's confusing don't worry I'm
253:09
sure you guys exactly what this is
253:11
in this video so
253:13
let me show you about some stop I have set up over here.
253:15
I created this class
253:17
called
253:18
chef
253:19
and over here we just have this class chef.
253:21
and inside of this chef class we have three functions
253:25
so the shaft can do three things.
253:27
the chef can
253:28
make
253:28
chicken.
253:29
the chef can
253:30
make solid
253:31
and the chef can make
253:33
a special dish.
253:34
and whatever the chef makes a dish
253:36
he basically just says
253:37
the chef makes a chick in order the chef makes
253:40
a salad
253:41
or the chef makes barbecue ribs for this special dish.
253:44
so basically just
253:46
saying whatever the chef is doing so
253:48
if I was to come over here to my app dot python file,
253:51
you'll notice that I'm importing the
253:53
chef
253:54
so I'm basically
253:55
allowed to use this chef class now,
253:58
and I can say
253:59
my chef is equal to shafts I'm creating a new chef.
254:02
so now if I came down here and I send my
254:05
chef
254:06
dot
254:07
make
254:07
chicken,
254:09
when I run my program.
254:11
now it's going to say,
254:13
the chef makes a chicken.
254:14
if I said
254:15
make
254:18
special dish
254:20
and are on the program.
254:21
now it's going to say the chef makes barbecue ribs so it because that's the chef's
254:25
special dish.
254:26
so I have this really awesome chef class and it works really well.
254:29
but let's say that I wanted to create another class
254:32
to model another type of chef
254:35
rise to this
254:36
chef class is just modelling like some generic schafroff
254:39
we're representing some generic chef
254:41
in our program,
254:42
but let's say that I wanted to create
254:44
a
254:45
class that modeled the different type of chef
254:47
for example,
254:48
let's say we wanted to create a class that modeled a chinese chef.
254:51
so instead of just a normal chef this is a
254:54
chinese chef,
254:55
well I actually created a file over here called
254:57
chinese chef dot python.
254:59
so we can actually use this
255:02
chinese shaft out python file to create our chinese
255:05
chef
255:05
class
255:06
tom's going as a class.
255:08
and over here I'm just going to say
255:10
chinese chef
255:11
and
255:12
basically
255:14
I just can define everything that the chinese chef can do,
255:17
but let's say that
255:18
our chinese chef
255:20
can do
255:21
everything that are generic chef can do.
255:23
so the chinese chef is like a special
255:25
schafroff it's very specific type of chef.
255:28
but let's say that this chinese chef
255:30
can do everything that the normal chef can do so the chinese chef can make chicken
255:34
can make salad,
255:36
and can also make
255:37
a special dish.
255:38
well if I wanted to give this
255:39
chinese chef,
255:40
all of that functionality.
255:42
I could just come over here and I could copy all of these
255:46
functions.
255:47
and I can paste them in here
255:50
and so now the chinese chef can do everything
255:52
that the other chefs can do,
255:54
but let's say that in addition to all of these things the chinese chef
255:57
can also make
255:59
a special dish called fried rice
256:01
so I could say
256:02
deaf
256:03
and we could say make
256:04
fried rice.
256:06
so
256:07
the chinese chef has this extra
256:09
function which allows it to make fried rice.
256:11
and over here we just say,
256:13
the chef makes
256:14
fried rice.
256:16
and let's also say that
256:17
the chinese chef has a different special dish so instead of making barbecue ribs.
256:22
the chinese chef makes
256:23
lunge
256:24
chicken.
256:25
all right so now we have our chinese chef class set up
256:28
and you'll notice that it can do everything
256:30
that
256:31
the normal chef could do.
256:33
so let's go back over to our app dot python file and I want to create
256:36
a
256:37
chinese chef
256:38
object.
256:38
so
256:39
instead of importing from chef
256:41
we're going to just import it from chinese chef.
256:44
so I'll say
256:46
chinese chef
256:46
and we're going to employ for
256:48
chinese chef.
256:49
so let's go ahead and make
256:51
a chinese chef
256:52
object
256:53
sit down here I'm going to make one arrow to say
256:56
my.
256:57
and then
256:59
my chinese chef.
257:00
we can print out this special dish so
257:03
remember the chinese chef can do
257:04
everything that the normal chef could do
257:06
so if I say my chinese chef da
257:08
make special dish.
257:10
when I run this program you'll see
257:12
the
257:13
regular chef is making barbecue ribs and the chinese chef is making orange
257:17
chicken
257:18
so everything works out.
257:19
and this chinese chef also has an extra method called make
257:24
fried rice.
257:25
and
257:26
you can also
257:27
make
257:27
fried rice.
257:28
but here's the problem right when I go over here to this
257:31
chinese chef dot pie.
257:33
I went I wanted to use all of the functionality that was inside this
257:37
chuffed class
257:38
I actually had to copy and physically paste.
257:42
all of these functions down
257:44
into this file right
257:45
and that's kind of a drag.
257:47
and they especially like imagine if this chef had like
257:49
twenty or thirty of these different functions in it.
257:52
we have to copy and I have the pace.
257:54
all of those inside of this chinese chef
257:57
and this is where we can use something called inheritance
257:59
so instead of having to copy and paste
258:01
all of these functions.
258:03
I could just inherit these functions
258:05
from that
258:06
chef class
258:07
and in order to do that,
258:08
I can actually just get rid of all of these,
258:11
and I can come over here
258:12
and
258:13
right next to where I'm saying class chinese chef
258:16
inside of the parentheses I can say the name of the class that I want to inherit from so I can just say a chef.
258:22
and I'm also going to have to import this song to come over here and we'll say
258:27
from
258:28
chef
258:30
in poor
258:31
shelf.
258:32
so basically what this is saying is
258:34
inside of this chinese chef.
258:37
I want to be able to use all of the functions that are contained
258:40
inside of the chef class
258:42
so say that one more time
258:44
inside of this chinese chef class
258:46
I want to be able to use all of the functions that are inside of this
258:49
chef class
258:50
so
258:51
by using inheritance here
258:53
I'm actually able to come over here to this anecdote pi file.
258:57
and now
258:58
I'm still able to execute for example like
259:00
the make
259:01
chicken
259:01
function.
259:03
even though I didn't specify the make chicken function in here I didn't write it out.
259:08
I can still run this program
259:10
and the chinese stuff.
259:12
the chinese chef will still be able to make
259:14
chicken.
259:15
so when I run this program
259:17
you'll see it out here it says
259:18
the chef makes chicken
259:20
and that's because I inherited the make chicken method
259:24
from
259:24
the chef class
259:26
but here's one thing
259:27
that
259:28
got my stuff
259:29
if I come over here and I say make
259:31
special dish.
259:32
remember the chinese chef
259:34
special dish was supposed to be orange chicken.
259:37
but now
259:37
the chinese chef is going to be making barbecue ribs
259:40
because
259:41
I inherited
259:43
this makes special dish
259:44
function
259:45
from this
259:46
chef class
259:47
is what I can actually do is I could come in here and I could
259:50
override
259:52
that
259:52
make special dishcloth
259:53
so I could say
259:54
death
259:55
make
259:56
special dish.
259:58
and down here
259:59
I can just
259:59
override it so I could say,
260:02
the chef
260:02
makes
260:04
orange
260:05
chicken
260:06
and now
260:07
when I go over here and I run
260:09
this
260:10
make special dish
260:11
function.
260:12
now the chefs are going to be
260:13
back to making orange chicken so the chinese chef will make his
260:17
special dish.
260:18
so that's
260:19
basically what inheritance does it allows me to inherit
260:22
functionality from an existing class into the new class.
260:26
and
260:27
I can actually just inherit all of it without having to write it out so I didn't have to write out
260:32
make
260:32
chicken and make solid inside the chinese class,
260:36
but
260:36
the chinese chef
260:37
can still make
260:38
chicken and salad because it inherited that functionality from the chef class
260:46
in this tutorial I wanna talk to you guys about the
260:48
python interpreter.
260:50
the python interpreter is basically a little environment that we can use to execute python
260:57
commands.
260:58
so it's kind of like this little sandbox environment where we can test out and try out different
261:03
python commands are different python functions
261:06
in a very safe and neutral environment.
261:08
so it's kind of like a quick and dirty way to write python and try different things out.
261:13
the way we use the python interpreter is by opening up
261:16
opening up our command prompt.
261:18
now if you're on windows there's a program called command prompt
261:22
if you're on mac there's a program called
261:24
terminal.
261:25
basically you need to open
261:27
that program in order to use the python interpreter,
261:30
so I'm here on a mac
261:31
but if you're on a window as you can
261:33
essentially do exactly what I'm doing just
261:35
inside of the command prompt.
261:37
so on mac here I'm just going to search for
261:40
my terminal.
261:41
if you're on windows you can just search for like cmd or command prompt in it should pop up,
261:46
so the terminal is
261:49
basically an environment
261:51
on our computer where we can
261:52
interact with the computer and do different things
261:55
without a graphical user interface so normally when we interact with the computer
262:00
we're using things like buttons or you know windows and you know what we can move stuff around we can
262:05
you know basically just like
262:07
interact with the computer.
262:09
with graphics
262:10
with the terminal or the command prompt
262:12
is a place where you can interact with the computer using text commands.
262:16
so you know am I going to get too much into
262:18
what the terminal the command prompt dog but that's essentially what it is.
262:21
so inside of here,
262:23
we can use the python interpreter
262:26
and the python interpreter is basically just a little program
262:30
that like I said and we can write
262:31
you know sort of python
262:32
in
262:33
so generally,
262:34
all you have to do is go over to your terminal or your command prompt
262:37
and type in
262:38
python
262:39
three
262:40
and since we're using python three on monotype python three.
262:44
but you can also just like normal python and I'm pretty sure that gives you python two.
262:49
now here's a quick disclaimer.
262:50
I'm
262:51
on windows,
262:53
you may run into a problem
262:55
where
262:55
you can't use this python three command,
262:58
and it's possible that
262:59
if you're running into that problem
263:01
python
263:02
python three hasn't been added to your windows
263:06
path variable.
263:08
and basically what that means is your computer doesn't recognize the command
263:11
python three
263:13
and that's the case
263:14
all you have to do is just go and google
263:16
how to add python three to your windows path variable.
263:19
it's really easy I'm not going to get into it in this video just because it's kind of
263:22
outside the scope
263:23
but
263:24
if you're running into that problem.
263:25
that's probably it's not on your windows
263:27
path variables such as google around for that and you should be able to find an answer,
263:31
but onsite python three and then click enter
263:34
and it's going to open up this cool thing down here so
263:37
you can see it basically just says like here's the version of python.
263:41
now
263:41
I'm
263:42
going to enter so we can have some like
263:44
new lines here
263:45
and
263:47
put down here this is the python interpreter so we can write
263:50
python code in here and it's going to work so I could
263:53
for example I could write like
263:54
print
263:55
and inside of here I could print like
263:57
hello world.
263:59
and
263:59
when I click enter
264:00
you'll see that it prints out
264:01
hello world.
264:02
I could create a variable so for example I can say like number one
264:06
is equal to ten.
264:07
I can say numb two is equal to ninety.
264:10
and then I could print
264:11
out number one
264:13
plus
264:13
none too
264:15
and it's going to be able to do that for me ?
264:17
I could also use awesome like a function so I can define a function in here,
264:21
we can make a function that is called say hi and it'll take a name parameter.
264:27
and
264:28
you'll see here when it saw I wanted to create a functional
264:31
put these three little dots
264:33
and I can index in and we can write the code for a function so I can say like
264:37
print
264:39
hello
264:42
last name.
264:45
and now I have a function called
264:47
say hi so I can break out of this by this entering again
264:50
and I would call the function so I could
264:52
say
264:53
say
264:54
hi
264:55
and we'll say out of me.
264:57
I'm like
264:58
so now it's going to say
264:59
hello mike
265:00
so I can use a function I could use something like an
265:02
if statement
265:02
you know
265:03
I could say,
265:05
I can easily afford the wicked use while loose.
265:08
I mean we can basically use all of the basic like python commands and you know
265:12
inside of this python interpreter and like I said before.
265:16
it's essentially just an environment where you can test
265:18
out
265:18
python code.
265:20
now this is not a place where you want to write
265:22
like any serious python
265:24
scripts
265:25
so if you're like designing and writing a python program
265:28
I would not recommend
265:29
doing it inside of this interpreter ?
265:31
it is,
265:32
it's not a very intuitive environment it's pretty much just set up for some quick and dirty tests
265:37
we need to test somethin' out great this is a perfect place for it.
265:40
you'll have to set up a file
265:42
you'll have to use like some
265:43
id you don't have to execute a filing is going here it's quick it's dirty,
265:47
you get it done.
265:48
but if you're writing an actual program.
265:50
you definitely definitely definitely want to use
265:53
a
265:53
text editor.
265:55
the text editor is just going to be way more organized everything is going to be a lot cleaner and you're not going to get confused with like where stuff is and what you have so
266:04
that's the basics of the python interpreter,
266:06
you know in the course I
266:07
havent really been using it at all,
266:09
just because I think it's a lot easier to teach when we're inside of a file,
266:13
then inside of here but
266:15
you know
266:15
don't count this guy out
266:16
the python interpreter is awesome a lot of people who use it and it's great if you just need a task
266:21
you know little bits of code out without having to set up some
266:23
huge environment so
266:25
python interpreter
266:26
definitely awesome out player out there you know have some fun
266:29
and take advantage of it.
266:31
hey things are washing if you enjoy the video please leave alike answered
266:34
garbage off academy to be the first snow and release new content
266:37
also were always going to improve so if you have any
266:40
constructive criticism or questions or anything leave a common below
266:44
finally if you're enjoying job academy and you want to help us grow
266:47
head over to draft academy dotcom ford sauce contribute and invest in our future.